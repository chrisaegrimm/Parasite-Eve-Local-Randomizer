console.clear()
require "per-seed"

-- [ Script Glossary ]--

Location			=	0x09D280
MapTimeOfDay		=	0x0A77FD
MapAvSelections		=	0x0A77FE
CTSewersY			=	0x0A78CC
CTSewersX			=	0x0A78D0
ChryslerFloor		=	0x0A7800
StoryFlag			=	0x0A7918

GameThrottle		=	0x073A9C
GameClock			=	0x09CDEC
DeathAnimTimer		=	0x09CE70
DeathAnimation		=	0x09CE74
GreyscaleTrigger	=	0x09CEE4
ActiveSaveMenu		=	0x09D030
PumpSFXLoop			=	0x09D180
GameState			=	0x09D1A0
BattleMenuType		=	0x09D1F0
DeathTrigger		=	0x09D28C
AyaState			=	0x09D2E8
Slot1QuickerSave	=	0x0A0ED4
Slot1SaveProgress	=	0x0A0EE9
Slot2QuickerSave	=	0x0A12EC
Slot2SaveProgress	=	0x0A1301
EventSkip			=	0x0A77F0
BattleSkip			=	0x0A781A
BGMTempo			=	0x0B69A2
BGMVolume			=	0x0B69CA
BGMFadeTimer		=	0x0B69D0
HSJetTimer			=	0x0BFA58

PauseMenuOptions	=	0x09CEF0
LevelUpPEMessage	=	0x09CFF4
CurrentInput		=	0x09D0F0
MenuWindowColor		=	0x09D14C
AyaToolCount		=	0x0A1888
AyaSToolCount		=	0x0A188C
AyaAmmoCrate		=	0x0A1E6E
AyaRocketCrate		=	0x0A1E8E
AyaMaedaCrate		=	0x0A1EAE
WayneJunkTotal		=	0x0A78B0
CurrentOutfit		=	0x0B0CE2
CurrentPE			=	0x0B8A2A
CurrentHP			=	0x0B8A2C
CurrentAT			=	0x0B8A30
StatusIcons			=	0x0B8A6C
AyaMenuName1		=	0x0C0DF0
AyaMenuName2		=	0x0C0DF4
AyaMenuName3		=	0x0C0DF8
AyaMenuName4		=	0x0C0DFC
CurrentLevel		=	0x0C0E0A
CurrentBP			=	0x0C0E10
EquippedWeapon		=	0x0C0E20
EquippedArmor		=	0x0C0E22
PEAbilities			=	0x0C0E24
AyaOffenseStat		=	0x0C0E2A
AyaDefenseStat		=	0x0C0E2C
AyaPEnergyStat		=	0x0C0E2E
AyaStatusRStat		=	0x0C0E30
AyaActiveTStat		=	0x0C0E32
AyaItemCapStat		=	0x0C0E34
SaveWindowColor		=	0x0C0E44

CHTheaterLock		=	0x0A7850
CHRehearseLock		=	0x0A7852
SHCarLock			=	0x0A7854
MUPrimaryLock		=	0x0A7878
WarehouseLock		=	0x0A78AC
CTSewersPumpLock	=	0x0A78C8
HSBasementLock		=	0x0A78F4
HSGreenCardLock		=	0x0A78F8

DropItem1			=	0x0A5DFA
DropItem2			=	0x0A5ED6
DropItem3			=	0x0A5FB2
DropItem4			=	0x0A608E

DarknessTrap		=	0x0BCF89

UChest1				=	0x0BEDBC
UChest2				=	0x0BF03C
UChest3				=	0x0BF2BC
UChest4				=	0x0BF53C
UChest5				=	0x0BF7BC
UChest6				=	0x0BFA3C
UChest7				=	0x0BFCBC
UChest8				=	0x0BFF3C
UChest9				=	0x0C01BC

MChest1				=	0x0BF2C0
MChest2				=	0x0BF540
MChest3				=	0x0BF7C0
MChest4				=	0x0BFA40
MChest5				=	0x1BE5D8
MChest6				=	0x1BE614
MChest7				=	0x1BE650
MChest8				=	0x1BE68C
MChest9				=	0x1BE6C8

AyaFullInvHold		=	0x09CF5C
HSStairwell2Off1	=	0x191ECC
HSStair2CTSwSTool	=	0x191EE8
CTAntiqueTool		=	0x195FD0
HSAutopsyKeyIt		=	0x1976C8
HSAutopsyKeyTx		=	0x197700
SWGateKey			=	0x19AB50
CHRehearseKeyIt		=	0x19D8B8
CHRehearseKeyTx		=	0x19D8F0
CHDiaryRoomAmmo		=	0x19DCB0
CPZooKey			=	0x19ED14
CHParrotAmmo		=	0x19EEC0
CPOfficeSpVest1		=	0x19F0B4
CPOfficeM203		=	0x19F448
PDLockerCopAmmoIt	=	0x1A0AF4
PDLockerCopAmmoTx	=	0x1A0B04
CHTheaterKeyIt		=	0x1A0BAC
CHTheaterKeyTx		=	0x1A0BE4
PDBlueEyesWhtDrgn	=	0x1A162C
PDLocker1BD3CurP	=	0x1A1A6C
PDLocker1AD3Med2	=	0x1A1A88
PDD3LockerMed3		=	0x1A1E00
CHBurnedPair		=	0x1A23AC
HSFuse1It			=	0x1A3508
HSFuse1Tx			=	0x1A3540
CHPropRoomP220		=	0x1A43E8
HSMaedaMayokeIt		=	0x1A5D54
HSMaedaMayokeTx		=	0x1A5D8C
PDStorageKeyIt		=	0x1A5FE8
PDStorageKeyTx		=	0x1A6080
CHClownAmmo			=	0x1A7124
CTSewersCurD		=	0x1A9348
CTSewersOff1		=	0x1A9E7C
CTSewersRng1		=	0x1A9E98
CTSewersTool		=	0x1A9FEC
PDWarnerAmmoIt		=	0x1AB078
PDWarnerAmmoTx		=	0x1AB088
PDBBWCopAmmo6It		=	0x1AB9E4
PDBBWCopAmmo6Tx		=	0x1AB9F4
CTMaedaNaritaIt		=	0x1AC29C
CTMaedaNaritaTx		=	0x1AC2D4
HSFuse3It			=	0x1AFD84
HSFuse3Tx			=	0x1AFDBC
SHPharMed3			=	0x1B18CC
SHSamsG19			=	0x1B1918
SHPharCureM			=	0x1B1B1C
SHSamsCrVest1		=	0x1B1B68
SHPharA1Def1		=	0x1B1DA8
SHSamsClub2			=	0x1B1DB8
SHPharA2Def2		=	0x1B1DC4
SHSamsM11			=	0x1B2008
SHPharB1PE1			=	0x1B2050
SHPharB2PE2			=	0x1B206C
PDEarlyBlueEyesWD	=	0x1B23C8
PDD2Locker1ACurP	=	0x1B2784
PDD2Locker1BMed2	=	0x1B27A0
PDCathyAmmo6It		=	0x1B2A14
PDCathyAmmo6Tx		=	0x1B2A24
PDCmVest1			=	0x1B2A94
PDMaedaHamayaIt		=	0x1B4570
PDMaedaHamayaTx		=	0x1B45D0
WHWarehouseKey		=	0x1B79A0
WHTool				=	0x1B8030
PDCop1Ammo6It		=	0x1B98B8
PDCop1Ammo6Tx		=	0x1B98F0
PDNixAmmo15It		=	0x1B9C54
PDNixAmmo15Tx		=	0x1B9C8C
HSF13Med3			=	0x1BCE28
PDLockerKeyIt		=	0x1BCF0C
PDLockerKeyTx		=	0x1BCF44
HSF13Tool			=	0x1BCF98
PDStairsCopAmmoIt	=	0x1BD27C
PDStairsCopAmmoTx	=	0x1BD28C
HSFuse2It			=	0x1BD550
HSFuse2Tx			=	0x1BD588
HSBlueKeycardIt		=	0x1BD72C
HSBlueKeycardTx		=	0x1BD764
PDTorresM92FIt		=	0x1BD8B0
PDTorresM92FTx		=	0x1BD9E4
SHTrashPileTCard	=	0x1BDA7C
PDM16A1It			=	0x1BEDEC
PDM16A1Tx			=	0x1BF50C
HSGreenCardkeyIt	=	0x1C0E4C
HSGreenCardkeyTx	=	0x1C0E84
PDMedOfficeAmmoIt	=	0x1C195C
PDMedOfficeAmmoTx	=	0x1C196C
HSF13JunkIt			=	0x1C98D4
HSF13JunkTx			=	0x1C990C
HSF13ElevateKeyIt	=	0x1C9EAC
HSF13ElevateKeyTx	=	0x1C9EE4
HSInfiniteTCard		=	0x1CB760
PDModPermit2It		=	0x1D87E0
PDModPermit2Tx		=	0x1D8818
MUMaedaGunTx		=	0x1DC024
MUMaedaGunIt		=	0x1DC03C
PDModPermit1It		=	0x1DD708
PDModPermit1Tx		=	0x1DD740
MUKlampKeyTx		=	0x1DE564
MUKlampKeyIt		=	0x1DE57C

IcnSuperJunk		=	0x0AB748
InfSuperJunk		=	0x0AB74C
DscSuperJunk		=	0x0AB74D
IcnRevive			=	0x0AB828
IcnUnusedDef1		=	0x0AB848
InfUnusedDef1		=	0x0AB84D
TypUnusedDef1		=	0x0AB84E
IcnSuperTool		=	0x0AB8C8
IcnToolKit			=	0x0ABC88
IcnSuperToolKit		=	0x0ABCA8
IcnChryslerKey1		=	0x0ABCE8
IcnChryslerKey2		=	0x0ABD08
IcnChryslerKey3		=	0x0ABD28
IcnChryslerKey4		=	0x0ABD48
IcnChryslerKey5		=	0x0ABD68
IcnChryslerKey6		=	0x0ABD88
IcnChryslerKey7		=	0x0ABDA8
DscMaedaGun			=	0x0AC20D
DscDress			=	0x0AC88D
DscNarita			=	0x0ACF4D

--Weapons--
	IconClub1 = 0x0ABDC8 MaxSlotsClub1 = 0x0ABDC9 TypClub1 = 0x0ABDCE OffClub1 = 0x0ABDCF RngClub1 = 0x0ABDD0
	BltClub1 = 0x0ABDD1 CurAmmoClub1 = 0x0ABDD2 OffPlusClub1 = 0x0ABDD6 RngPlusClub1 = 0x0ABDD8 BltPlusClub1 = 0x0ABDDA
	CurSlotsClub1 = 0x0ABDDC Mod1Club1 = 0x0ABDDD	Mod2Club1 = 0x0ABDDE Mod3Club1 = 0x0ABDDF Mod4Club1 = 0x0ABDE0
	Mod5Club1 = 0x0ABDE1 Mod6Club1 = 0x0ABDE2 Mod7Club1 = 0x0ABDE3 Mod8Club1 = 0x0ABDE4 Mod9Club1 = 0x0ABDE5 Mod10Club1 = 0x0ABDE6
	IconClub2 = 0x0ABDE8 MaxSlotsClub2 = 0x0ABDE9 TypClub2 = 0x0ABDEE OffClub2 = 0x0ABDEF RngClub2 = 0x0ABDF0
	BltClub2 = 0x0ABDF1 CurAmmoClub2 = 0x0ABDF2 OffPlusClub2 = 0x0ABDF6 RngPlusClub2 = 0x0ABDF8 BltPlusClub2 = 0x0ABDFA
	CurSlotsClub2 = 0x0ABDFC Mod1Club2 = 0x0ABDFD Mod2Club2 = 0x0ABDFE Mod3Club2 = 0x0ABDFF Mod4Club2 = 0x0ABE00
	Mod5Club2 = 0x0ABE01 Mod6Club2 = 0x0ABE02 Mod7Club2 = 0x0ABE03 Mod8Club2 = 0x0ABE04 Mod9Club2 = 0x0ABE05 Mod10Club2 = 0x0ABE06
	IconClub3 = 0x0ABE08 MaxSlotsClub3 = 0x0ABE09 TypClub3 = 0x0ABE0E OffClub3 = 0x0ABE0F RngClub3 = 0x0ABE10
	BltClub3 = 0x0ABE11 CurAmmoClub3 = 0x0ABE12 OffPlusClub3 = 0x0ABE16 RngPlusClub3 = 0x0ABE18 BltPlusClub3 = 0x0ABE1A
	CurSlotsClub3 = 0x0ABE1C Mod1Club3 = 0x0ABE1D Mod2Club3 = 0x0ABE1E Mod3Club3 = 0x0ABE1F Mod4Club3 = 0x0ABE20
	Mod5Club3 = 0x0ABE21 Mod6Club3 = 0x0ABE22 Mod7Club3 = 0x0ABE23 Mod8Club3 = 0x0ABE24 Mod9Club3 = 0x0ABE25 Mod10Club3 = 0x0ABE26
	IconClub4 = 0x0ABE28 MaxSlotsClub4 = 0x0ABE29 TypClub4 = 0x0ABE2E OffClub4 = 0x0ABE2F RngClub4 = 0x0ABE30
	BltClub4 = 0x0ABE31 CurAmmoClub4 = 0x0ABE32 OffPlusClub4 = 0x0ABE36 RngPlusClub4 = 0x0ABE38 BltPlusClub4 = 0x0ABE3A
	CurSlotsClub4 = 0x0ABE3C Mod1Club4 = 0x0ABE3D Mod2Club4 = 0x0ABE3E Mod3Club4 = 0x0ABE3F Mod4Club4 = 0x0ABE40
	Mod5Club4 = 0x0ABE41 Mod6Club4 = 0x0ABE42 Mod7Club4 = 0x0ABE43 Mod8Club4 = 0x0ABE44 Mod9Club4 = 0x0ABE45 Mod10Club4 = 0x0ABE46
	IconClub5 = 0x0ABE48 MaxSlotsClub5 = 0x0ABE49 TypClub5 = 0x0ABE4E OffClub5 = 0x0ABE4F RngClub5 = 0x0ABE50
	BltClub5 = 0x0ABE51 CurAmmoClub5 = 0x0ABE52 OffPlusClub5 = 0x0ABE56 RngPlusClub5 = 0x0ABE58 BltPlusClub5 = 0x0ABE5A
	CurSlotsClub5 = 0x0ABE5C Mod1Club5 = 0x0ABE5D Mod2Club5 = 0x0ABE5E Mod3Club5 = 0x0ABE5F Mod4Club5 = 0x0ABE60
	Mod5Club5 = 0x0ABE61 Mod6Club5 = 0x0ABE62 Mod7Club5 = 0x0ABE63 Mod8Club5 = 0x0ABE64 Mod9Club5 = 0x0ABE65 Mod10Club5 = 0x0ABE66
	IconM84F = 0x0ABE68 MaxSlotsM84F = 0x0ABE69 TypM84F = 0x0ABE6E OffM84F = 0x0ABE6F RngM84F = 0x0ABE70
	BltM84F = 0x0ABE71 CurAmmoM84F = 0x0ABE72 OffPlusM84F = 0x0ABE76 RngPlusM84F = 0x0ABE78 BltPlusM84F = 0x0ABE7A
	CurSlotsM84F = 0x0ABE7C Mod1M84F = 0x0ABE7D Mod2M84F = 0x0ABE7E Mod3M84F = 0x0ABE7F Mod4M84F = 0x0ABE80
	Mod5M84F = 0x0ABE81 Mod6M84F = 0x0ABE82 Mod7M84F = 0x0ABE83 Mod8M84F = 0x0ABE84 Mod9M84F = 0x0ABE85 Mod10M84F = 0x0ABE86
	IconM9 = 0x0ABE88 MaxSlotsM9 = 0x0ABE89 TypM9 = 0x0ABE8E OffM9 = 0x0ABE8F RngM9 = 0x0ABE90
	BltM9 = 0x0ABE91 CurAmmoM9 = 0x0ABE92 OffPlusM9 = 0x0ABE96 RngPlusM9 = 0x0ABE98 BltPlusM9 = 0x0ABE9A
	CurSlotsM9 = 0x0ABE9C Mod1M9 = 0x0ABE9D Mod2M9 = 0x0ABE9E Mod3M9 = 0x0ABE9F Mod4M9 = 0x0ABEA0
	Mod5M9 = 0x0ABEA1 Mod6M9 = 0x0ABEA2 Mod7M9 = 0x0ABEA3 Mod8M9 = 0x0ABEA4 Mod9M9 = 0x0ABEA5 Mod10M9 = 0x0ABEA6
	IconM92 = 0x0ABEA8 MaxSlotsM92 = 0x0ABEA9 TypM92 = 0x0ABEAE OffM92 = 0x0ABEAF RngM92 = 0x0ABEB0
	BltM92 = 0x0ABEB1 CurAmmoM92 = 0x0ABEB2 OffPlusM92 = 0x0ABEB6 RngPlusM92 = 0x0ABEB8 BltPlusM92 = 0x0ABEBA
	CurSlotsM92 = 0x0ABEBC Mod1M92 = 0x0ABEBD Mod2M92 = 0x0ABEBE Mod3M92 = 0x0ABEBF Mod4M92 = 0x0ABEC0
	Mod5M92 = 0x0ABEC1 Mod6M92 = 0x0ABEC2 Mod7M92 = 0x0ABEC3 Mod8M92 = 0x0ABEC4 Mod9M92 = 0x0ABEC5 Mod10M92 = 0x0ABEC6
	IconM93 = 0x0ABEC8 MaxSlotsM93 = 0x0ABEC9 TypM93 = 0x0ABECE OffM93 = 0x0ABECF RngM93 = 0x0ABED0
	BltM93 = 0x0ABED1 CurAmmoM93 = 0x0ABED2 OffPlusM93 = 0x0ABED6 RngPlusM93 = 0x0ABED8 BltPlusM93 = 0x0ABEDA
	CurSlotsM93 = 0x0ABEDC Mod1M93 = 0x0ABEDD Mod2M93 = 0x0ABEDE Mod3M93 = 0x0ABEDF Mod4M93 = 0x0ABEE0
	Mod5M93 = 0x0ABEE1 Mod6M93 = 0x0ABEE2 Mod7M93 = 0x0ABEE3 Mod8M93 = 0x0ABEE4 Mod9M93 = 0x0ABEE5 Mod10M93 = 0x0ABEE6
	IconM8000 = 0x0ABEE8 MaxSlotsM8000 = 0x0ABEE9 TypM8000 = 0x0ABEEE OffM8000 = 0x0ABEEF RngM8000 = 0x0ABEF0
	BltM8000 = 0x0ABEF1 CurAmmoM8000 = 0x0ABEF2 OffPlusM8000 = 0x0ABEF6 RngPlusM8000 = 0x0ABEF8 BltPlusM8000 = 0x0ABEFA
	CurSlotsM8000 = 0x0ABEFC Mod1M8000 = 0x0ABEFD Mod2M8000 = 0x0ABEFE Mod3M8000 = 0x0ABEFF Mod4M8000 = 0x0ABF00
	Mod5M8000 = 0x0ABF01 Mod6M8000 = 0x0ABF02 Mod7M8000 = 0x0ABF03 Mod8M8000 = 0x0ABF04 Mod9M8000 = 0x0ABF05 Mod10M8000 = 0x0ABF06
	IconM96 = 0x0ABF08 MaxSlotsM96 = 0x0ABF09 TypM96 = 0x0ABF0E OffM96 = 0x0ABF0F RngM96 = 0x0ABF10
	BltM96 = 0x0ABF11 CurAmmoM96 = 0x0ABF12 OffPlusM96 = 0x0ABF16 RngPlusM96 = 0x0ABF18 BltPlusM96 = 0x0ABF1A
	CurSlotsM96 = 0x0ABF1C Mod1M96 = 0x0ABF1D Mod2M96 = 0x0ABF1E Mod3M96 = 0x0ABF1F Mod4M96 = 0x0ABF20
	Mod5M96 = 0x0ABF21 Mod6M96 = 0x0ABF22 Mod7M96 = 0x0ABF23 Mod8M96 = 0x0ABF24 Mod9M96 = 0x0ABF25 Mod10M96 = 0x0ABF26
	IconM96R = 0x0ABF28 MaxSlotsM96R = 0x0ABF29 TypM96R = 0x0ABF2E OffM96R = 0x0ABF2F RngM96R = 0x0ABF30
	BltM96R = 0x0ABF31 CurAmmoM96R = 0x0ABF32 OffPlusM96R = 0x0ABF36 RngPlusM96R = 0x0ABF38 BltPlusM96R = 0x0ABF3A
	CurSlotsM96R = 0x0ABF3C Mod1M96R = 0x0ABF3D Mod2M96R = 0x0ABF3E Mod3M96R = 0x0ABF3F Mod4M96R = 0x0ABF40
	Mod5M96R = 0x0ABF41 Mod6M96R = 0x0ABF42 Mod7M96R = 0x0ABF43 Mod8M96R = 0x0ABF44 Mod9M96R = 0x0ABF45 Mod10M96R = 0x0ABF46
	IconP220 = 0x0ABF48 MaxSlotsP220 = 0x0ABF49 TypP220 = 0x0ABF4E OffP220 = 0x0ABF4F RngP220 = 0x0ABF50
	BltP220 = 0x0ABF51 CurAmmoP220 = 0x0ABF52 OffPlusP220 = 0x0ABF56 RngPlusP220 = 0x0ABF58 BltPlusP220 = 0x0ABF5A
	CurSlotsP220 = 0x0ABF5C Mod1P220 = 0x0ABF5D Mod2P220 = 0x0ABF5E Mod3P220 = 0x0ABF5F Mod4P220 = 0x0ABF60
	Mod5P220 = 0x0ABF61 Mod6P220 = 0x0ABF62 Mod7P220 = 0x0ABF63 Mod8P220 = 0x0ABF64 Mod9P220 = 0x0ABF65 Mod10P220 = 0x0ABF66
	IconP2202 = 0x0ABF68 MaxSlotsP2202 = 0x0ABF69 TypP2202 = 0x0ABF6E OffP2202 = 0x0ABF6F RngP2202 = 0x0ABF70
	BltP2202 = 0x0ABF71 CurAmmoP2202 = 0x0ABF72 OffPlusP2202 = 0x0ABF76 RngPlusP2202 = 0x0ABF78 BltPlusP2202 = 0x0ABF7A
	CurSlotsP2202 = 0x0ABF7C Mod1P2202 = 0x0ABF7D Mod2P2202 = 0x0ABF7E Mod3P2202 = 0x0ABF7F Mod4P2202 = 0x0ABF80
	Mod5P2202 = 0x0ABF81 Mod6P2202 = 0x0ABF82 Mod7P2202 = 0x0ABF83 Mod8P2202 = 0x0ABF84 Mod9P2202 = 0x0ABF85 Mod10P2202 = 0x0ABF86
	IconP228 = 0x0ABF88 MaxSlotsP228 = 0x0ABF89 TypP228 = 0x0ABF8E OffP228 = 0x0ABF8F RngP228 = 0x0ABF90
	BltP228 = 0x0ABF91 CurAmmoP228 = 0x0ABF92 OffPlusP228 = 0x0ABF96 RngPlusP228 = 0x0ABF98 BltPlusP228 = 0x0ABF9A
	CurSlotsP228 = 0x0ABF9C Mod1P228 = 0x0ABF9D Mod2P228 = 0x0ABF9E Mod3P228 = 0x0ABF9F Mod4P228 = 0x0ABFA0
	Mod5P228 = 0x0ABFA1 Mod6P228 = 0x0ABFA2 Mod7P228 = 0x0ABFA3 Mod8P228 = 0x0ABFA4 Mod9P228 = 0x0ABFA5 Mod10P228 = 0x0ABFA6
	IconP226 = 0x0ABFA8 MaxSlotsP226 = 0x0ABFA9 TypP226 = 0x0ABFAE OffP226 = 0x0ABFAF RngP226 = 0x0ABFB0
	BltP226 = 0x0ABFB1 CurAmmoP226 = 0x0ABFB2 OffPlusP226 = 0x0ABFB6 RngPlusP226 = 0x0ABFB8 BltPlusP226 = 0x0ABFBA
	CurSlotsP226 = 0x0ABFBC Mod1P226 = 0x0ABFBD Mod2P226 = 0x0ABFBE Mod3P226 = 0x0ABFBF Mod4P226 = 0x0ABFC0
	Mod5P226 = 0x0ABFC1 Mod6P226 = 0x0ABFC2 Mod7P226 = 0x0ABFC3 Mod8P226 = 0x0ABFC4 Mod9P226 = 0x0ABFC5 Mod10P226 = 0x0ABFC6
	IconP229 = 0x0ABFC8 MaxSlotsP229 = 0x0ABFC9 TypP229 = 0x0ABFCE OffP229 = 0x0ABFCF RngP229 = 0x0ABFD0
	BltP229 = 0x0ABFD1 CurAmmoP229 = 0x0ABFD2 OffPlusP229 = 0x0ABFD6 RngPlusP229 = 0x0ABFD8 BltPlusP229 = 0x0ABFDA
	CurSlotsP229 = 0x0ABFDC Mod1P229 = 0x0ABFDD Mod2P229 = 0x0ABFDE Mod3P229 = 0x0ABFDF Mod4P229 = 0x0ABFE0
	Mod5P229 = 0x0ABFE1 Mod6P229 = 0x0ABFE2 Mod7P229 = 0x0ABFE3 Mod8P229 = 0x0ABFE4 Mod9P229 = 0x0ABFE5 Mod10P229 = 0x0ABFE6
	IconM1911A1 = 0x0ABFE8 MaxSlotsM1911A1 = 0x0ABFE9 TypM1911A1 = 0x0ABFEE OffM1911A1 = 0x0ABFEF RngM1911A1 = 0x0ABFF0
	BltM1911A1 = 0x0ABFF1 CurAmmoM1911A1 = 0x0ABFF2 OffPlusM1911A1 = 0x0ABFF6 RngPlusM1911A1 = 0x0ABFF8 BltPlusM1911A1 = 0x0ABFFA
	CurSlotsM1911A1 = 0x0ABFFC Mod1M1911A1 = 0x0ABFFD Mod2M1911A1 = 0x0ABFFE Mod3M1911A1 = 0x0ABFFF Mod4M1911A1 = 0x0AC000
	Mod5M1911A1 = 0x0AC001 Mod6M1911A1 = 0x0AC002 Mod7M1911A1 = 0x0AC003 Mod8M1911A1 = 0x0AC004 Mod9M1911A1 = 0x0AC005 Mod10M1911A1 = 0x0AC006
	IconM1911A2 = 0x0AC008 MaxSlotsM1911A2 = 0x0AC009 TypM1911A2 = 0x0AC00E OffM1911A2 = 0x0AC00F RngM1911A2 = 0x0AC010
	BltM1911A2 = 0x0AC011 CurAmmoM1911A2 = 0x0AC012 OffPlusM1911A2 = 0x0AC016 RngPlusM1911A2 = 0x0AC018 BltPlusM1911A2 = 0x0AC01A
	CurSlotsM1911A2 = 0x0AC01C Mod1M1911A2 = 0x0AC01D Mod2M1911A2 = 0x0AC01E Mod3M1911A2 = 0x0AC01F Mod4M1911A2 = 0x0AC020
	Mod5M1911A2 = 0x0AC021 Mod6M1911A2 = 0x0AC022 Mod7M1911A2 = 0x0AC023 Mod8M1911A2 = 0x0AC024 Mod9M1911A2 = 0x0AC025 Mod10M1911A2 = 0x0AC026
	IconM1911A3 = 0x0AC028 MaxSlotsM1911A3 = 0x0AC029 TypM1911A3 = 0x0AC02E OffM1911A3 = 0x0AC02F RngM1911A3 = 0x0AC030
	BltM1911A3 = 0x0AC031 CurAmmoM1911A3 = 0x0AC032 OffPlusM1911A3 = 0x0AC036 RngPlusM1911A3 = 0x0AC038 BltPlusM1911A3 = 0x0AC03A
	CurSlotsM1911A3 = 0x0AC03C Mod1M1911A3 = 0x0AC03D Mod2M1911A3 = 0x0AC03E Mod3M1911A3 = 0x0AC03F Mod4M1911A3 = 0x0AC040
	Mod5M1911A3 = 0x0AC041 Mod6M1911A3 = 0x0AC042 Mod7M1911A3 = 0x0AC043 Mod8M1911A3 = 0x0AC044 Mod9M1911A3 = 0x0AC045 Mod10M1911A3 = 0x0AC046
	IconM1911A4 = 0x0AC048 MaxSlotsM1911A4 = 0x0AC049 TypM1911A4 = 0x0AC04E OffM1911A4 = 0x0AC04F RngM1911A4 = 0x0AC050
	BltM1911A4 = 0x0AC051 CurAmmoM1911A4 = 0x0AC052 OffPlusM1911A4 = 0x0AC056 RngPlusM1911A4 = 0x0AC058 BltPlusM1911A4 = 0x0AC05A
	CurSlotsM1911A4 = 0x0AC05C Mod1M1911A4 = 0x0AC05D Mod2M1911A4 = 0x0AC05E Mod3M1911A4 = 0x0AC05F Mod4M1911A4 = 0x0AC060
	Mod5M1911A4 = 0x0AC061 Mod6M1911A4 = 0x0AC062 Mod7M1911A4 = 0x0AC063 Mod8M1911A4 = 0x0AC064 Mod9M1911A4 = 0x0AC065 Mod10M1911A4 = 0x0AC066
	IconM1911A5 = 0x0AC068 MaxSlotsM1911A5 = 0x0AC069 TypM1911A5 = 0x0AC06E OffM1911A5 = 0x0AC06F RngM1911A5 = 0x0AC070
	BltM1911A5 = 0x0AC071 CurAmmoM1911A5 = 0x0AC072 OffPlusM1911A5 = 0x0AC076 RngPlusM1911A5 = 0x0AC078 BltPlusM1911A5 = 0x0AC07A
	CurSlotsM1911A5 = 0x0AC07C Mod1M1911A5 = 0x0AC07D Mod2M1911A5 = 0x0AC07E Mod3M1911A5 = 0x0AC07F Mod4M1911A5 = 0x0AC080
	Mod5M1911A5 = 0x0AC081 Mod6M1911A5 = 0x0AC082 Mod7M1911A5 = 0x0AC083 Mod8M1911A5 = 0x0AC084 Mod9M1911A5 = 0x0AC085 Mod10M1911A5 = 0x0AC086
	IconP8 = 0x0AC088 MaxSlotsP8 = 0x0AC089 TypP8 = 0x0AC08E OffP8 = 0x0AC08F RngP8 = 0x0AC090
	BltP8 = 0x0AC091 CurAmmoP8 = 0x0AC092 OffPlusP8 = 0x0AC096 RngPlusP8 = 0x0AC098 BltPlusP8 = 0x0AC09A
	CurSlotsP8 = 0x0AC09C Mod1P8 = 0x0AC09D Mod2P8 = 0x0AC09E Mod3P8 = 0x0AC09F Mod4P8 = 0x0AC0A0
	Mod5P8 = 0x0AC0A1 Mod6P8 = 0x0AC0A2 Mod7P8 = 0x0AC0A3 Mod8P8 = 0x0AC0A4 Mod9P8 = 0x0AC0A5 Mod10P8 = 0x0AC0A6
	IconUSP = 0x0AC0A8 MaxSlotsUSP = 0x0AC0A9 TypUSP = 0x0AC0AE OffUSP = 0x0AC0AF RngUSP = 0x0AC0B0
	BltUSP = 0x0AC0B1 CurAmmoUSP = 0x0AC0B2 OffPlusUSP = 0x0AC0B6 RngPlusUSP = 0x0AC0B8 BltPlusUSP = 0x0AC0BA
	CurSlotsUSP = 0x0AC0BC Mod1USP = 0x0AC0BD Mod2USP = 0x0AC0BE Mod3USP = 0x0AC0BF Mod4USP = 0x0AC0C0
	Mod5USP = 0x0AC0C1 Mod6USP = 0x0AC0C2 Mod7USP = 0x0AC0C3 Mod8USP = 0x0AC0C4 Mod9USP = 0x0AC0C5 Mod10USP = 0x0AC0C6
	IconUSP2 = 0x0AC0C8 MaxSlotsUSP2 = 0x0AC0C9 TypUSP2 = 0x0AC0CE OffUSP2 = 0x0AC0CF RngUSP2 = 0x0AC0D0
	BltUSP2 = 0x0AC0D1 CurAmmoUSP2 = 0x0AC0D2 OffPlusUSP2 = 0x0AC0D6 RngPlusUSP2 = 0x0AC0D8 BltPlusUSP2 = 0x0AC0DA
	CurSlotsUSP2 = 0x0AC0DC Mod1USP2 = 0x0AC0DD Mod2USP2 = 0x0AC0DE Mod3USP2 = 0x0AC0DF Mod4USP2 = 0x0AC0E0
	Mod5USP2 = 0x0AC0E1 Mod6USP2 = 0x0AC0E2 Mod7USP2 = 0x0AC0E3 Mod8USP2 = 0x0AC0E4 Mod9USP2 = 0x0AC0E5 Mod10USP2 = 0x0AC0E6
	IconUSP3 = 0x0AC0E8 MaxSlotsUSP3 = 0x0AC0E9 TypUSP3 = 0x0AC0EE OffUSP3 = 0x0AC0EF RngUSP3 = 0x0AC0F0
	BltUSP3 = 0x0AC0F1 CurAmmoUSP3 = 0x0AC0F2 OffPlusUSP3 = 0x0AC0F6 RngPlusUSP3 = 0x0AC0F8 BltPlusUSP3 = 0x0AC0FA
	CurSlotsUSP3 = 0x0AC0FC Mod1USP3 = 0x0AC0FD Mod2USP3 = 0x0AC0FE Mod3USP3 = 0x0AC0FF Mod4USP3 = 0x0AC100
	Mod5USP3 = 0x0AC101 Mod6USP3 = 0x0AC102 Mod7USP3 = 0x0AC103 Mod8USP3 = 0x0AC104 Mod9USP3 = 0x0AC105 Mod10USP3 = 0x0AC106
	IconMark23 = 0x0AC108 MaxSlotsMark23 = 0x0AC109 TypMark23 = 0x0AC10E OffMark23 = 0x0AC10F RngMark23 = 0x0AC110
	BltMark23 = 0x0AC111 CurAmmoMark23 = 0x0AC112 OffPlusMark23 = 0x0AC116 RngPlusMark23 = 0x0AC118 BltPlusMark23 = 0x0AC11A
	CurSlotsMark23 = 0x0AC11C Mod1Mark23 = 0x0AC11D Mod2Mark23 = 0x0AC11E Mod3Mark23 = 0x0AC11F Mod4Mark23 = 0x0AC120
	Mod5Mark23 = 0x0AC121 Mod6Mark23 = 0x0AC122 Mod7Mark23 = 0x0AC123 Mod8Mark23 = 0x0AC124 Mod9Mark23 = 0x0AC125 Mod10Mark23 = 0x0AC126
	IconG19 = 0x0AC128 MaxSlotsG19 = 0x0AC129 TypG19 = 0x0AC12E OffG19 = 0x0AC12F RngG19 = 0x0AC130
	BltG19 = 0x0AC131 CurAmmoG19 = 0x0AC132 OffPlusG19 = 0x0AC136 RngPlusG19 = 0x0AC138 BltPlusG19 = 0x0AC13A
	CurSlotsG19 = 0x0AC13C Mod1G19 = 0x0AC13D Mod2G19 = 0x0AC13E Mod3G19 = 0x0AC13F Mod4G19 = 0x0AC140
	Mod5G19 = 0x0AC141 Mod6G19 = 0x0AC142 Mod7G19 = 0x0AC143 Mod8G19 = 0x0AC144 Mod9G19 = 0x0AC145 Mod10G19 = 0x0AC146
	IconG23 = 0x0AC148 MaxSlotsG23 = 0x0AC149 TypG23 = 0x0AC14E OffG23 = 0x0AC14F RngG23 = 0x0AC150
	BltG23 = 0x0AC151 CurAmmoG23 = 0x0AC152 OffPlusG23 = 0x0AC156 RngPlusG23 = 0x0AC158 BltPlusG23 = 0x0AC15A
	CurSlotsG23 = 0x0AC15C Mod1G23 = 0x0AC15D Mod2G23 = 0x0AC15E Mod3G23 = 0x0AC15F Mod4G23 = 0x0AC160
	Mod5G23 = 0x0AC161 Mod6G23 = 0x0AC162 Mod7G23 = 0x0AC163 Mod8G23 = 0x0AC164 Mod9G23 = 0x0AC165 Mod10G23 = 0x0AC166
	IconG22 = 0x0AC168 MaxSlotsG22 = 0x0AC169 TypG22 = 0x0AC16E OffG22 = 0x0AC16F RngG22 = 0x0AC170
	BltG22 = 0x0AC171 CurAmmoG22 = 0x0AC172 OffPlusG22 = 0x0AC176 RngPlusG22 = 0x0AC178 BltPlusG22 = 0x0AC17A
	CurSlotsG22 = 0x0AC17C Mod1G22 = 0x0AC17D Mod2G22 = 0x0AC17E Mod3G22 = 0x0AC17F Mod4G22 = 0x0AC180
	Mod5G22 = 0x0AC181 Mod6G22 = 0x0AC182 Mod7G22 = 0x0AC183 Mod8G22 = 0x0AC184 Mod9G22 = 0x0AC185 Mod10G22 = 0x0AC186
	IconG20 = 0x0AC188 MaxSlotsG20 = 0x0AC189 TypG20 = 0x0AC18E OffG20 = 0x0AC18F RngG20 = 0x0AC190
	BltG20 = 0x0AC191 CurAmmoG20 = 0x0AC192 OffPlusG20 = 0x0AC196 RngPlusG20 = 0x0AC198 BltPlusG20 = 0x0AC19A
	CurSlotsG20 = 0x0AC19C Mod1G20 = 0x0AC19D Mod2G20 = 0x0AC19E Mod3G20 = 0x0AC19F Mod4G20 = 0x0AC1A0
	Mod5G20 = 0x0AC1A1 Mod6G20 = 0x0AC1A2 Mod7G20 = 0x0AC1A3 Mod8G20 = 0x0AC1A4 Mod9G20 = 0x0AC1A5 Mod10G20 = 0x0AC1A6
	IconM712 = 0x0AC1A8 MaxSlotsM712 = 0x0AC1A9 TypM712 = 0x0AC1AE OffM712 = 0x0AC1AF RngM712 = 0x0AC1B0
	BltM712 = 0x0AC1B1 CurAmmoM712 = 0x0AC1B2 OffPlusM712 = 0x0AC1B6 RngPlusM712 = 0x0AC1B8 BltPlusM712 = 0x0AC1BA
	CurSlotsM712 = 0x0AC1BC Mod1M712 = 0x0AC1BD Mod2M712 = 0x0AC1BE Mod3M712 = 0x0AC1BF Mod4M712 = 0x0AC1C0
	Mod5M712 = 0x0AC1C1 Mod6M712 = 0x0AC1C2 Mod7M712 = 0x0AC1C3 Mod8M712 = 0x0AC1C4 Mod9M712 = 0x0AC1C5 Mod10M712 = 0x0AC1C6
	IconPPK = 0x0AC1C8 MaxSlotsPPK = 0x0AC1C9 TypPPK = 0x0AC1CE OffPPK = 0x0AC1CF RngPPK = 0x0AC1D0
	BltPPK = 0x0AC1D1 CurAmmoPPK = 0x0AC1D2 OffPlusPPK = 0x0AC1D6 RngPlusPPK = 0x0AC1D8 BltPlusPPK = 0x0AC1DA
	CurSlotsPPK = 0x0AC1DC Mod1PPK = 0x0AC1DD Mod2PPK = 0x0AC1DE Mod3PPK = 0x0AC1DF Mod4PPK = 0x0AC1E0
	Mod5PPK = 0x0AC1E1 Mod6PPK = 0x0AC1E2 Mod7PPK = 0x0AC1E3 Mod8PPK = 0x0AC1E4 Mod9PPK = 0x0AC1E5 Mod10PPK = 0x0AC1E6
	IconAM44 = 0x0AC1E8 MaxSlotsAM44 = 0x0AC1E9 TypAM44 = 0x0AC1EE OffAM44 = 0x0AC1EF RngAM44 = 0x0AC1F0
	BltAM44 = 0x0AC1F1 CurAmmoAM44 = 0x0AC1F2 OffPlusAM44 = 0x0AC1F6 RngPlusAM44 = 0x0AC1F8 BltPlusAM44 = 0x0AC1FA
	CurSlotsAM44 = 0x0AC1FC Mod1AM44 = 0x0AC1FD Mod2AM44 = 0x0AC1FE Mod3AM44 = 0x0AC1FF Mod4AM44 = 0x0AC200
	Mod5AM44 = 0x0AC201 Mod6AM44 = 0x0AC202 Mod7AM44 = 0x0AC203 Mod8AM44 = 0x0AC204 Mod9AM44 = 0x0AC205 Mod10AM44 = 0x0AC206
	IconMaedaGun = 0x0AC208 MaxSlotsMaedaGun = 0x0AC209 TypMaedaGun = 0x0AC20E OffMaedaGun = 0x0AC20F RngMaedaGun = 0x0AC210
	BltMaedaGun = 0x0AC211 CurAmmoMaedaGun = 0x0AC212 OffPlusMaedaGun = 0x0AC216 RngPlusMaedaGun = 0x0AC218 BltPlusMaedaGun = 0x0AC21A
	CurSlotsMaedaGun = 0x0AC21C Mod1MaedaGun = 0x0AC21D Mod2MaedaGun = 0x0AC21E Mod3MaedaGun = 0x0AC21F Mod4MaedaGun = 0x0AC220
	Mod5MaedaGun = 0x0AC221 Mod6MaedaGun = 0x0AC222 Mod7MaedaGun = 0x0AC223 Mod8MaedaGun = 0x0AC224 Mod9MaedaGun = 0x0AC225 Mod10MaedaGun = 0x0AC226
	IconPPSh41 = 0x0AC228 MaxSlotsPPSh41 = 0x0AC229 TypPPSh41 = 0x0AC22E OffPPSh41 = 0x0AC22F RngPPSh41 = 0x0AC230
	BltPPSh41 = 0x0AC231 CurAmmoPPSh41 = 0x0AC232 OffPlusPPSh41 = 0x0AC236 RngPlusPPSh41 = 0x0AC238 BltPlusPPSh41 = 0x0AC23A
	CurSlotsPPSh41 = 0x0AC23C Mod1PPSh41 = 0x0AC23D Mod2PPSh41 = 0x0AC23E Mod3PPSh41 = 0x0AC23F Mod4PPSh41 = 0x0AC240
	Mod5PPSh41 = 0x0AC241 Mod6PPSh41 = 0x0AC242 Mod7PPSh41 = 0x0AC243 Mod8PPSh41 = 0x0AC244 Mod9PPSh41 = 0x0AC245 Mod10PPSh41 = 0x0AC246
	IconSP1C = 0x0AC248 MaxSlotsSP1C = 0x0AC249 TypSP1C = 0x0AC24E OffSP1C = 0x0AC24F RngSP1C = 0x0AC250
	BltSP1C = 0x0AC251 CurAmmoSP1C = 0x0AC252 OffPlusSP1C = 0x0AC256 RngPlusSP1C = 0x0AC258 BltPlusSP1C = 0x0AC25A
	CurSlotsSP1C = 0x0AC25C Mod1SP1C = 0x0AC25D Mod2SP1C = 0x0AC25E Mod3SP1C = 0x0AC25F Mod4SP1C = 0x0AC260
	Mod5SP1C = 0x0AC261 Mod6SP1C = 0x0AC262 Mod7SP1C = 0x0AC263 Mod8SP1C = 0x0AC264 Mod9SP1C = 0x0AC265 Mod10SP1C = 0x0AC266
	IconUSPTU = 0x0AC268 MaxSlotsUSPTU = 0x0AC269 TypUSPTU = 0x0AC26E OffUSPTU = 0x0AC26F RngUSPTU = 0x0AC270
	BltUSPTU = 0x0AC271 CurAmmoUSPTU = 0x0AC272 OffPlusUSPTU = 0x0AC276 RngPlusUSPTU = 0x0AC278 BltPlusUSPTU = 0x0AC27A
	CurSlotsUSPTU = 0x0AC27C Mod1USPTU = 0x0AC27D Mod2USPTU = 0x0AC27E Mod3USPTU = 0x0AC27F Mod4USPTU = 0x0AC280
	Mod5USPTU = 0x0AC281 Mod6USPTU = 0x0AC282 Mod7USPTU = 0x0AC283 Mod8USPTU = 0x0AC284 Mod9USPTU = 0x0AC285 Mod10USPTU = 0x0AC286
	IconAK47 = 0x0AC288 MaxSlotsAK47 = 0x0AC289 TypAK47 = 0x0AC28E OffAK47 = 0x0AC28F RngAK47 = 0x0AC290
	BltAK47 = 0x0AC291 CurAmmoAK47 = 0x0AC292 OffPlusAK47 = 0x0AC296 RngPlusAK47 = 0x0AC298 BltPlusAK47 = 0x0AC29A
	CurSlotsAK47 = 0x0AC29C Mod1AK47 = 0x0AC29D Mod2AK47 = 0x0AC29E Mod3AK47 = 0x0AC29F Mod4AK47 = 0x0AC2A0
	Mod5AK47 = 0x0AC2A1 Mod6AK47 = 0x0AC2A2 Mod7AK47 = 0x0AC2A3 Mod8AK47 = 0x0AC2A4 Mod9AK47 = 0x0AC2A5 Mod10AK47 = 0x0AC2A6
	IconDE50AE7 = 0x0AC2A8 MaxSlotsDE50AE7 = 0x0AC2A9 TypDE50AE7 = 0x0AC2AE OffDE50AE7 = 0x0AC2AF RngDE50AE7 = 0x0AC2B0
	BltDE50AE7 = 0x0AC2B1 CurAmmoDE50AE7 = 0x0AC2B2 OffPlusDE50AE7 = 0x0AC2B6 RngPlusDE50AE7 = 0x0AC2B8 BltPlusDE50AE7 = 0x0AC2BA
	CurSlotsDE50AE7 = 0x0AC2BC Mod1DE50AE7 = 0x0AC2BD Mod2DE50AE7 = 0x0AC2BE Mod3DE50AE7 = 0x0AC2BF Mod4DE50AE7 = 0x0AC2C0
	Mod5DE50AE7 = 0x0AC2C1 Mod6DE50AE7 = 0x0AC2C2 Mod7DE50AE7 = 0x0AC2C3 Mod8DE50AE7 = 0x0AC2C4 Mod9DE50AE7 = 0x0AC2C5 Mod10DE50AE7 = 0x0AC2C6
	IconM870 = 0x0AC2E8 MaxSlotsM870 = 0x0AC2E9 TypM870 = 0x0AC2EE OffM870 = 0x0AC2EF RngM870 = 0x0AC2F0
	BltM870 = 0x0AC2F1 CurAmmoM870 = 0x0AC2F2 OffPlusM870 = 0x0AC2F6 RngPlusM870 = 0x0AC2F8 BltPlusM870 = 0x0AC2FA
	CurSlotsM870 = 0x0AC2FC Mod1M870 = 0x0AC2FD Mod2M870 = 0x0AC2FE Mod3M870 = 0x0AC2FF Mod4M870 = 0x0AC300
	Mod5M870 = 0x0AC301 Mod6M870 = 0x0AC302 Mod7M870 = 0x0AC303 Mod8M870 = 0x0AC304 Mod9M870 = 0x0AC305 Mod10M870 = 0x0AC306
	IconM8702 = 0x0AC308 MaxSlotsM8702 = 0x0AC309 TypM8702 = 0x0AC30E OffM8702 = 0x0AC30F RngM8702 = 0x0AC310
	BltM8702 = 0x0AC311 CurAmmoM8702 = 0x0AC312 OffPlusM8702 = 0x0AC316 RngPlusM8702 = 0x0AC318 BltPlusM8702 = 0x0AC31A
	CurSlotsM8702 = 0x0AC31C Mod1M8702 = 0x0AC31D Mod2M8702 = 0x0AC31E Mod3M8702 = 0x0AC31F Mod4M8702 = 0x0AC320
	Mod5M8702 = 0x0AC321 Mod6M8702 = 0x0AC322 Mod7M8702 = 0x0AC323 Mod8M8702 = 0x0AC324 Mod9M8702 = 0x0AC325 Mod10M8702 = 0x0AC326
	IconM500 = 0x0AC328 MaxSlotsM500 = 0x0AC329 TypM500 = 0x0AC32E OffM500 = 0x0AC32F RngM500 = 0x0AC330
	BltM500 = 0x0AC331 CurAmmoM500 = 0x0AC332 OffPlusM500 = 0x0AC336 RngPlusM500 = 0x0AC338 BltPlusM500 = 0x0AC33A
	CurSlotsM500 = 0x0AC33C Mod1M500 = 0x0AC33D Mod2M500 = 0x0AC33E Mod3M500 = 0x0AC33F Mod4M500 = 0x0AC340
	Mod5M500 = 0x0AC341 Mod6M500 = 0x0AC342 Mod7M500 = 0x0AC343 Mod8M500 = 0x0AC344 Mod9M500 = 0x0AC345 Mod10M500 = 0x0AC346
	IconM5002 = 0x0AC348 MaxSlotsM5002 = 0x0AC349 TypM5002 = 0x0AC34E OffM5002 = 0x0AC34F RngM5002 = 0x0AC350
	BltM5002 = 0x0AC351 CurAmmoM5002 = 0x0AC352 OffPlusM5002 = 0x0AC356 RngPlusM5002 = 0x0AC358 BltPlusM5002 = 0x0AC35A
	CurSlotsM5002 = 0x0AC35C Mod1M5002 = 0x0AC35D Mod2M5002 = 0x0AC35E Mod3M5002 = 0x0AC35F Mod4M5002 = 0x0AC360
	Mod5M5002 = 0x0AC361 Mod6M5002 = 0x0AC362 Mod7M5002 = 0x0AC363 Mod8M5002 = 0x0AC364 Mod9M5002 = 0x0AC365 Mod10M5002 = 0x0AC366
	IconMaverick = 0x0AC368 MaxSlotsMaverick = 0x0AC369 TypMaverick = 0x0AC36E OffMaverick = 0x0AC36F RngMaverick = 0x0AC370
	BltMaverick = 0x0AC371 CurAmmoMaverick = 0x0AC372 OffPlusMaverick = 0x0AC376 RngPlusMaverick = 0x0AC378 BltPlusMaverick = 0x0AC37A
	CurSlotsMaverick = 0x0AC37C Mod1Maverick = 0x0AC37D Mod2Maverick = 0x0AC37E Mod3Maverick = 0x0AC37F Mod4Maverick = 0x0AC380
	Mod5Maverick = 0x0AC381 Mod6Maverick = 0x0AC382 Mod7Maverick = 0x0AC383 Mod8Maverick = 0x0AC384 Mod9Maverick = 0x0AC385 Mod10Maverick = 0x0AC386
	IconS12 = 0x0AC388 MaxSlotsS12 = 0x0AC389 TypS12 = 0x0AC38E OffS12 = 0x0AC38F RngS12 = 0x0AC390
	BltS12 = 0x0AC391 CurAmmoS12 = 0x0AC392 OffPlusS12 = 0x0AC396 RngPlusS12 = 0x0AC398 BltPlusS12 = 0x0AC39A
	CurSlotsS12 = 0x0AC39C Mod1S12 = 0x0AC39D Mod2S12 = 0x0AC39E Mod3S12 = 0x0AC39F Mod4S12 = 0x0AC3A0
	Mod5S12 = 0x0AC3A1 Mod6S12 = 0x0AC3A2 Mod7S12 = 0x0AC3A3 Mod8S12 = 0x0AC3A4 Mod9S12 = 0x0AC3A5 Mod10S12 = 0x0AC3A6
	IconM10B = 0x0AC3A8 MaxSlotsM10B = 0x0AC3A9 TypM10B = 0x0AC3AE OffM10B = 0x0AC3AF RngM10B = 0x0AC3B0
	BltM10B = 0x0AC3B1 CurAmmoM10B = 0x0AC3B2 OffPlusM10B = 0x0AC3B6 RngPlusM10B = 0x0AC3B8 BltPlusM10B = 0x0AC3BA
	CurSlotsM10B = 0x0AC3BC Mod1M10B = 0x0AC3BD Mod2M10B = 0x0AC3BE Mod3M10B = 0x0AC3BF Mod4M10B = 0x0AC3C0
	Mod5M10B = 0x0AC3C1 Mod6M10B = 0x0AC3C2 Mod7M10B = 0x0AC3C3 Mod8M10B = 0x0AC3C4 Mod9M10B = 0x0AC3C5 Mod10M10B = 0x0AC3C6
	IconM11 = 0x0AC3C8 MaxSlotsM11 = 0x0AC3C9 TypM11 = 0x0AC3CE OffM11 = 0x0AC3CF RngM11 = 0x0AC3D0
	BltM11 = 0x0AC3D1 CurAmmoM11 = 0x0AC3D2 OffPlusM11 = 0x0AC3D6 RngPlusM11 = 0x0AC3D8 BltPlusM11 = 0x0AC3DA
	CurSlotsM11 = 0x0AC3DC Mod1M11 = 0x0AC3DD Mod2M11 = 0x0AC3DE Mod3M11 = 0x0AC3DF Mod4M11 = 0x0AC3E0
	Mod5M11 = 0x0AC3E1 Mod6M11 = 0x0AC3E2 Mod7M11 = 0x0AC3E3 Mod8M11 = 0x0AC3E4 Mod9M11 = 0x0AC3E5 Mod10M11 = 0x0AC3E6
	IconM10 = 0x0AC3E8 MaxSlotsM10 = 0x0AC3E9 TypM10 = 0x0AC3EE OffM10 = 0x0AC3EF RngM10 = 0x0AC3F0
	BltM10 = 0x0AC3F1 CurAmmoM10 = 0x0AC3F2 OffPlusM10 = 0x0AC3F6 RngPlusM10 = 0x0AC3F8 BltPlusM10 = 0x0AC3FA
	CurSlotsM10 = 0x0AC3FC Mod1M10 = 0x0AC3FD Mod2M10 = 0x0AC3FE Mod3M10 = 0x0AC3FF Mod4M10 = 0x0AC400
	Mod5M10 = 0x0AC401 Mod6M10 = 0x0AC402 Mod7M10 = 0x0AC403 Mod8M10 = 0x0AC404 Mod9M10 = 0x0AC405 Mod10M10 = 0x0AC406
	IconMP5K = 0x0AC408 MaxSlotsMP5K = 0x0AC409 TypMP5K = 0x0AC40E OffMP5K = 0x0AC40F RngMP5K = 0x0AC410
	BltMP5K = 0x0AC411 CurAmmoMP5K = 0x0AC412 OffPlusMP5K = 0x0AC416 RngPlusMP5K = 0x0AC418 BltPlusMP5K = 0x0AC41A
	CurSlotsMP5K = 0x0AC41C Mod1MP5K = 0x0AC41D Mod2MP5K = 0x0AC41E Mod3MP5K = 0x0AC41F Mod4MP5K = 0x0AC420
	Mod5MP5K = 0x0AC421 Mod6MP5K = 0x0AC422 Mod7MP5K = 0x0AC423 Mod8MP5K = 0x0AC424 Mod9MP5K = 0x0AC425 Mod10MP5K = 0x0AC426
	IconMP5PDW = 0x0AC428 MaxSlotsMP5PDW = 0x0AC429 TypMP5PDW = 0x0AC42E OffMP5PDW = 0x0AC42F RngMP5PDW = 0x0AC430
	BltMP5PDW = 0x0AC431 CurAmmoMP5PDW = 0x0AC432 OffPlusMP5PDW = 0x0AC436 RngPlusMP5PDW = 0x0AC438 BltPlusMP5PDW = 0x0AC43A
	CurSlotsMP5PDW = 0x0AC43C Mod1MP5PDW = 0x0AC43D Mod2MP5PDW = 0x0AC43E Mod3MP5PDW = 0x0AC43F Mod4MP5PDW = 0x0AC440
	Mod5MP5PDW = 0x0AC441 Mod6MP5PDW = 0x0AC442 Mod7MP5PDW = 0x0AC443 Mod8MP5PDW = 0x0AC444 Mod9MP5PDW = 0x0AC445 Mod10MP5PDW = 0x0AC446
	IconMP5A5 = 0x0AC448 MaxSlotsMP5A5 = 0x0AC449 TypMP5A5 = 0x0AC44E OffMP5A5 = 0x0AC44F RngMP5A5 = 0x0AC450
	BltMP5A5 = 0x0AC451 CurAmmoMP5A5 = 0x0AC452 OffPlusMP5A5 = 0x0AC456 RngPlusMP5A5 = 0x0AC458 BltPlusMP5A5 = 0x0AC45A
	CurSlotsMP5A5 = 0x0AC45C Mod1MP5A5 = 0x0AC45D Mod2MP5A5 = 0x0AC45E Mod3MP5A5 = 0x0AC45F Mod4MP5A5 = 0x0AC460
	Mod5MP5A5 = 0x0AC461 Mod6MP5A5 = 0x0AC462 Mod7MP5A5 = 0x0AC463 Mod8MP5A5 = 0x0AC464 Mod9MP5A5 = 0x0AC465 Mod10MP5A5 = 0x0AC466
	IconMP5SD6 = 0x0AC468 MaxSlotsMP5SD6 = 0x0AC469 TypMP5SD6 = 0x0AC46E OffMP5SD6 = 0x0AC46F RngMP5SD6 = 0x0AC470
	BltMP5SD6 = 0x0AC471 CurAmmoMP5SD6 = 0x0AC472 OffPlusMP5SD6 = 0x0AC476 RngPlusMP5SD6 = 0x0AC478 BltPlusMP5SD6 = 0x0AC47A
	CurSlotsMP5SD6 = 0x0AC47C Mod1MP5SD6 = 0x0AC47D Mod2MP5SD6 = 0x0AC47E Mod3MP5SD6 = 0x0AC47F Mod4MP5SD6 = 0x0AC480
	Mod5MP5SD6 = 0x0AC481 Mod6MP5SD6 = 0x0AC482 Mod7MP5SD6 = 0x0AC483 Mod8MP5SD6 = 0x0AC484 Mod9MP5SD6 = 0x0AC485 Mod10MP5SD6 = 0x0AC486
	IconMicroUZ = 0x0AC488 MaxSlotsMicroUZ = 0x0AC489 TypMicroUZ = 0x0AC48E OffMicroUZ = 0x0AC48F RngMicroUZ = 0x0AC490
	BltMicroUZ = 0x0AC491 CurAmmoMicroUZ = 0x0AC492 OffPlusMicroUZ = 0x0AC496 RngPlusMicroUZ = 0x0AC498 BltPlusMicroUZ = 0x0AC49A
	CurSlotsMicroUZ = 0x0AC49C Mod1MicroUZ = 0x0AC49D Mod2MicroUZ = 0x0AC49E Mod3MicroUZ = 0x0AC49F Mod4MicroUZ = 0x0AC4A0
	Mod5MicroUZ = 0x0AC4A1 Mod6MicroUZ = 0x0AC4A2 Mod7MicroUZ = 0x0AC4A3 Mod8MicroUZ = 0x0AC4A4 Mod9MicroUZ = 0x0AC4A5 Mod10MicroUZ = 0x0AC4A6
	IconMiniUZ = 0x0AC4A8 MaxSlotsMiniUZ = 0x0AC4A9 TypMiniUZ = 0x0AC4AE OffMiniUZ = 0x0AC4AF RngMiniUZ = 0x0AC4B0
	BltMiniUZ = 0x0AC4B1 CurAmmoMiniUZ = 0x0AC4B2 OffPlusMiniUZ = 0x0AC4B6 RngPlusMiniUZ = 0x0AC4B8 BltPlusMiniUZ = 0x0AC4BA
	CurSlotsMiniUZ = 0x0AC4BC Mod1MiniUZ = 0x0AC4BD Mod2MiniUZ = 0x0AC4BE Mod3MiniUZ = 0x0AC4BF Mod4MiniUZ = 0x0AC4C0
	Mod5MiniUZ = 0x0AC4C1 Mod6MiniUZ = 0x0AC4C2 Mod7MiniUZ = 0x0AC4C3 Mod8MiniUZ = 0x0AC4C4 Mod9MiniUZ = 0x0AC4C5 Mod10MiniUZ = 0x0AC4C6
	IconFullUZ = 0x0AC4C8 MaxSlotsFullUZ = 0x0AC4C9 TypFullUZ = 0x0AC4CE OffFullUZ = 0x0AC4CF RngFullUZ = 0x0AC4D0
	BltFullUZ = 0x0AC4D1 CurAmmoFullUZ = 0x0AC4D2 OffPlusFullUZ = 0x0AC4D6 RngPlusFullUZ = 0x0AC4D8 BltPlusFullUZ = 0x0AC4DA
	CurSlotsFullUZ = 0x0AC4DC Mod1FullUZ = 0x0AC4DD Mod2FullUZ = 0x0AC4DE Mod3FullUZ = 0x0AC4DF Mod4FullUZ = 0x0AC4E0
	Mod5FullUZ = 0x0AC4E1 Mod6FullUZ = 0x0AC4E2 Mod7FullUZ = 0x0AC4E3 Mod8FullUZ = 0x0AC4E4 Mod9FullUZ = 0x0AC4E5 Mod10FullUZ = 0x0AC4E6
	IconP90 = 0x0AC4E8 MaxSlotsP90 = 0x0AC4E9 TypP90 = 0x0AC4EE OffP90 = 0x0AC4EF RngP90 = 0x0AC4F0
	BltP90 = 0x0AC4F1 CurAmmoP90 = 0x0AC4F2 OffPlusP90 = 0x0AC4F6 RngPlusP90 = 0x0AC4F8 BltPlusP90 = 0x0AC4FA
	CurSlotsP90 = 0x0AC4FC Mod1P90 = 0x0AC4FD Mod2P90 = 0x0AC4FE Mod3P90 = 0x0AC4FF Mod4P90 = 0x0AC500
	Mod5P90 = 0x0AC501 Mod6P90 = 0x0AC502 Mod7P90 = 0x0AC503 Mod8P90 = 0x0AC504 Mod9P90 = 0x0AC505 Mod10P90 = 0x0AC506
	IconM16A1 = 0x0AC508 MaxSlotsM16A1 = 0x0AC509 TypM16A1 = 0x0AC50E OffM16A1 = 0x0AC50F RngM16A1 = 0x0AC510
	BltM16A1 = 0x0AC511 CurAmmoM16A1 = 0x0AC512 OffPlusM16A1 = 0x0AC516 RngPlusM16A1 = 0x0AC518 BltPlusM16A1 = 0x0AC51A
	CurSlotsM16A1 = 0x0AC51C Mod1M16A1 = 0x0AC51D Mod2M16A1 = 0x0AC51E Mod3M16A1 = 0x0AC51F Mod4M16A1 = 0x0AC520
	Mod5M16A1 = 0x0AC521 Mod6M16A1 = 0x0AC522 Mod7M16A1 = 0x0AC523 Mod8M16A1 = 0x0AC524 Mod9M16A1 = 0x0AC525 Mod10M16A1 = 0x0AC526
	IconM16A2 = 0x0AC528 MaxSlotsM16A2 = 0x0AC529 TypM16A2 = 0x0AC52E OffM16A2 = 0x0AC52F RngM16A2 = 0x0AC530
	BltM16A2 = 0x0AC531 CurAmmoM16A2 = 0x0AC532 OffPlusM16A2 = 0x0AC536 RngPlusM16A2 = 0x0AC538 BltPlusM16A2 = 0x0AC53A
	CurSlotsM16A2 = 0x0AC53C Mod1M16A2 = 0x0AC53D Mod2M16A2 = 0x0AC53E Mod3M16A2 = 0x0AC53F Mod4M16A2 = 0x0AC540
	Mod5M16A2 = 0x0AC541 Mod6M16A2 = 0x0AC542 Mod7M16A2 = 0x0AC543 Mod8M16A2 = 0x0AC544 Mod9M16A2 = 0x0AC545 Mod10M16A2 = 0x0AC546
	IconSG550 = 0x0AC548 MaxSlotsSG550 = 0x0AC549 TypSG550 = 0x0AC54E OffSG550 = 0x0AC54F RngSG550 = 0x0AC550
	BltSG550 = 0x0AC551 CurAmmoSG550 = 0x0AC552 OffPlusSG550 = 0x0AC556 RngPlusSG550 = 0x0AC558 BltPlusSG550 = 0x0AC55A
	CurSlotsSG550 = 0x0AC55C Mod1SG550 = 0x0AC55D Mod2SG550 = 0x0AC55E Mod3SG550 = 0x0AC55F Mod4SG550 = 0x0AC560
	Mod5SG550 = 0x0AC561 Mod6SG550 = 0x0AC562 Mod7SG550 = 0x0AC563 Mod8SG550 = 0x0AC564 Mod9SG550 = 0x0AC565 Mod10SG550 = 0x0AC566
	IconSAR = 0x0AC568 MaxSlotsSAR = 0x0AC569 TypSAR = 0x0AC56E OffSAR = 0x0AC56F RngSAR = 0x0AC570
	BltSAR = 0x0AC571 CurAmmoSAR = 0x0AC572 OffPlusSAR = 0x0AC576 RngPlusSAR = 0x0AC578 BltPlusSAR = 0x0AC57A
	CurSlotsSAR = 0x0AC57C Mod1SAR = 0x0AC57D Mod2SAR = 0x0AC57E Mod3SAR = 0x0AC57F Mod4SAR = 0x0AC580
	Mod5SAR = 0x0AC581 Mod6SAR = 0x0AC582 Mod7SAR = 0x0AC583 Mod8SAR = 0x0AC584 Mod9SAR = 0x0AC585 Mod10SAR = 0x0AC586
	IconG3A3 = 0x0AC588 MaxSlotsG3A3 = 0x0AC589 TypG3A3 = 0x0AC58E OffG3A3 = 0x0AC58F RngG3A3 = 0x0AC590
	BltG3A3 = 0x0AC591 CurAmmoG3A3 = 0x0AC592 OffPlusG3A3 = 0x0AC596 RngPlusG3A3 = 0x0AC598 BltPlusG3A3 = 0x0AC59A
	CurSlotsG3A3 = 0x0AC59C Mod1G3A3 = 0x0AC59D Mod2G3A3 = 0x0AC59E Mod3G3A3 = 0x0AC59F Mod4G3A3 = 0x0AC5A0
	Mod5G3A3 = 0x0AC5A1 Mod6G3A3 = 0x0AC5A2 Mod7G3A3 = 0x0AC5A3 Mod8G3A3 = 0x0AC5A4 Mod9G3A3 = 0x0AC5A5 Mod10G3A3 = 0x0AC5A6
	IconType64 = 0x0AC5A8 MaxSlotsType64 = 0x0AC5A9 TypType64 = 0x0AC5AE OffType64 = 0x0AC5AF RngType64 = 0x0AC5B0
	BltType64 = 0x0AC5B1 CurAmmoType64 = 0x0AC5B2 OffPlusType64 = 0x0AC5B6 RngPlusType64 = 0x0AC5B8 BltPlusType64 = 0x0AC5BA
	CurSlotsType64 = 0x0AC5BC Mod1Type64 = 0x0AC5BD Mod2Type64 = 0x0AC5BE Mod3Type64 = 0x0AC5BF Mod4Type64 = 0x0AC5C0
	Mod5Type64 = 0x0AC5C1 Mod6Type64 = 0x0AC5C2 Mod7Type64 = 0x0AC5C3 Mod8Type64 = 0x0AC5C4 Mod9Type64 = 0x0AC5C5 Mod10Type64 = 0x0AC5C6
	IconXM177E2 = 0x0AC5C8 MaxSlotsXM177E2 = 0x0AC5C9 TypXM177E2 = 0x0AC5CE OffXM177E2 = 0x0AC5CF RngXM177E2 = 0x0AC5D0
	BltXM177E2 = 0x0AC5D1 CurAmmoXM177E2 = 0x0AC5D2 OffPlusXM177E2 = 0x0AC5D6 RngPlusXM177E2 = 0x0AC5D8 BltPlusXM177E2 = 0x0AC5DA
	CurSlotsXM177E2 = 0x0AC5DC Mod1XM177E2 = 0x0AC5DD Mod2XM177E2 = 0x0AC5DE Mod3XM177E2 = 0x0AC5DF Mod4XM177E2 = 0x0AC5E0
	Mod5XM177E2 = 0x0AC5E1 Mod6XM177E2 = 0x0AC5E2 Mod7XM177E2 = 0x0AC5E3 Mod8XM177E2 = 0x0AC5E4 Mod9XM177E2 = 0x0AC5E5 Mod10XM177E2 = 0x0AC5E6
	IconPSG1 = 0x0AC5E8 MaxSlotsPSG1 = 0x0AC5E9 TypPSG1 = 0x0AC5EE OffPSG1 = 0x0AC5EF RngPSG1 = 0x0AC5F0
	BltPSG1 = 0x0AC5F1 CurAmmoPSG1 = 0x0AC5F2 OffPlusPSG1 = 0x0AC5F6 RngPlusPSG1 = 0x0AC5F8 BltPlusPSG1 = 0x0AC5FA
	CurSlotsPSG1 = 0x0AC5FC Mod1PSG1 = 0x0AC5FD Mod2PSG1 = 0x0AC5FE Mod3PSG1 = 0x0AC5FF Mod4PSG1 = 0x0AC600
	Mod5PSG1 = 0x0AC601 Mod6PSG1 = 0x0AC602 Mod7PSG1 = 0x0AC603 Mod8PSG1 = 0x0AC604 Mod9PSG1 = 0x0AC605 Mod10PSG1 = 0x0AC606
	IconFAMAS = 0x0AC608 MaxSlotsFAMAS = 0x0AC609 TypFAMAS = 0x0AC60E OffFAMAS = 0x0AC60F RngFAMAS = 0x0AC610
	BltFAMAS = 0x0AC611 CurAmmoFAMAS = 0x0AC612 OffPlusFAMAS = 0x0AC616 RngPlusFAMAS = 0x0AC618 BltPlusFAMAS = 0x0AC61A
	CurSlotsFAMAS = 0x0AC61C Mod1FAMAS = 0x0AC61D Mod2FAMAS = 0x0AC61E Mod3FAMAS = 0x0AC61F Mod4FAMAS = 0x0AC620
	Mod5FAMAS = 0x0AC621 Mod6FAMAS = 0x0AC622 Mod7FAMAS = 0x0AC623 Mod8FAMAS = 0x0AC624 Mod9FAMAS = 0x0AC625 Mod10FAMAS = 0x0AC626
	IconMAG = 0x0AC628 MaxSlotsMAG = 0x0AC629 TypMAG = 0x0AC62E OffMAG = 0x0AC62F RngMAG = 0x0AC630
	BltMAG = 0x0AC631 CurAmmoMAG = 0x0AC632 OffPlusMAG = 0x0AC636 RngPlusMAG = 0x0AC638 BltPlusMAG = 0x0AC63A
	CurSlotsMAG = 0x0AC63C Mod1MAG = 0x0AC63D Mod2MAG = 0x0AC63E Mod3MAG = 0x0AC63F Mod4MAG = 0x0AC640
	Mod5MAG = 0x0AC641 Mod6MAG = 0x0AC642 Mod7MAG = 0x0AC643 Mod8MAG = 0x0AC644 Mod9MAG = 0x0AC645 Mod10MAG = 0x0AC646
	IconM203 = 0x0AC648 MaxSlotsM203 = 0x0AC649 TypM203 = 0x0AC64E OffM203 = 0x0AC64F RngM203 = 0x0AC650
	BltM203 = 0x0AC651 CurAmmoM203 = 0x0AC652 OffPlusM203 = 0x0AC656 RngPlusM203 = 0x0AC658 BltPlusM203 = 0x0AC65A
	CurSlotsM203 = 0x0AC65C Mod1M203 = 0x0AC65D Mod2M203 = 0x0AC65E Mod3M203 = 0x0AC65F Mod4M203 = 0x0AC660
	Mod5M203 = 0x0AC661 Mod6M203 = 0x0AC662 Mod7M203 = 0x0AC663 Mod8M203 = 0x0AC664 Mod9M203 = 0x0AC665 Mod10M203 = 0x0AC666
	IconM2032 = 0x0AC668 MaxSlotsM2032 = 0x0AC669 TypM2032 = 0x0AC66E OffM2032 = 0x0AC66F RngM2032 = 0x0AC670
	BltM2032 = 0x0AC671 CurAmmoM2032 = 0x0AC672 OffPlusM2032 = 0x0AC676 RngPlusM2032 = 0x0AC678 BltPlusM2032 = 0x0AC67A
	CurSlotsM2032 = 0x0AC67C Mod1M2032 = 0x0AC67D Mod2M2032 = 0x0AC67E Mod3M2032 = 0x0AC67F Mod4M2032 = 0x0AC680
	Mod5M2032 = 0x0AC681 Mod6M2032 = 0x0AC682 Mod7M2032 = 0x0AC683 Mod8M2032 = 0x0AC684 Mod9M2032 = 0x0AC685 Mod10M2032 = 0x0AC686
	IconM2033 = 0x0AC688 MaxSlotsM2033 = 0x0AC689 TypM2033 = 0x0AC68E OffM2033 = 0x0AC68F RngM2033 = 0x0AC690
	BltM2033 = 0x0AC691 CurAmmoM2033 = 0x0AC692 OffPlusM2033 = 0x0AC696 RngPlusM2033 = 0x0AC698 BltPlusM2033 = 0x0AC69A
	CurSlotsM2033 = 0x0AC69C Mod1M2033 = 0x0AC69D Mod2M2033 = 0x0AC69E Mod3M2033 = 0x0AC69F Mod4M2033 = 0x0AC6A0
	Mod5M2033 = 0x0AC6A1 Mod6M2033 = 0x0AC6A2 Mod7M2033 = 0x0AC6A3 Mod8M2033 = 0x0AC6A4 Mod9M2033 = 0x0AC6A5 Mod10M2033 = 0x0AC6A6
	IconM2034 = 0x0AC6A8 MaxSlotsM2034 = 0x0AC6A9 TypM2034 = 0x0AC6AE OffM2034 = 0x0AC6AF RngM2034 = 0x0AC6B0
	BltM2034 = 0x0AC6B1 CurAmmoM2034 = 0x0AC6B2 OffPlusM2034 = 0x0AC6B6 RngPlusM2034 = 0x0AC6B8 BltPlusM2034 = 0x0AC6BA
	CurSlotsM2034 = 0x0AC6BC Mod1M2034 = 0x0AC6BD Mod2M2034 = 0x0AC6BE Mod3M2034 = 0x0AC6BF Mod4M2034 = 0x0AC6C0
	Mod5M2034 = 0x0AC6C1 Mod6M2034 = 0x0AC6C2 Mod7M2034 = 0x0AC6C3 Mod8M2034 = 0x0AC6C4 Mod9M2034 = 0x0AC6C5 Mod10M2034 = 0x0AC6C6
	IconM2035 = 0x0AC6C8 MaxSlotsM2035 = 0x0AC6C9 TypM2035 = 0x0AC6CE OffM2035 = 0x0AC6CF RngM2035 = 0x0AC6D0
	BltM2035 = 0x0AC6D1 CurAmmoM2035 = 0x0AC6D2 OffPlusM2035 = 0x0AC6D6 RngPlusM2035 = 0x0AC6D8 BltPlusM2035 = 0x0AC6DA
	CurSlotsM2035 = 0x0AC6DC Mod1M2035 = 0x0AC6DD Mod2M2035 = 0x0AC6DE Mod3M2035 = 0x0AC6DF Mod4M2035 = 0x0AC6E0
	Mod5M2035 = 0x0AC6E1 Mod6M2035 = 0x0AC6E2 Mod7M2035 = 0x0AC6E3 Mod8M2035 = 0x0AC6E4 Mod9M2035 = 0x0AC6E5 Mod10M2035 = 0x0AC6E6
	IconM2036 = 0x0AC6E8 MaxSlotsM2036 = 0x0AC6E9 TypM2036 = 0x0AC6EE OffM2036 = 0x0AC6EF RngM2036 = 0x0AC6F0
	BltM2036 = 0x0AC6F1 CurAmmoM2036 = 0x0AC6F2 OffPlusM2036 = 0x0AC6F6 RngPlusM2036 = 0x0AC6F8 BltPlusM2036 = 0x0AC6FA
	CurSlotsM2036 = 0x0AC6FC Mod1M2036 = 0x0AC6FD Mod2M2036 = 0x0AC6FE Mod3M2036 = 0x0AC6FF Mod4M2036 = 0x0AC700
	Mod5M2036 = 0x0AC701 Mod6M2036 = 0x0AC702 Mod7M2036 = 0x0AC703 Mod8M2036 = 0x0AC704 Mod9M2036 = 0x0AC705 Mod10M2036 = 0x0AC706
	IconM79 = 0x0AC708 MaxSlotsM79 = 0x0AC709 TypM79 = 0x0AC70E OffM79 = 0x0AC70F RngM79 = 0x0AC710
	BltM79 = 0x0AC711 CurAmmoM79 = 0x0AC712 OffPlusM79 = 0x0AC716 RngPlusM79 = 0x0AC718 BltPlusM79 = 0x0AC71A
	CurSlotsM79 = 0x0AC71C Mod1M79 = 0x0AC71D Mod2M79 = 0x0AC71E Mod3M79 = 0x0AC71F Mod4M79 = 0x0AC720
	Mod5M79 = 0x0AC721 Mod6M79 = 0x0AC722 Mod7M79 = 0x0AC723 Mod8M79 = 0x0AC724 Mod9M79 = 0x0AC725 Mod10M79 = 0x0AC726
	IconM792 = 0x0AC728 MaxSlotsM792 = 0x0AC729 TypM792 = 0x0AC72E OffM792 = 0x0AC72F RngM792 = 0x0AC730
	BltM792 = 0x0AC731 CurAmmoM792 = 0x0AC732 OffPlusM792 = 0x0AC736 RngPlusM792 = 0x0AC738 BltPlusM792 = 0x0AC73A
	CurSlotsM792 = 0x0AC73C Mod1M792 = 0x0AC73D Mod2M792 = 0x0AC73E Mod3M792 = 0x0AC73F Mod4M792 = 0x0AC740
	Mod5M792 = 0x0AC741 Mod6M792 = 0x0AC742 Mod7M792 = 0x0AC743 Mod8M792 = 0x0AC744 Mod9M792 = 0x0AC745 Mod10M792 = 0x0AC746
	IconM793 = 0x0AC748 MaxSlotsM793 = 0x0AC749 TypM793 = 0x0AC74E OffM793 = 0x0AC74F RngM793 = 0x0AC750
	BltM793 = 0x0AC751 CurAmmoM793 = 0x0AC752 OffPlusM793 = 0x0AC756 RngPlusM793 = 0x0AC758 BltPlusM793 = 0x0AC75A
	CurSlotsM793 = 0x0AC75C Mod1M793 = 0x0AC75D Mod2M793 = 0x0AC75E Mod3M793 = 0x0AC75F Mod4M793 = 0x0AC760
	Mod5M793 = 0x0AC761 Mod6M793 = 0x0AC762 Mod7M793 = 0x0AC763 Mod8M793 = 0x0AC764 Mod9M793 = 0x0AC765 Mod10M793 = 0x0AC766
	IconM794 = 0x0AC768 MaxSlotsM794 = 0x0AC769 TypM794 = 0x0AC76E OffM794 = 0x0AC76F RngM794 = 0x0AC770
	BltM794 = 0x0AC771 CurAmmoM794 = 0x0AC772 OffPlusM794 = 0x0AC776 RngPlusM794 = 0x0AC778 BltPlusM794 = 0x0AC77A
	CurSlotsM794 = 0x0AC77C Mod1M794 = 0x0AC77D Mod2M794 = 0x0AC77E Mod3M794 = 0x0AC77F Mod4M794 = 0x0AC780
	Mod5M794 = 0x0AC781 Mod6M794 = 0x0AC782 Mod7M794 = 0x0AC783 Mod8M794 = 0x0AC784 Mod9M794 = 0x0AC785 Mod10M794 = 0x0AC786
	IconM795 = 0x0AC788 MaxSlotsM795 = 0x0AC789 TypM795 = 0x0AC78E OffM795 = 0x0AC78F RngM795 = 0x0AC790
	BltM795 = 0x0AC791 CurAmmoM795 = 0x0AC792 OffPlusM795 = 0x0AC796 RngPlusM795 = 0x0AC798 BltPlusM795 = 0x0AC79A
	CurSlotsM795 = 0x0AC79C Mod1M795 = 0x0AC79D Mod2M795 = 0x0AC79E Mod3M795 = 0x0AC79F Mod4M795 = 0x0AC7A0
	Mod5M795 = 0x0AC7A1 Mod6M795 = 0x0AC7A2 Mod7M795 = 0x0AC7A3 Mod8M795 = 0x0AC7A4 Mod9M795 = 0x0AC7A5 Mod10M795 = 0x0AC7A6
	IconM796 = 0x0AC7A8 MaxSlotsM796 = 0x0AC7A9 TypM796 = 0x0AC7AE OffM796 = 0x0AC7AF RngM796 = 0x0AC7B0
	BltM796 = 0x0AC7B1 CurAmmoM796 = 0x0AC7B2 OffPlusM796 = 0x0AC7B6 RngPlusM796 = 0x0AC7B8 BltPlusM796 = 0x0AC7BA
	CurSlotsM796 = 0x0AC7BC Mod1M796 = 0x0AC7BD Mod2M796 = 0x0AC7BE Mod3M796 = 0x0AC7BF Mod4M796 = 0x0AC7C0
	Mod5M796 = 0x0AC7C1 Mod6M796 = 0x0AC7C2 Mod7M796 = 0x0AC7C3 Mod8M796 = 0x0AC7C4 Mod9M796 = 0x0AC7C5 Mod10M796 = 0x0AC7C6
	IconHK40 = 0x0AC7C8 MaxSlotsHK40 = 0x0AC7C9 TypHK40 = 0x0AC7CE OffHK40 = 0x0AC7CF RngHK40 = 0x0AC7D0
	BltHK40 = 0x0AC7D1 CurAmmoHK40 = 0x0AC7D2 OffPlusHK40 = 0x0AC7D6 RngPlusHK40 = 0x0AC7D8 BltPlusHK40 = 0x0AC7DA
	CurSlotsHK40 = 0x0AC7DC Mod1HK40 = 0x0AC7DD Mod2HK40 = 0x0AC7DE Mod3HK40 = 0x0AC7DF Mod4HK40 = 0x0AC7E0
	Mod5HK40 = 0x0AC7E1 Mod6HK40 = 0x0AC7E2 Mod7HK40 = 0x0AC7E3 Mod8HK40 = 0x0AC7E4 Mod9HK40 = 0x0AC7E5 Mod10HK40 = 0x0AC7E6
	IconAT4 = 0x0AC7E8 MaxSlotsAT4 = 0x0AC7E9 TypAT4 = 0x0AC7EE OffAT4 = 0x0AC7EF RngAT4 = 0x0AC7F0
	BltAT4 = 0x0AC7F1 CurAmmoAT4 = 0x0AC7F2 OffPlusAT4 = 0x0AC7F6 RngPlusAT4 = 0x0AC7F8 BltPlusAT4 = 0x0AC7FA
	CurSlotsAT4 = 0x0AC7FC Mod1AT4 = 0x0AC7FD Mod2AT4 = 0x0AC7FE Mod3AT4 = 0x0AC7FF Mod4AT4 = 0x0AC800
	Mod5AT4 = 0x0AC801 Mod6AT4 = 0x0AC802 Mod7AT4 = 0x0AC803 Mod8AT4 = 0x0AC804 Mod9AT4 = 0x0AC805 Mod10AT4 = 0x0AC806
	IconAT41 = 0x0AC808 MaxSlotsAT41 = 0x0AC809 TypAT41 = 0x0AC80E OffAT41 = 0x0AC80F RngAT41 = 0x0AC810
	BltAT41 = 0x0AC811 CurAmmoAT41 = 0x0AC812 OffPlusAT41 = 0x0AC816 RngPlusAT41 = 0x0AC818 BltPlusAT41 = 0x0AC81A
	CurSlotsAT41 = 0x0AC81C Mod1AT41 = 0x0AC81D Mod2AT41 = 0x0AC81E Mod3AT41 = 0x0AC81F Mod4AT41 = 0x0AC820
	Mod5AT41 = 0x0AC821 Mod6AT41 = 0x0AC822 Mod7AT41 = 0x0AC823 Mod8AT41 = 0x0AC824 Mod9AT41 = 0x0AC825 Mod10AT41 = 0x0AC826
	IconLAW80 = 0x0AC828 MaxSlotsLAW80 = 0x0AC829 TypLAW80 = 0x0AC82E OffLAW80 = 0x0AC82F RngLAW80 = 0x0AC830
	BltLAW80 = 0x0AC831 CurAmmoLAW80 = 0x0AC832 OffPlusLAW80 = 0x0AC836 RngPlusLAW80 = 0x0AC838 BltPlusLAW80 = 0x0AC83A
	CurSlotsLAW80 = 0x0AC83C Mod1LAW80 = 0x0AC83D Mod2LAW80 = 0x0AC83E Mod3LAW80 = 0x0AC83F Mod4LAW80 = 0x0AC840
	Mod5LAW80 = 0x0AC841 Mod6LAW80 = 0x0AC842 Mod7LAW80 = 0x0AC843 Mod8LAW80 = 0x0AC844 Mod9LAW80 = 0x0AC845 Mod10LAW80 = 0x0AC846
	IconM92F = 0x0AC868 MaxSlotsM92F = 0x0AC869 TypM92F = 0x0AC86E OffM92F = 0x0AC86F RngM92F = 0x0AC870
	BltM92F = 0x0AC871 CurAmmoM92F = 0x0AC872 OffPlusM92F = 0x0AC876 RngPlusM92F = 0x0AC878 BltPlusM92F = 0x0AC87A
	CurSlotsM92F = 0x0AC87C Mod1M92F = 0x0AC87D Mod2M92F = 0x0AC87E Mod3M92F = 0x0AC87F Mod4M92F = 0x0AC880
	Mod5M92F = 0x0AC881 Mod6M92F = 0x0AC882 Mod7M92F = 0x0AC883 Mod8M92F = 0x0AC884 Mod9M92F = 0x0AC885 Mod10M92F = 0x0AC886


--Armor--
	MaxSlotsDress = 0x0AC889 DefDress = 0x0AC88F PEnDress = 0x0AC890 CrtDress = 0x0AC891 DefPlusDress = 0x0AC896 PEnPlusDress = 0x0AC898
	CrtPlusDress = 0x0AC89A CurSlotsDress = 0x0AC89C Mod1Dress = 0x0AC89D Mod2Dress = 0x0AC89E Mod3Dress = 0x0AC89F Mod4Dress = 0x0AC8A0
	Mod5Dress = 0x0AC8A1 Mod6Dress = 0x0AC8A2 Mod7Dress = 0x0AC8A3 Mod8Dress = 0x0AC8A4 Mod9Dress = 0x0AC8A5 Mod10Dress = 0x0AC8A6
	MaxSlotsNVest = 0x0AC8A9 DefNVest = 0x0AC8AF PEnNVest = 0x0AC8B0 CrtNVest = 0x0AC8B1 DefPlusNVest = 0x0AC8B6 PEnPlusNVest = 0x0AC8B8
	CrtPlusNVest = 0x0AC8BA CurSlotsNVest = 0x0AC8BC Mod1NVest = 0x0AC8BD Mod2NVest = 0x0AC8BE Mod3NVest = 0x0AC8BF Mod4NVest = 0x0AC8C0
	Mod5NVest = 0x0AC8C1 Mod6NVest = 0x0AC8C2 Mod7NVest = 0x0AC8C3 Mod8NVest = 0x0AC8C4 Mod9NVest = 0x0AC8C5 Mod10NVest = 0x0AC8C6
	MaxSlotsNProtector = 0x0AC8C9 DefNProtector = 0x0AC8CF PEnNProtector = 0x0AC8D0 CrtNProtector = 0x0AC8D1 DefPlusNProtector = 0x0AC8D6 PEnPlusNProtector = 0x0AC8D8
	CrtPlusNProtector = 0x0AC8DA CurSlotsNProtector = 0x0AC8DC Mod1NProtector = 0x0AC8DD Mod2NProtector = 0x0AC8DE Mod3NProtector = 0x0AC8DF Mod4NProtector = 0x0AC8E0
	Mod5NProtector = 0x0AC8E1 Mod6NProtector = 0x0AC8E2 Mod7NProtector = 0x0AC8E3 Mod8NProtector = 0x0AC8E4 Mod9NProtector = 0x0AC8E5 Mod10NProtector = 0x0AC8E6
	MaxSlotsNJacket = 0x0AC8E9 DefNJacket = 0x0AC8EF PEnNJacket = 0x0AC8F0 CrtNJacket = 0x0AC8F1 DefPlusNJacket = 0x0AC8F6 PEnPlusNJacket = 0x0AC8F8
	CrtPlusNJacket = 0x0AC8FA CurSlotsNJacket = 0x0AC8FC Mod1NJacket = 0x0AC8FD Mod2NJacket = 0x0AC8FE Mod3NJacket = 0x0AC8FF Mod4NJacket = 0x0AC900
	Mod5NJacket = 0x0AC901 Mod6NJacket = 0x0AC902 Mod7NJacket = 0x0AC903 Mod8NJacket = 0x0AC904 Mod9NJacket = 0x0AC905 Mod10NJacket = 0x0AC906
	MaxSlotsNSuit = 0x0AC909 DefNSuit = 0x0AC90F PEnNSuit = 0x0AC910 CrtNSuit = 0x0AC911 DefPlusNSuit = 0x0AC916 PEnPlusNSuit = 0x0AC918
	CrtPlusNSuit = 0x0AC91A CurSlotsNSuit = 0x0AC91C Mod1NSuit = 0x0AC91D Mod2NSuit = 0x0AC91E Mod3NSuit = 0x0AC91F Mod4NSuit = 0x0AC920
	Mod5NSuit = 0x0AC921 Mod6NSuit = 0x0AC922 Mod7NSuit = 0x0AC923 Mod8NSuit = 0x0AC924 Mod9NSuit = 0x0AC925 Mod10NSuit = 0x0AC926
	MaxSlotsNArmor = 0x0AC929 DefNArmor = 0x0AC92F PEnNArmor = 0x0AC930 CrtNArmor = 0x0AC931 DefPlusNArmor = 0x0AC936 PEnPlusNArmor = 0x0AC938
	CrtPlusNArmor = 0x0AC93A CurSlotsNArmor = 0x0AC93C Mod1NArmor = 0x0AC93D Mod2NArmor = 0x0AC93E Mod3NArmor = 0x0AC93F Mod4NArmor = 0x0AC940
	Mod5NArmor = 0x0AC941 Mod6NArmor = 0x0AC942 Mod7NArmor = 0x0AC943 Mod8NArmor = 0x0AC944 Mod9NArmor = 0x0AC945 Mod10NArmor = 0x0AC946
	MaxSlotsKvVest1 = 0x0AC949 DefKvVest1 = 0x0AC94F PEnKvVest1 = 0x0AC950 CrtKvVest1 = 0x0AC951 DefPlusKvVest1 = 0x0AC956 PEnPlusKvVest1 = 0x0AC958
	CrtPlusKvVest1 = 0x0AC95A CurSlotsKvVest1 = 0x0AC95C Mod1KvVest1 = 0x0AC95D Mod2KvVest1 = 0x0AC95E Mod3KvVest1 = 0x0AC95F Mod4KvVest1 = 0x0AC960
	Mod5KvVest1 = 0x0AC961 Mod6KvVest1 = 0x0AC962 Mod7KvVest1 = 0x0AC963 Mod8KvVest1 = 0x0AC964 Mod9KvVest1 = 0x0AC965 Mod10KvVest1 = 0x0AC966
	MaxSlotsKvProtector = 0x0AC969 DefKvProtector = 0x0AC96F PEnKvProtector = 0x0AC970 CrtKvProtector = 0x0AC971 DefPlusKvProtector = 0x0AC976 PEnPlusKvProtector = 0x0AC978
	CrtPlusKvProtector = 0x0AC97A CurSlotsKvProtector = 0x0AC97C Mod1KvProtector = 0x0AC97D Mod2KvProtector = 0x0AC97E Mod3KvProtector = 0x0AC97F Mod4KvProtector = 0x0AC980
	Mod5KvProtector = 0x0AC981 Mod6KvProtector = 0x0AC982 Mod7KvProtector = 0x0AC983 Mod8KvProtector = 0x0AC984 Mod9KvProtector = 0x0AC985 Mod10KvProtector = 0x0AC986
	MaxSlotsKvJacket = 0x0AC989 DefKvJacket = 0x0AC98F PEnKvJacket = 0x0AC990 CrtKvJacket = 0x0AC991 DefPlusKvJacket = 0x0AC996 PEnPlusKvJacket = 0x0AC998
	CrtPlusKvJacket = 0x0AC99A CurSlotsKvJacket = 0x0AC99C Mod1KvJacket = 0x0AC99D Mod2KvJacket = 0x0AC99E Mod3KvJacket = 0x0AC99F Mod4KvJacket = 0x0AC9A0
	Mod5KvJacket = 0x0AC9A1 Mod6KvJacket = 0x0AC9A2 Mod7KvJacket = 0x0AC9A3 Mod8KvJacket = 0x0AC9A4 Mod9KvJacket = 0x0AC9A5 Mod10KvJacket = 0x0AC9A6
	MaxSlotsKvSuit1 = 0x0AC9A9 DefKvSuit1 = 0x0AC9AF PEnKvSuit1 = 0x0AC9B0 CrtKvSuit1 = 0x0AC9B1 DefPlusKvSuit1 = 0x0AC9B6 PEnPlusKvSuit1 = 0x0AC9B8
	CrtPlusKvSuit1 = 0x0AC9BA CurSlotsKvSuit1 = 0x0AC9BC Mod1KvSuit1 = 0x0AC9BD Mod2KvSuit1 = 0x0AC9BE Mod3KvSuit1 = 0x0AC9BF Mod4KvSuit1 = 0x0AC9C0
	Mod5KvSuit1 = 0x0AC9C1 Mod6KvSuit1 = 0x0AC9C2 Mod7KvSuit1 = 0x0AC9C3 Mod8KvSuit1 = 0x0AC9C4 Mod9KvSuit1 = 0x0AC9C5 Mod10KvSuit1 = 0x0AC9C6
	MaxSlotsKvArmor1 = 0x0AC9C9 DefKvArmor1 = 0x0AC9CF PEnKvArmor1 = 0x0AC9D0 CrtKvArmor1 = 0x0AC9D1 DefPlusKvArmor1 = 0x0AC9D6 PEnPlusKvArmor1 = 0x0AC9D8
	CrtPlusKvArmor1 = 0x0AC9DA CurSlotsKvArmor1 = 0x0AC9DC Mod1KvArmor1 = 0x0AC9DD Mod2KvArmor1 = 0x0AC9DE Mod3KvArmor1 = 0x0AC9DF Mod4KvArmor1 = 0x0AC9E0
	Mod5KvArmor1 = 0x0AC9E1 Mod6KvArmor1 = 0x0AC9E2 Mod7KvArmor1 = 0x0AC9E3 Mod8KvArmor1 = 0x0AC9E4 Mod9KvArmor1 = 0x0AC9E5 Mod10KvArmor1 = 0x0AC9E6
	MaxSlotsSpVest1 = 0x0AC9E9 DefSpVest1 = 0x0AC9EF PEnSpVest1 = 0x0AC9F0 CrtSpVest1 = 0x0AC9F1 DefPlusSpVest1 = 0x0AC9F6 PEnPlusSpVest1 = 0x0AC9F8
	CrtPlusSpVest1 = 0x0AC9FA CurSlotsSpVest1 = 0x0AC9FC Mod1SpVest1 = 0x0AC9FD Mod2SpVest1 = 0x0AC9FE Mod3SpVest1 = 0x0AC9FF Mod4SpVest1 = 0x0ACA00
	Mod5SpVest1 = 0x0ACA01 Mod6SpVest1 = 0x0ACA02 Mod7SpVest1 = 0x0ACA03 Mod8SpVest1 = 0x0ACA04 Mod9SpVest1 = 0x0ACA05 Mod10SpVest1 = 0x0ACA06
	MaxSlotsSpVest2 = 0x0ACA09 DefSpVest2 = 0x0ACA0F PEnSpVest2 = 0x0ACA10 CrtSpVest2 = 0x0ACA11 DefPlusSpVest2 = 0x0ACA16 PEnPlusSpVest2 = 0x0ACA18
	CrtPlusSpVest2 = 0x0ACA1A CurSlotsSpVest2 = 0x0ACA1C Mod1SpVest2 = 0x0ACA1D Mod2SpVest2 = 0x0ACA1E Mod3SpVest2 = 0x0ACA1F Mod4SpVest2 = 0x0ACA20
	Mod5SpVest2 = 0x0ACA21 Mod6SpVest2 = 0x0ACA22 Mod7SpVest2 = 0x0ACA23 Mod8SpVest2 = 0x0ACA24 Mod9SpVest2 = 0x0ACA25 Mod10SpVest2 = 0x0ACA26
	MaxSlotsSpProtector = 0x0ACA29 DefSpProtector = 0x0ACA2F PEnSpProtector = 0x0ACA30 CrtSpProtector = 0x0ACA31 DefPlusSpProtector = 0x0ACA36 PEnPlusSpProtector = 0x0ACA38
	CrtPlusSpProtector = 0x0ACA3A CurSlotsSpProtector = 0x0ACA3C Mod1SpProtector = 0x0ACA3D Mod2SpProtector = 0x0ACA3E Mod3SpProtector = 0x0ACA3F Mod4SpProtector = 0x0ACA40
	Mod5SpProtector = 0x0ACA41 Mod6SpProtector = 0x0ACA42 Mod7SpProtector = 0x0ACA43 Mod8SpProtector = 0x0ACA44 Mod9SpProtector = 0x0ACA45 Mod10SpProtector = 0x0ACA46
	MaxSlotsSpJacket = 0x0ACA49 DefSpJacket = 0x0ACA4F PEnSpJacket = 0x0ACA50 CrtSpJacket = 0x0ACA51 DefPlusSpJacket = 0x0ACA56 PEnPlusSpJacket = 0x0ACA58
	CrtPlusSpJacket = 0x0ACA5A CurSlotsSpJacket = 0x0ACA5C Mod1SpJacket = 0x0ACA5D Mod2SpJacket = 0x0ACA5E Mod3SpJacket = 0x0ACA5F Mod4SpJacket = 0x0ACA60
	Mod5SpJacket = 0x0ACA61 Mod6SpJacket = 0x0ACA62 Mod7SpJacket = 0x0ACA63 Mod8SpJacket = 0x0ACA64 Mod9SpJacket = 0x0ACA65 Mod10SpJacket = 0x0ACA66
	MaxSlotsSpSuit1 = 0x0ACA69 DefSpSuit1 = 0x0ACA6F PEnSpSuit1 = 0x0ACA70 CrtSpSuit1 = 0x0ACA71 DefPlusSpSuit1 = 0x0ACA76 PEnPlusSpSuit1 = 0x0ACA78
	CrtPlusSpSuit1 = 0x0ACA7A CurSlotsSpSuit1 = 0x0ACA7C Mod1SpSuit1 = 0x0ACA7D Mod2SpSuit1 = 0x0ACA7E Mod3SpSuit1 = 0x0ACA7F Mod4SpSuit1 = 0x0ACA80
	Mod5SpSuit1 = 0x0ACA81 Mod6SpSuit1 = 0x0ACA82 Mod7SpSuit1 = 0x0ACA83 Mod8SpSuit1 = 0x0ACA84 Mod9SpSuit1 = 0x0ACA85 Mod10SpSuit1 = 0x0ACA86
	MaxSlotsSpSuit2 = 0x0ACA89 DefSpSuit2 = 0x0ACA8F PEnSpSuit2 = 0x0ACA90 CrtSpSuit2 = 0x0ACA91 DefPlusSpSuit2 = 0x0ACA96 PEnPlusSpSuit2 = 0x0ACA98
	CrtPlusSpSuit2 = 0x0ACA9A CurSlotsSpSuit2 = 0x0ACA9C Mod1SpSuit2 = 0x0ACA9D Mod2SpSuit2 = 0x0ACA9E Mod3SpSuit2 = 0x0ACA9F Mod4SpSuit2 = 0x0ACAA0
	Mod5SpSuit2 = 0x0ACAA1 Mod6SpSuit2 = 0x0ACAA2 Mod7SpSuit2 = 0x0ACAA3 Mod8SpSuit2 = 0x0ACAA4 Mod9SpSuit2 = 0x0ACAA5 Mod10SpSuit2 = 0x0ACAA6
	MaxSlotsSpArmor1 = 0x0ACAA9 DefSpArmor1 = 0x0ACAAF PEnSpArmor1 = 0x0ACAB0 CrtSpArmor1 = 0x0ACAB1 DefPlusSpArmor1 = 0x0ACAB6 PEnPlusSpArmor1 = 0x0ACAB8
	CrtPlusSpArmor1 = 0x0ACABA CurSlotsSpArmor1 = 0x0ACABC Mod1SpArmor1 = 0x0ACABD Mod2SpArmor1 = 0x0ACABE Mod3SpArmor1 = 0x0ACABF Mod4SpArmor1 = 0x0ACAC0
	Mod5SpArmor1 = 0x0ACAC1 Mod6SpArmor1 = 0x0ACAC2 Mod7SpArmor1 = 0x0ACAC3 Mod8SpArmor1 = 0x0ACAC4 Mod9SpArmor1 = 0x0ACAC5 Mod10SpArmor1 = 0x0ACAC6
	MaxSlotsSpArmor2 = 0x0ACAC9 DefSpArmor2 = 0x0ACACF PEnSpArmor2 = 0x0ACAD0 CrtSpArmor2 = 0x0ACAD1 DefPlusSpArmor2 = 0x0ACAD6 PEnPlusSpArmor2 = 0x0ACAD8
	CrtPlusSpArmor2 = 0x0ACADA CurSlotsSpArmor2 = 0x0ACADC Mod1SpArmor2 = 0x0ACADD Mod2SpArmor2 = 0x0ACADE Mod3SpArmor2 = 0x0ACADF Mod4SpArmor2 = 0x0ACAE0
	Mod5SpArmor2 = 0x0ACAE1 Mod6SpArmor2 = 0x0ACAE2 Mod7SpArmor2 = 0x0ACAE3 Mod8SpArmor2 = 0x0ACAE4 Mod9SpArmor2 = 0x0ACAE5 Mod10SpArmor2 = 0x0ACAE6
	MaxSlotsSvVest1 = 0x0ACAE9 DefSvVest1 = 0x0ACAEF PEnSvVest1 = 0x0ACAF0 CrtSvVest1 = 0x0ACAF1 DefPlusSvVest1 = 0x0ACAF6 PEnPlusSvVest1 = 0x0ACAF8
	CrtPlusSvVest1 = 0x0ACAFA CurSlotsSvVest1 = 0x0ACAFC Mod1SvVest1 = 0x0ACAFD Mod2SvVest1 = 0x0ACAFE Mod3SvVest1 = 0x0ACAFF Mod4SvVest1 = 0x0ACB00
	Mod5SvVest1 = 0x0ACB01 Mod6SvVest1 = 0x0ACB02 Mod7SvVest1 = 0x0ACB03 Mod8SvVest1 = 0x0ACB04 Mod9SvVest1 = 0x0ACB05 Mod10SvVest1 = 0x0ACB06
	MaxSlotsSvVest2 = 0x0ACB09 DefSvVest2 = 0x0ACB0F PEnSvVest2 = 0x0ACB10 CrtSvVest2 = 0x0ACB11 DefPlusSvVest2 = 0x0ACB16 PEnPlusSvVest2 = 0x0ACB18
	CrtPlusSvVest2 = 0x0ACB1A CurSlotsSvVest2 = 0x0ACB1C Mod1SvVest2 = 0x0ACB1D Mod2SvVest2 = 0x0ACB1E Mod3SvVest2 = 0x0ACB1F Mod4SvVest2 = 0x0ACB20
	Mod5SvVest2 = 0x0ACB21 Mod6SvVest2 = 0x0ACB22 Mod7SvVest2 = 0x0ACB23 Mod8SvVest2 = 0x0ACB24 Mod9SvVest2 = 0x0ACB25 Mod10SvVest2 = 0x0ACB26
	MaxSlotsSvProtector = 0x0ACB29 DefSvProtector = 0x0ACB2F PEnSvProtector = 0x0ACB30 CrtSvProtector = 0x0ACB31 DefPlusSvProtector = 0x0ACB36 PEnPlusSvProtector = 0x0ACB38
	CrtPlusSvProtector = 0x0ACB3A CurSlotsSvProtector = 0x0ACB3C Mod1SvProtector = 0x0ACB3D Mod2SvProtector = 0x0ACB3E Mod3SvProtector = 0x0ACB3F Mod4SvProtector = 0x0ACB40
	Mod5SvProtector = 0x0ACB41 Mod6SvProtector = 0x0ACB42 Mod7SvProtector = 0x0ACB43 Mod8SvProtector = 0x0ACB44 Mod9SvProtector = 0x0ACB45 Mod10SvProtector = 0x0ACB46
	MaxSlotsSvJacket = 0x0ACB49 DefSvJacket = 0x0ACB4F PEnSvJacket = 0x0ACB50 CrtSvJacket = 0x0ACB51 DefPlusSvJacket = 0x0ACB56 PEnPlusSvJacket = 0x0ACB58
	CrtPlusSvJacket = 0x0ACB5A CurSlotsSvJacket = 0x0ACB5C Mod1SvJacket = 0x0ACB5D Mod2SvJacket = 0x0ACB5E Mod3SvJacket = 0x0ACB5F Mod4SvJacket = 0x0ACB60
	Mod5SvJacket = 0x0ACB61 Mod6SvJacket = 0x0ACB62 Mod7SvJacket = 0x0ACB63 Mod8SvJacket = 0x0ACB64 Mod9SvJacket = 0x0ACB65 Mod10SvJacket = 0x0ACB66
	MaxSlotsSvSuit1 = 0x0ACB69 DefSvSuit1 = 0x0ACB6F PEnSvSuit1 = 0x0ACB70 CrtSvSuit1 = 0x0ACB71 DefPlusSvSuit1 = 0x0ACB76 PEnPlusSvSuit1 = 0x0ACB78
	CrtPlusSvSuit1 = 0x0ACB7A CurSlotsSvSuit1 = 0x0ACB7C Mod1SvSuit1 = 0x0ACB7D Mod2SvSuit1 = 0x0ACB7E Mod3SvSuit1 = 0x0ACB7F Mod4SvSuit1 = 0x0ACB80
	Mod5SvSuit1 = 0x0ACB81 Mod6SvSuit1 = 0x0ACB82 Mod7SvSuit1 = 0x0ACB83 Mod8SvSuit1 = 0x0ACB84 Mod9SvSuit1 = 0x0ACB85 Mod10SvSuit1 = 0x0ACB86
	MaxSlotsSvSuit2 = 0x0ACB89 DefSvSuit2 = 0x0ACB8F PEnSvSuit2 = 0x0ACB90 CrtSvSuit2 = 0x0ACB91 DefPlusSvSuit2 = 0x0ACB96 PEnPlusSvSuit2 = 0x0ACB98
	CrtPlusSvSuit2 = 0x0ACB9A CurSlotsSvSuit2 = 0x0ACB9C Mod1SvSuit2 = 0x0ACB9D Mod2SvSuit2 = 0x0ACB9E Mod3SvSuit2 = 0x0ACB9F Mod4SvSuit2 = 0x0ACBA0
	Mod5SvSuit2 = 0x0ACBA1 Mod6SvSuit2 = 0x0ACBA2 Mod7SvSuit2 = 0x0ACBA3 Mod8SvSuit2 = 0x0ACBA4 Mod9SvSuit2 = 0x0ACBA5 Mod10SvSuit2 = 0x0ACBA6
	MaxSlotsSvArmor1 = 0x0ACBA9 DefSvArmor1 = 0x0ACBAF PEnSvArmor1 = 0x0ACBB0 CrtSvArmor1 = 0x0ACBB1 DefPlusSvArmor1 = 0x0ACBB6 PEnPlusSvArmor1 = 0x0ACBB8
	CrtPlusSvArmor1 = 0x0ACBBA CurSlotsSvArmor1 = 0x0ACBBC Mod1SvArmor1 = 0x0ACBBD Mod2SvArmor1 = 0x0ACBBE Mod3SvArmor1 = 0x0ACBBF Mod4SvArmor1 = 0x0ACBC0
	Mod5SvArmor1 = 0x0ACBC1 Mod6SvArmor1 = 0x0ACBC2 Mod7SvArmor1 = 0x0ACBC3 Mod8SvArmor1 = 0x0ACBC4 Mod9SvArmor1 = 0x0ACBC5 Mod10SvArmor1 = 0x0ACBC6
	MaxSlotsSvArmor2 = 0x0ACBC9 DefSvArmor2 = 0x0ACBCF PEnSvArmor2 = 0x0ACBD0 CrtSvArmor2 = 0x0ACBD1 DefPlusSvArmor2 = 0x0ACBD6 PEnPlusSvArmor2 = 0x0ACBD8
	CrtPlusSvArmor2 = 0x0ACBDA CurSlotsSvArmor2 = 0x0ACBDC Mod1SvArmor2 = 0x0ACBDD Mod2SvArmor2 = 0x0ACBDE Mod3SvArmor2 = 0x0ACBDF Mod4SvArmor2 = 0x0ACBE0
	Mod5SvArmor2 = 0x0ACBE1 Mod6SvArmor2 = 0x0ACBE2 Mod7SvArmor2 = 0x0ACBE3 Mod8SvArmor2 = 0x0ACBE4 Mod9SvArmor2 = 0x0ACBE5 Mod10SvArmor2 = 0x0ACBE6
	MaxSlotsCrVest1 = 0x0ACBE9 DefCrVest1 = 0x0ACBEF PEnCrVest1 = 0x0ACBF0 CrtCrVest1 = 0x0ACBF1 DefPlusCrVest1 = 0x0ACBF6 PEnPlusCrVest1 = 0x0ACBF8
	CrtPlusCrVest1 = 0x0ACBFA CurSlotsCrVest1 = 0x0ACBFC Mod1CrVest1 = 0x0ACBFD Mod2CrVest1 = 0x0ACBFE Mod3CrVest1 = 0x0ACBFF Mod4CrVest1 = 0x0ACC00
	Mod5CrVest1 = 0x0ACC01 Mod6CrVest1 = 0x0ACC02 Mod7CrVest1 = 0x0ACC03 Mod8CrVest1 = 0x0ACC04 Mod9CrVest1 = 0x0ACC05 Mod10CrVest1 = 0x0ACC06
	MaxSlotsCrVest2 = 0x0ACC09 DefCrVest2 = 0x0ACC0F PEnCrVest2 = 0x0ACC10 CrtCrVest2 = 0x0ACC11 DefPlusCrVest2 = 0x0ACC16 PEnPlusCrVest2 = 0x0ACC18
	CrtPlusCrVest2 = 0x0ACC1A CurSlotsCrVest2 = 0x0ACC1C Mod1CrVest2 = 0x0ACC1D Mod2CrVest2 = 0x0ACC1E Mod3CrVest2 = 0x0ACC1F Mod4CrVest2 = 0x0ACC20
	Mod5CrVest2 = 0x0ACC21 Mod6CrVest2 = 0x0ACC22 Mod7CrVest2 = 0x0ACC23 Mod8CrVest2 = 0x0ACC24 Mod9CrVest2 = 0x0ACC25 Mod10CrVest2 = 0x0ACC26
	MaxSlotsCrProtector = 0x0ACC29 DefCrProtector = 0x0ACC2F PEnCrProtector = 0x0ACC30 CrtCrProtector = 0x0ACC31 DefPlusCrProtector = 0x0ACC36 PEnPlusCrProtector = 0x0ACC38
	CrtPlusCrProtector = 0x0ACC3A CurSlotsCrProtector = 0x0ACC3C Mod1CrProtector = 0x0ACC3D Mod2CrProtector = 0x0ACC3E Mod3CrProtector = 0x0ACC3F Mod4CrProtector = 0x0ACC40
	Mod5CrProtector = 0x0ACC41 Mod6CrProtector = 0x0ACC42 Mod7CrProtector = 0x0ACC43 Mod8CrProtector = 0x0ACC44 Mod9CrProtector = 0x0ACC45 Mod10CrProtector = 0x0ACC46
	MaxSlotsCrJacket = 0x0ACC49 DefCrJacket = 0x0ACC4F PEnCrJacket = 0x0ACC50 CrtCrJacket = 0x0ACC51 DefPlusCrJacket = 0x0ACC56 PEnPlusCrJacket = 0x0ACC58
	CrtPlusCrJacket = 0x0ACC5A CurSlotsCrJacket = 0x0ACC5C Mod1CrJacket = 0x0ACC5D Mod2CrJacket = 0x0ACC5E Mod3CrJacket = 0x0ACC5F Mod4CrJacket = 0x0ACC60
	Mod5CrJacket = 0x0ACC61 Mod6CrJacket = 0x0ACC62 Mod7CrJacket = 0x0ACC63 Mod8CrJacket = 0x0ACC64 Mod9CrJacket = 0x0ACC65 Mod10CrJacket = 0x0ACC66
	MaxSlotsCrSuit1 = 0x0ACC69 DefCrSuit1 = 0x0ACC6F PEnCrSuit1 = 0x0ACC70 CrtCrSuit1 = 0x0ACC71 DefPlusCrSuit1 = 0x0ACC76 PEnPlusCrSuit1 = 0x0ACC78
	CrtPlusCrSuit1 = 0x0ACC7A CurSlotsCrSuit1 = 0x0ACC7C Mod1CrSuit1 = 0x0ACC7D Mod2CrSuit1 = 0x0ACC7E Mod3CrSuit1 = 0x0ACC7F Mod4CrSuit1 = 0x0ACC80
	Mod5CrSuit1 = 0x0ACC81 Mod6CrSuit1 = 0x0ACC82 Mod7CrSuit1 = 0x0ACC83 Mod8CrSuit1 = 0x0ACC84 Mod9CrSuit1 = 0x0ACC85 Mod10CrSuit1 = 0x0ACC86
	MaxSlotsCrSuit2 = 0x0ACC89 DefCrSuit2 = 0x0ACC8F PEnCrSuit2 = 0x0ACC90 CrtCrSuit2 = 0x0ACC91 DefPlusCrSuit2 = 0x0ACC96 PEnPlusCrSuit2 = 0x0ACC98
	CrtPlusCrSuit2 = 0x0ACC9A CurSlotsCrSuit2 = 0x0ACC9C Mod1CrSuit2 = 0x0ACC9D Mod2CrSuit2 = 0x0ACC9E Mod3CrSuit2 = 0x0ACC9F Mod4CrSuit2 = 0x0ACCA0
	Mod5CrSuit2 = 0x0ACCA1 Mod6CrSuit2 = 0x0ACCA2 Mod7CrSuit2 = 0x0ACCA3 Mod8CrSuit2 = 0x0ACCA4 Mod9CrSuit2 = 0x0ACCA5 Mod10CrSuit2 = 0x0ACCA6
	MaxSlotsCrArmor1 = 0x0ACCA9 DefCrArmor1 = 0x0ACCAF PEnCrArmor1 = 0x0ACCB0 CrtCrArmor1 = 0x0ACCB1 DefPlusCrArmor1 = 0x0ACCB6 PEnPlusCrArmor1 = 0x0ACCB8
	CrtPlusCrArmor1 = 0x0ACCBA CurSlotsCrArmor1 = 0x0ACCBC Mod1CrArmor1 = 0x0ACCBD Mod2CrArmor1 = 0x0ACCBE Mod3CrArmor1 = 0x0ACCBF Mod4CrArmor1 = 0x0ACCC0
	Mod5CrArmor1 = 0x0ACCC1 Mod6CrArmor1 = 0x0ACCC2 Mod7CrArmor1 = 0x0ACCC3 Mod8CrArmor1 = 0x0ACCC4 Mod9CrArmor1 = 0x0ACCC5 Mod10CrArmor1 = 0x0ACCC6
	MaxSlotsCrArmor2 = 0x0ACCC9 DefCrArmor2 = 0x0ACCCF PEnCrArmor2 = 0x0ACCD0 CrtCrArmor2 = 0x0ACCD1 DefPlusCrArmor2 = 0x0ACCD6 PEnPlusCrArmor2 = 0x0ACCD8
	CrtPlusCrArmor2 = 0x0ACCDA CurSlotsCrArmor2 = 0x0ACCDC Mod1CrArmor2 = 0x0ACCDD Mod2CrArmor2 = 0x0ACCDE Mod3CrArmor2 = 0x0ACCDF Mod4CrArmor2 = 0x0ACCE0
	Mod5CrArmor2 = 0x0ACCE1 Mod6CrArmor2 = 0x0ACCE2 Mod7CrArmor2 = 0x0ACCE3 Mod8CrArmor2 = 0x0ACCE4 Mod9CrArmor2 = 0x0ACCE5 Mod10CrArmor2 = 0x0ACCE6
	MaxSlotsBVest1 = 0x0ACCE9 DefBVest1 = 0x0ACCEF PEnBVest1 = 0x0ACCF0 CrtBVest1 = 0x0ACCF1 DefPlusBVest1 = 0x0ACCF6 PEnPlusBVest1 = 0x0ACCF8
	CrtPlusBVest1 = 0x0ACCFA CurSlotsBVest1 = 0x0ACCFC Mod1BVest1 = 0x0ACCFD Mod2BVest1 = 0x0ACCFE Mod3BVest1 = 0x0ACCFF Mod4BVest1 = 0x0ACD00
	Mod5BVest1 = 0x0ACD01 Mod6BVest1 = 0x0ACD02 Mod7BVest1 = 0x0ACD03 Mod8BVest1 = 0x0ACD04 Mod9BVest1 = 0x0ACD05 Mod10BVest1 = 0x0ACD06
	MaxSlotsBVest2 = 0x0ACD09 DefBVest2 = 0x0ACD0F PEnBVest2 = 0x0ACD10 CrtBVest2 = 0x0ACD11 DefPlusBVest2 = 0x0ACD16 PEnPlusBVest2 = 0x0ACD18
	CrtPlusBVest2 = 0x0ACD1A CurSlotsBVest2 = 0x0ACD1C Mod1BVest2 = 0x0ACD1D Mod2BVest2 = 0x0ACD1E Mod3BVest2 = 0x0ACD1F Mod4BVest2 = 0x0ACD20
	Mod5BVest2 = 0x0ACD21 Mod6BVest2 = 0x0ACD22 Mod7BVest2 = 0x0ACD23 Mod8BVest2 = 0x0ACD24 Mod9BVest2 = 0x0ACD25 Mod10BVest2 = 0x0ACD26
	MaxSlotsBProtector = 0x0ACD29 DefBProtector = 0x0ACD2F PEnBProtector = 0x0ACD30 CrtBProtector = 0x0ACD31 DefPlusBProtector = 0x0ACD36 PEnPlusBProtector = 0x0ACD38
	CrtPlusBProtector = 0x0ACD3A CurSlotsBProtector = 0x0ACD3C Mod1BProtector = 0x0ACD3D Mod2BProtector = 0x0ACD3E Mod3BProtector = 0x0ACD3F Mod4BProtector = 0x0ACD40
	Mod5BProtector = 0x0ACD41 Mod6BProtector = 0x0ACD42 Mod7BProtector = 0x0ACD43 Mod8BProtector = 0x0ACD44 Mod9BProtector = 0x0ACD45 Mod10BProtector = 0x0ACD46
	MaxSlotsBJacket1 = 0x0ACD49 DefBJacket1 = 0x0ACD4F PEnBJacket1 = 0x0ACD50 CrtBJacket1 = 0x0ACD51 DefPlusBJacket1 = 0x0ACD56 PEnPlusBJacket1 = 0x0ACD58
	CrtPlusBJacket1 = 0x0ACD5A CurSlotsBJacket1 = 0x0ACD5C Mod1BJacket1 = 0x0ACD5D Mod2BJacket1 = 0x0ACD5E Mod3BJacket1 = 0x0ACD5F Mod4BJacket1 = 0x0ACD60
	Mod5BJacket1 = 0x0ACD61 Mod6BJacket1 = 0x0ACD62 Mod7BJacket1 = 0x0ACD63 Mod8BJacket1 = 0x0ACD64 Mod9BJacket1 = 0x0ACD65 Mod10BJacket1 = 0x0ACD66
	MaxSlotsBJacket2 = 0x0ACD69 DefBJacket2 = 0x0ACD6F PEnBJacket2 = 0x0ACD70 CrtBJacket2 = 0x0ACD71 DefPlusBJacket2 = 0x0ACD76 PEnPlusBJacket2 = 0x0ACD78
	CrtPlusBJacket2 = 0x0ACD7A CurSlotsBJacket2 = 0x0ACD7C Mod1BJacket2 = 0x0ACD7D Mod2BJacket2 = 0x0ACD7E Mod3BJacket2 = 0x0ACD7F Mod4BJacket2 = 0x0ACD80
	Mod5BJacket2 = 0x0ACD81 Mod6BJacket2 = 0x0ACD82 Mod7BJacket2 = 0x0ACD83 Mod8BJacket2 = 0x0ACD84 Mod9BJacket2 = 0x0ACD85 Mod10BJacket2 = 0x0ACD86
	MaxSlotsBSuit1 = 0x0ACD89 DefBSuit1 = 0x0ACD8F PEnBSuit1 = 0x0ACD90 CrtBSuit1 = 0x0ACD91 DefPlusBSuit1 = 0x0ACD96 PEnPlusBSuit1 = 0x0ACD98
	CrtPlusBSuit1 = 0x0ACD9A CurSlotsBSuit1 = 0x0ACD9C Mod1BSuit1 = 0x0ACD9D Mod2BSuit1 = 0x0ACD9E Mod3BSuit1 = 0x0ACD9F Mod4BSuit1 = 0x0ACDA0
	Mod5BSuit1 = 0x0ACDA1 Mod6BSuit1 = 0x0ACDA2 Mod7BSuit1 = 0x0ACDA3 Mod8BSuit1 = 0x0ACDA4 Mod9BSuit1 = 0x0ACDA5 Mod10BSuit1 = 0x0ACDA6
	MaxSlotsBSuit2 = 0x0ACDA9 DefBSuit2 = 0x0ACDAF PEnBSuit2 = 0x0ACDB0 CrtBSuit2 = 0x0ACDB1 DefPlusBSuit2 = 0x0ACDB6 PEnPlusBSuit2 = 0x0ACDB8
	CrtPlusBSuit2 = 0x0ACDBA CurSlotsBSuit2 = 0x0ACDBC Mod1BSuit2 = 0x0ACDBD Mod2BSuit2 = 0x0ACDBE Mod3BSuit2 = 0x0ACDBF Mod4BSuit2 = 0x0ACDC0
	Mod5BSuit2 = 0x0ACDC1 Mod6BSuit2 = 0x0ACDC2 Mod7BSuit2 = 0x0ACDC3 Mod8BSuit2 = 0x0ACDC4 Mod9BSuit2 = 0x0ACDC5 Mod10BSuit2 = 0x0ACDC6
	MaxSlotsBArmor = 0x0ACDC9 DefBArmor = 0x0ACDCF PEnBArmor = 0x0ACDD0 CrtBArmor = 0x0ACDD1 DefPlusBArmor = 0x0ACDD6 PEnPlusBArmor = 0x0ACDD8
	CrtPlusBArmor = 0x0ACDDA CurSlotsBArmor = 0x0ACDDC Mod1BArmor = 0x0ACDDD Mod2BArmor = 0x0ACDDE Mod3BArmor = 0x0ACDDF Mod4BArmor = 0x0ACDE0
	Mod5BArmor = 0x0ACDE1 Mod6BArmor = 0x0ACDE2 Mod7BArmor = 0x0ACDE3 Mod8BArmor = 0x0ACDE4 Mod9BArmor = 0x0ACDE5 Mod10BArmor = 0x0ACDE6
	MaxSlotsCmVest1 = 0x0ACDE9 DefCmVest1 = 0x0ACDEF PEnCmVest1 = 0x0ACDF0 CrtCmVest1 = 0x0ACDF1 DefPlusCmVest1 = 0x0ACDF6 PEnPlusCmVest1 = 0x0ACDF8
	CrtPlusCmVest1 = 0x0ACDFA CurSlotsCmVest1 = 0x0ACDFC Mod1CmVest1 = 0x0ACDFD Mod2CmVest1 = 0x0ACDFE Mod3CmVest1 = 0x0ACDFF Mod4CmVest1 = 0x0ACE00
	Mod5CmVest1 = 0x0ACE01 Mod6CmVest1 = 0x0ACE02 Mod7CmVest1 = 0x0ACE03 Mod8CmVest1 = 0x0ACE04 Mod9CmVest1 = 0x0ACE05 Mod10CmVest1 = 0x0ACE06
	MaxSlotsCmVest2 = 0x0ACE09 DefCmVest2 = 0x0ACE0F PEnCmVest2 = 0x0ACE10 CrtCmVest2 = 0x0ACE11 DefPlusCmVest2 = 0x0ACE16 PEnPlusCmVest2 = 0x0ACE18
	CrtPlusCmVest2 = 0x0ACE1A CurSlotsCmVest2 = 0x0ACE1C Mod1CmVest2 = 0x0ACE1D Mod2CmVest2 = 0x0ACE1E Mod3CmVest2 = 0x0ACE1F Mod4CmVest2 = 0x0ACE20
	Mod5CmVest2 = 0x0ACE21 Mod6CmVest2 = 0x0ACE22 Mod7CmVest2 = 0x0ACE23 Mod8CmVest2 = 0x0ACE24 Mod9CmVest2 = 0x0ACE25 Mod10CmVest2 = 0x0ACE26
	MaxSlotsCmProtector = 0x0ACE29 DefCmProtector = 0x0ACE2F PEnCmProtector = 0x0ACE30 CrtCmProtector = 0x0ACE31 DefPlusCmProtector = 0x0ACE36 PEnPlusCmProtector = 0x0ACE38
	CrtPlusCmProtector = 0x0ACE3A CurSlotsCmProtector = 0x0ACE3C Mod1CmProtector = 0x0ACE3D Mod2CmProtector = 0x0ACE3E Mod3CmProtector = 0x0ACE3F Mod4CmProtector = 0x0ACE40
	Mod5CmProtector = 0x0ACE41 Mod6CmProtector = 0x0ACE42 Mod7CmProtector = 0x0ACE43 Mod8CmProtector = 0x0ACE44 Mod9CmProtector = 0x0ACE45 Mod10CmProtector = 0x0ACE46
	MaxSlotsCmJacket = 0x0ACE49 DefCmJacket = 0x0ACE4F PEnCmJacket = 0x0ACE50 CrtCmJacket = 0x0ACE51 DefPlusCmJacket = 0x0ACE56 PEnPlusCmJacket = 0x0ACE58
	CrtPlusCmJacket = 0x0ACE5A CurSlotsCmJacket = 0x0ACE5C Mod1CmJacket = 0x0ACE5D Mod2CmJacket = 0x0ACE5E Mod3CmJacket = 0x0ACE5F Mod4CmJacket = 0x0ACE60
	Mod5CmJacket = 0x0ACE61 Mod6CmJacket = 0x0ACE62 Mod7CmJacket = 0x0ACE63 Mod8CmJacket = 0x0ACE64 Mod9CmJacket = 0x0ACE65 Mod10CmJacket = 0x0ACE66
	MaxSlotsCmSuit1 = 0x0ACE69 DefCmSuit1 = 0x0ACE6F PEnCmSuit1 = 0x0ACE70 CrtCmSuit1 = 0x0ACE71 DefPlusCmSuit1 = 0x0ACE76 PEnPlusCmSuit1 = 0x0ACE78
	CrtPlusCmSuit1 = 0x0ACE7A CurSlotsCmSuit1 = 0x0ACE7C Mod1CmSuit1 = 0x0ACE7D Mod2CmSuit1 = 0x0ACE7E Mod3CmSuit1 = 0x0ACE7F Mod4CmSuit1 = 0x0ACE80
	Mod5CmSuit1 = 0x0ACE81 Mod6CmSuit1 = 0x0ACE82 Mod7CmSuit1 = 0x0ACE83 Mod8CmSuit1 = 0x0ACE84 Mod9CmSuit1 = 0x0ACE85 Mod10CmSuit1 = 0x0ACE86
	MaxSlotsCmArmor1 = 0x0ACE89 DefCmArmor1 = 0x0ACE8F PEnCmArmor1 = 0x0ACE90 CrtCmArmor1 = 0x0ACE91 DefPlusCmArmor1 = 0x0ACE96 PEnPlusCmArmor1 = 0x0ACE98
	CrtPlusCmArmor1 = 0x0ACE9A CurSlotsCmArmor1 = 0x0ACE9C Mod1CmArmor1 = 0x0ACE9D Mod2CmArmor1 = 0x0ACE9E Mod3CmArmor1 = 0x0ACE9F Mod4CmArmor1 = 0x0ACEA0
	Mod5CmArmor1 = 0x0ACEA1 Mod6CmArmor1 = 0x0ACEA2 Mod7CmArmor1 = 0x0ACEA3 Mod8CmArmor1 = 0x0ACEA4 Mod9CmArmor1 = 0x0ACEA5 Mod10CmArmor1 = 0x0ACEA6
	MaxSlotsCmArmor2 = 0x0ACEA9 DefCmArmor2 = 0x0ACEAF PEnCmArmor2 = 0x0ACEB0 CrtCmArmor2 = 0x0ACEB1 DefPlusCmArmor2 = 0x0ACEB6 PEnPlusCmArmor2 = 0x0ACEB8
	CrtPlusCmArmor2 = 0x0ACEBA CurSlotsCmArmor2 = 0x0ACEBC Mod1CmArmor2 = 0x0ACEBD Mod2CmArmor2 = 0x0ACEBE Mod3CmArmor2 = 0x0ACEBF Mod4CmArmor2 = 0x0ACEC0
	Mod5CmArmor2 = 0x0ACEC1 Mod6CmArmor2 = 0x0ACEC2 Mod7CmArmor2 = 0x0ACEC3 Mod8CmArmor2 = 0x0ACEC4 Mod9CmArmor2 = 0x0ACEC5 Mod10CmArmor2 = 0x0ACEC6


ScriptStart			 = false


gui.defaultPixelFont(1)




-- [ Inventory Check Function ] --

function Set (list)
	local set = {}
	for _, l in ipairs(list) do set[l] = true end
	return set
end




console.writeline("To start the PE Randomizer script, press")
console.writeline("START on P1's controller to reboot the core.")
console.writeline("Note: You will lose any unsaved progress.")

while ScriptStart == false do

	if joypad.get()["P1 Start"] == true then

		console.clear()
		client.reboot_core()
		ScriptStart = true
		console.writeline("Parasite Eve Randomizer script activated!")
		console.writeline("(created by chrisaegrimm, Kaktus021, & skooter0070)")

	end


	emu.frameadvance()


end


while ScriptStart == true do

--	[ Open-World Save-Warp Functionality ] --

	if mainmemory.read_u32_le(Location) == 0xA8002048 or mainmemory.read_u32_le(Location) == 0xA8003148 or mainmemory.read_u32_le(Location) == 0xA8004148 or		-- Allows a warp-to-map function inside of any allowed save rooms
	mainmemory.read_u32_le(Location) == 0xA80054C8 or mainmemory.read_u32_le(Location) == 0xA8006248 or mainmemory.read_u32_le(Location) == 0xA80072C8 or
	mainmemory.read_u32_le(Location) == 0xA80083C8 or mainmemory.read_u32_le(Location) == 0xA80093C8 or mainmemory.read_u32_le(Location) == 0xA8021148 or
	mainmemory.read_u32_le(Location) == 0xA8022348 or mainmemory.read_u32_le(Location) == 0xA80622C8 or mainmemory.read_u32_le(Location) == 0xA80261C8 or
	mainmemory.read_u32_le(Location) == 0xA8027348 or mainmemory.read_u32_le(Location) == 0xA8028248 or mainmemory.read_u32_le(Location) == 0xA8046348 or
	mainmemory.read_u32_le(Location) == 0xA8029348 or mainmemory.read_u32_le(Location) == 0xA80433C8 or mainmemory.read_u32_le(Location) == 0xA8023448 or
	mainmemory.read_u32_le(Location) == 0xA8064048 then
 
		if mainmemory.readbyte(AyaState) == 0x01 then

			gui.pixelText(7, 4, "")

		elseif mainmemory.read_u16_le(GameState) == 0x8000 or mainmemory.read_u16_le(GameState) == 0x8080 then

			gui.pixelText(7, 4, "[S]", "white", "0")

			if mainmemory.read_u32_le(CurrentInput) == 0x0000004C then

				console.writeline("Save-Warp requested, returning to the World Map...")
				mainmemory.write_u16_le(GameState, 0x8040)																														-- Restores game's state
				mainmemory.writebyte(AyaState, 0x03)																															-- Restores Aya's state
				mainmemory.write_u32_le(CurrentInput, 0x00000000)																												-- Reset inputs, prevents infinite map warp loop
				mainmemory.write_u32_le(Location, 0xA8000048)																													-- World Map location

			end

		
		elseif mainmemory.read_u16_le(GameState) == 0x8004 or mainmemory.read_u16_le(GameState) == 0x8084 then

			gui.pixelText(7, 4, "[S] To return to the World Map, you can hold L1+R1+Circle.", "white", "0")

			if mainmemory.read_u32_le(CurrentInput) == 0x0000004C then

				console.writeline("Save-Warp requested, returning to the World Map...")
				mainmemory.write_u16_le(GameState, 0x8040)																														-- Restores game's state
				mainmemory.writebyte(AyaState, 0x03)																															-- Restores Aya's state
				mainmemory.write_u32_le(CurrentInput, 0x00000000)																												-- Reset inputs, prevents infinite map warp loop
				mainmemory.write_u32_le(Location, 0xA8000048)																													-- World Map location

			end

		
		elseif mainmemory.read_u16_le(GameState) == 0x8082 or mainmemory.readbyte(BattleMenuType) == 0x00 then															-- Prevents save-warp when in battle, adds a message for the player

			gui.pixelText(7, 4, "[X]", "white", "0")

		elseif mainmemory.read_u16_le(GameState) == 0x8086 then

			gui.pixelText(7, 4, "[X] You cannot fast travel, there are monsters nearby.", "white", "0")

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80094C8 then																											-- Provides a message for any save room NOT eligible for save-warping
 
		if mainmemory.readbyte(AyaState) == 0x01 then

			gui.pixelText(7, 4, "")

		elseif mainmemory.read_u16_le(GameState) == 0x8000 or mainmemory.read_u16_le(GameState) == 0x8080 then

			gui.pixelText(7, 4, "[X]", "white", "0")
		
		elseif mainmemory.read_u16_le(GameState) == 0x8004 or mainmemory.read_u16_le(GameState) == 0x8084 then

			gui.pixelText(7, 4, "[X] Save-Warp is disabled here to prevent issues. Guess you gotta walk.", "white", "0")

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA8025248 then

		if mainmemory.read_u16_le(StoryFlag) < 0x01F4 then

			if mainmemory.readbyte(AyaState) == 0x01 then

				gui.pixelText(7, 4, "")

			elseif mainmemory.read_u16_le(GameState) == 0x8000 or mainmemory.read_u16_le(GameState) == 0x8080 then

				gui.pixelText(7, 4, "[X]", "white", "0")
			
			elseif mainmemory.read_u16_le(GameState) == 0x8004 or mainmemory.read_u16_le(GameState) == 0x8084 then

				gui.pixelText(7, 4, "[X] Save-Warp is disabled here until you learn the truth.", "white", "0")

			end


		end


		if mainmemory.read_u16_le(StoryFlag) >= 0x01F4 then

			if mainmemory.readbyte(AyaState) == 0x01 then

				gui.pixelText(7, 4, "")

			elseif mainmemory.read_u16_le(GameState) == 0x8000 or mainmemory.read_u16_le(GameState) == 0x8080 then

				gui.pixelText(7, 4, "[S]", "white", "0")

				if mainmemory.read_u32_le(CurrentInput) == 0x0000004C then

					console.writeline("Save-Warp requested, returning to the World Map...")
					mainmemory.write_u16_le(GameState, 0x8040)																														-- Restores game's state
					mainmemory.writebyte(AyaState, 0x03)																															-- Restores Aya's state
					mainmemory.write_u32_le(CurrentInput, 0x00000000)																												-- Reset inputs, prevents infinite map warp loop
					mainmemory.write_u32_le(Location, 0xA8000048)																													-- World Map location

				end

			
			elseif mainmemory.read_u16_le(GameState) == 0x8004 or mainmemory.read_u16_le(GameState) == 0x8084 then

				gui.pixelText(7, 4, "[S] To return to the World Map, you can hold L1+R1+Circle.", "white", "0")

				if mainmemory.read_u32_le(CurrentInput) == 0x0000004C then

					console.writeline("Save-Warp requested, returning to the World Map...")
					mainmemory.write_u16_le(GameState, 0x8040)																														-- Restores game's state
					mainmemory.writebyte(AyaState, 0x03)																															-- Restores Aya's state
					mainmemory.write_u32_le(CurrentInput, 0x00000000)																												-- Reset inputs, prevents infinite map warp loop
					mainmemory.write_u32_le(Location, 0xA8000048)																													-- World Map location

				end

			
			elseif mainmemory.read_u16_le(GameState) == 0x8082 or mainmemory.readbyte(BattleMenuType) == 0x00 then															-- Prevents save-warp when in battle, adds a message for the player

				gui.pixelText(7, 4, "[X]", "white", "0")

			elseif mainmemory.read_u16_le(GameState) == 0x8086 then

				gui.pixelText(7, 4, "[X] You cannot fast travel, there are monsters nearby.", "white", "0")

			end


		end


	end




-- [ Open-World Transitions Handler ] --

	if mainmemory.read_u16_le(GameState) == 0x4000 and mainmemory.readbyte(GameClock) <= 0x01 then																	-- Loading variables before title screen
	
		console.writeline("Boot/Reset detected, loading 'per-crrntprog.txt' variables.")
		local f = assert(io.open("per-crrntprog.txt", "r"))
		CH = f:read("*line")
		PD = f:read("*line")
		CP = f:read("*line")
		SH = f:read("*line")
		HS = f:read("*line")
		WH = f:read("*line")
		CT = f:read("*line")
		SW = f:read("*line")
		MU = f:read("*line")
		CC = f:read("*line")
		CD = f:read("*line")
		TK = f:read("*line")
		AK = f:read("*line")
		PE = f:read("*line")
		f:close()
		
	end


	if (mainmemory.readbyte(Slot1SaveProgress) > 0x00 or mainmemory.readbyte(Slot2SaveProgress) > 0x00) and															-- Saving variables during saving in-game
	mainmemory.read_u32_le(Location) ~= 0xA9400048 and mainmemory.readbyte(GameClock) <= 0x03 then

		console.writeline("Save detected, saving 'per-crrntprog.txt' variables.")
		local f = assert(io.open("per-crrntprog.txt", "w"))
		f:write(CH, "\n")
		f:write(PD, "\n")
		f:write(CP, "\n")
		f:write(SH, "\n")
		f:write(HS, "\n")
		f:write(WH, "\n")
		f:write(CT, "\n")
		f:write(SW, "\n")
		f:write(MU, "\n")
		f:write(CC, "\n")
		f:write(CD, "\n")
		f:write(TK, "\n")
		f:write(AK, "\n")
		f:write(PE)
		f:close()
		
	end




	if (mainmemory.read_u16_le(StoryFlag) == 0x0001 and mainmemory.read_u16_le(GameState) == 0x8004 and mainmemory.read_u32_le(MenuWindowColor) == 0x00404040) then	--	Shows Seed at Name Entry

		mainmemory.write_u32_le(AyaMenuName1, 0x0F21141F)																											-- Sets Player Name in Name Entry
		mainmemory.write_u32_le(AyaMenuName2, 0x002F0045)
		mainmemory.write_u32_le(AyaMenuName3, 0x0000FF09)
		mainmemory.write_u32_le(MenuWindowColor, SeedWindowColor)																										-- Sets Window Color in Most Contexts (00BBGGRR)
		mainmemory.write_u32_le(SaveWindowColor, SeedWindowColor)																										-- Sets Window Color in Save Menu (00BBGGRR)

	end




	if mainmemory.read_u32_le(Location) == 0xA8000148 and mainmemory.readbyte(MapAvSelections) == 0x00 then															-- Initialization: Name Entry Warp to Starting Location

		mainmemory.write_u32_le(Location, 0xA8021048)																													-- Starting Location
		mainmemory.writebyte(AyaAmmoCrate, 0x42)																														-- Give 60 Ammo from Ammo Guy Aaron
		mainmemory.write_u16_le(GameState, 0x8000)																														-- Sets Game State Properly
		mainmemory.writebyte(EventSkip, 0x04)																															-- Sets Event Skip to On
		mainmemory.writebyte(MapTimeOfDay, 0xE0)																														-- Sets World Map to Night
		mainmemory.write_u16_le(StoryFlag, 0x01C0)																														-- Sets Story Flag to 01C0, Prevents a Battle in Starting Room
		mainmemory.writebyte(EquippedWeapon, 0x02)																														-- Equip Weapon to 3rd Slot
		mainmemory.writebyte(EquippedArmor, 0xFF)																														-- Equip Armor to 2nd Slot
		mainmemory.write_u32_le(PEAbilities, 0x00000000)																												-- Take PE Abilities
		mainmemory.write_u16_le(AyaItemCapStat, 0x003C)																													-- Give 4 Inventory Slots Possible Early Story Items
		mainmemory.write_u16_le(0x0C0E48, 0x0000)																														-- Inventory Slot 1 Starting Item 1
		mainmemory.write_u16_le(0x0C0E4A, 0x0000)																														-- Inventory Slot 2 Starting Item 2
		mainmemory.write_u16_le(0x0C0E4C, 0x0102)																														-- Inventory Slot 3 Club 1
		mainmemory.write_u16_le(0x0C0E4E, 0x0200)																														-- Inventory Slot 4 Ammo Crate
		mainmemory.write_u16_le(0x0C0E50, 0x0000)																														-- Inventory Slot 5 Starting Item 3

	end


	if mainmemory.read_u32_le(Location) == 0xA8021048 and mainmemory.read_u16_le(AyaState) == 0x01 and mainmemory.readbyte(GameClock) % 3 == 0 then					-- Tells Player Starting location

		console.clear()
		console.writeline("Starting Location: Unused Weapons Training (PD)")

	end


	if mainmemory.read_u32_le(Location) == 0xA8020448 then																											-- Warps from Unused Area to Day 5 Title Card

		if mainmemory.readbyte(MapAvSelections) == 0x00 then

			CH = "0"
			PD = "0"
			CP = "0"
			SH = "0"
			HS = "0"
			CT = "0"
			SW = "0"
			WH = "0"
			MU = "0"
			CC = "0"
			CD = "0"
			TK = "0"
			AK = "0"
			PE = "0"
			mainmemory.write_u16_le(StoryFlag, 0x0218)
			mainmemory.writebyte(MapTimeOfDay, 0xE0)
			mainmemory.writebyte(MapAvSelections, 0x3B)
			mainmemory.write_u32_le(Location, 0xA8065148)
			console.writeline("Initialization complete. Welcome to the Open-World PE Randomizer!")
			console.writeline("You have already received the 60 ammo from your backup at Carnegie Hall.")
			console.writeline("You don't need to watch this console. Important info will appear on-screen.")

		end


	end




	if mainmemory.readbyte(ActiveSaveMenu) == 0x02 and mainmemory.read_u16_le(GameState) == 0x0000 then																-- Failsafe After Death to Restore GameState and Maintain Consistancy

		mainmemory.write_u16_le(GameState, 0x8000)

	end




	if mainmemory.read_u32_le(Location) == 0xA8000048 then																											-- World Map Check: Setting Unlocked Areas

		if mainmemory.read_u16_le(StoryFlag) < 0x0254 then

			mainmemory.write_u16_le(StoryFlag, 0x0254)

		end


		mainmemory.writebyte(MapTimeOfDay, 0xE0)
		mainmemory.writebyte(ChryslerFloor, 0x00)

		if mainmemory.readbyte(GameClock) <= 0x03 then																													-- Activate InvCheck for Gate Key

			mainmemory.writebyte(EventSkip, 0x04)

			if SH == "0" and SW == "0" then
	
				local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
				local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
				local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
				local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
				local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
				local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
				local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
				local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
				local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
				local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
				local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
				local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
				local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
				local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
				local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
				local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
				local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
				local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
				local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
				local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
				local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
				local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
				local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
				local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
				local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
				local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
				local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
				local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
				local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
				local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
				local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
				local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
				local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
				local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
				local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
				local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
				local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
				local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
				local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
				local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
				local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
				local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
				local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
				local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
				local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
				local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
				local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
				local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
				local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
				local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

				local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
				AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
				AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
				AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
				AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
				AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
				AyaInv47, AyaInv48, AyaInv49, AyaInv50 }
	
				if Inventory[219] then
	
					console.writeline("[SW = 1] Gate Key detected; Subway has been unlocked!")
					SW = "1"
					mainmemory.writebyte(MapAvSelections, 0x7B)
	
				else mainmemory.writebyte(MapAvSelections, 0x3B)
	
				end
	
	
			end


			if SH ~= "0" and SW == "0" then																																-- Activate InvCheck for Gate Key
	
				local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
				local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
				local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
				local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
				local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
				local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
				local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
				local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
				local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
				local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
				local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
				local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
				local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
				local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
				local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
				local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
				local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
				local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
				local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
				local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
				local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
				local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
				local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
				local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
				local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
				local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
				local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
				local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
				local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
				local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
				local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
				local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
				local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
				local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
				local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
				local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
				local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
				local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
				local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
				local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
				local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
				local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
				local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
				local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
				local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
				local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
				local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
				local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
				local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
				local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

				local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
				AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
				AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
				AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
				AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
				AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
				AyaInv47, AyaInv48, AyaInv49, AyaInv50 }
	
				if Inventory[219] then
	
					console.writeline("[SW = 1] Gate Key detected; Subway has been unlocked!")
					SW = "1"
					mainmemory.writebyte(MapAvSelections, 0x7F)
	
				else mainmemory.writebyte(MapAvSelections, 0x3F)
	
				end
	
	
			end


			if SH == "0" and SW ~= "0" then
	
				mainmemory.writebyte(MapAvSelections, 0x7B)
	
			end


			if SH ~= "0" and SW ~= "0" then
	
				mainmemory.writebyte(MapAvSelections, 0x7F)
	
			end


		end


	end




-- [ Open-World: Carnegie Hall ] --

	if (mainmemory.read_u32_le(Location) == 0xA8000148 or mainmemory.read_u32_le(Location) == 0xA80000C8 or mainmemory.read_u32_le(Location) == 0xA80673C8) and		-- Make CH Entrance Lead to World Map
	mainmemory.readbyte(MapAvSelections) ~= 0x00 then

		mainmemory.write_u32_le(Location, 0xA8000048)																													-- World Map Location
		mainmemory.writebyte(EventSkip, 0x04)																															-- Restores Event Skip

	end


	if mainmemory.read_u32_le(Location) == 0xA8002248 then																											-- Make World Map Lead to Carnegie Hall Properly

		if CH == "0" and PE ~= SeedPE01 then																																				-- CH Flag 0: Before Melissa

			mainmemory.write_u32_le(Location, 0xA80001C8)																													-- CH Performance Event Location
			mainmemory.write_u16_le(StoryFlag, 0x0009)																														-- Sets Story Flag to 12

		end


		if CH == "1" or CH == "2" then																																				-- CH Flag 1: After Melissa

			mainmemory.write_u32_le(Location, 0xA8067448)																													-- CH Post-Performance Location
			mainmemory.write_u16_le(StoryFlag, 0x30)																														-- Sets Story Flag to 30

		end


		if CH == "3" or CH == "4" then																																	-- CH Flag 2: After Rat Transformation

			mainmemory.write_u32_le(Location, 0xA8067448)																													-- CH Post-Performance Location
			mainmemory.write_u16_le(StoryFlag, 0x48)																														-- Sets Story Flag to 48

		end


		if CH == "5" or CH == "6" then																																	-- CH Flag 3: After Eve 1

			mainmemory.write_u32_le(Location, 0xA8067448)																													-- CH Post-Performance Location
			mainmemory.write_u16_le(StoryFlag, 0x60)																														-- Sets Story Flag to 60

		end


	end




	if CH == "0" and PE ~= SeedPE01 and mainmemory.read_u32_le(Location) == 0xA8000248 then																							-- Sets Event Skip Appropriately to Avoid Soft-Lock (and Preserve an Iconic Scene lul)

		if mainmemory.read_u16_le(StoryFlag) <= 0x0017 then

			mainmemory.writebyte(EventSkip, 0x04)

		end


		if mainmemory.read_u16_le(StoryFlag) == 0x0018 then

			mainmemory.writebyte(EventSkip, 0x00)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80002C8 and mainmemory.read_u16_le(PauseMenuOptions) == 0x007F then

		if PE == 0 then

			mainmemory.write_u16_le(PauseMenuOptions, 0x1FFD)

		elseif PE ~= 0 then

			mainmemory.write_u16_le(PauseMenuOptions, 0x1FFF)

		end


	end


	if CH == "0" and PE ~= SeedPE01 and mainmemory.read_u32_le(Location) == 0xA80002C8 and mainmemory.readbyte(DeathTrigger) == 0x06 then												-- Update CH Flag After Awakening

		console.writeline("[CH = 1] You've awakened to a new power.")
		CH = "1"

	end


	if CH == "1" and mainmemory.read_u16_le(StoryFlag) == 0x0027 then																								-- Update CH Flag After Melissa

		console.writeline("[CH = 2] Note: You've already received the backup's 60 ammo.")
		mainmemory.writebyte(EventSkip, 0x04)																															-- Sets Event Skip to On
		CH = "2"

	end


	if CH == "2" and mainmemory.read_u16_le(StoryFlag) == 0x0048 then																								-- Update CH Flag After Rat Transformation

		console.writeline("[CH = 3]")
		CH = "3"

	end


	if CH == "3" and mainmemory.read_u32_le(Location) == 0xA8001148 and mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.readbyte(AyaState) == 0x00 then		-- Update CH Flag After Obtaining Rehearse Key

		mainmemory.writebyte(CHRehearseLock, 0x00)

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[201] then

			console.writeline("[CH = 4] Key detected! The Rehearsal Room has unlocked!")
			CH = "4"
			mainmemory.writebyte(CHRehearseLock, 0x08)

		else console.writeline("Searching for Rehearse Key...")

		end


	end


	if CH == "4" and mainmemory.read_u16_le(StoryFlag) == 0x0060 then																								-- Update CH Flag After Eve 1

		console.writeline("[CH = 5] Carnegie Sewers access granted.")
		CH = "5" 

	end


	if CH == "5" and mainmemory.read_u16_le(StoryFlag) == 0x0070 then																								-- Update CH Flag After Alligator 1

		console.writeline("[CH = 6] Carnegie Hall's story is complete.")
		mainmemory.writebyte(EventSkip, 0x00)
		CH = "6"

	end


	if CH == "6" and mainmemory.read_u32_le(Location) == 0xA80650C8 and mainmemory.read_u16_le(StoryFlag) == 0x0080 then											-- Skip Day 2 Title Card and Warp Back to World Map

		mainmemory.write_u16_le(StoryFlag, 0x0012)
		mainmemory.write_u32_le(Location, 0xA8000048)

	end




	if CH == "2" and mainmemory.read_u32_le(Location) == 0xA80004C8 then																							-- Sets Story Flag to Remove Backup Dialogue

		mainmemory.write_u16_le(StoryFlag, 0x30)

	end


	if mainmemory.read_u32_le(Location) == 0xA8001148 and mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.readbyte(AyaState) == 0x00 then						--	Resets Rehearse Flag Based on Variable, Prevents Diary Room Issues

		if CH == "0" and PE ~= SeedPE01 or CH == "1" or CH == "2" or CH == "3" then

			mainmemory.writebyte(CHRehearseLock, 0x00)

		end


		if CH == "4" or CH == "5" or CH == "6" then

			mainmemory.writebyte(CHRehearseLock, 0x08)

		end


	end




	if mainmemory.read_u32_le(Location) == 0xA8002048 and mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.read_u16_le(GameState) == 0x8040 then				-- Fixes Item on Corpse, Since Theater Key's Trigger Deletes Vanilla Pickup

		if CC == "0" then

			mainmemory.writebyte(CHTheaterLock, 0x00)

		end


		if CC == "1" then

			mainmemory.writebyte(CHTheaterLock, 0xA0)

		end


	end


	if CC == "0" and mainmemory.read_u32_le(Location) == 0xA8002048 and mainmemory.readbyte(GameClock) <= 0x03 and
	(mainmemory.readbyte(CHTheaterLock) == 0x20 or mainmemory.readbyte(CHTheaterLock)) == 0xA0 then

		console.writeline("[CC = 1] You looted the corpse.")
		CC = "1"

	end




	if mainmemory.read_u32_le(Location) == 0xA8001448 and mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.read_u16_le(GameState) == 0x8040 then				-- Fixes Item on Diary, Since Rehearse Key's Trigger Deletes Vanilla Pickup

		if CD == "0" then

			mainmemory.writebyte(CHRehearseLock, 0x04)

		end


		if CD == "1" then

			mainmemory.writebyte(CHRehearseLock, 0x0C)

		end


	end


	if CD == "0" and mainmemory.read_u32_le(Location) == 0xA8001448 and mainmemory.readbyte(GameClock) <= 0x03 and
	(mainmemory.readbyte(CHRehearseLock) == 0x08 or mainmemory.readbyte(CHRehearseLock)) == 0x0C then

		console.writeline("[CD = 1] Diary sequence complete.")
		CD = "1"

	end




	if (CH == "3" or CH == "4" or CH == "5" or CH == "6") and TK == "0" and mainmemory.read_u32_le(Location) == 0xA8001148 and										-- Handles Theater Key Separate From Story Flag
	mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.readbyte(AyaState) == 0x00 then

		mainmemory.writebyte(CHTheaterLock, 0x00)

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[200] then

			console.writeline("[TK = 1] Key detected! All rooms except the Rehearsal Room are unlocked!")
			TK = "1"
			mainmemory.writebyte(CHTheaterLock, 0x20)

		else console.writeline("Searching for Theater Key...")

		end


	elseif (CH == "3" or CH == "4" or CH == "5" or CH == "6") and TK == "1" and mainmemory.read_u32_le(Location) == 0xA8001148 and									-- Handles Unlock Upon Revisiting With Theater Unlocked
	mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.readbyte(AyaState) == 0x00 then

		mainmemory.writebyte(CHTheaterLock, 0x20)

	end



-- [ Open-World: N.Y.P.D. #17 ] --

	if mainmemory.read_u32_le(Location) == 0xA8004348 then																											-- Entrance Handler: Precinct

		if PD == "0" then

			mainmemory.write_u16_le(StoryFlag, 0x0088)
			mainmemory.write_u32_le(Location, 0xA8004148)

		end


		if PD == "1" then

			mainmemory.write_u16_le(StoryFlag, 0x0090)

		end


		if PD == "2" then

			mainmemory.write_u16_le(StoryFlag, 0x0098)

		end


		if PD == "3" then

			mainmemory.write_u16_le(StoryFlag, 0x00A4)

		end


		if PD == "4" and mainmemory.read_u16_le(StoryFlag) ~= 0x00E0 then

			mainmemory.write_u16_le(StoryFlag, 0x00DA)

		end


		if PD == "5" then

			mainmemory.write_u16_le(StoryFlag, 0x0160)

		end


		if PD == "6" then

			mainmemory.write_u16_le(StoryFlag, 0x0180)
			mainmemory.write_u32_le(Location, 0xA80201C8)

		end


		if PD == "7" then

			mainmemory.write_u16_le(StoryFlag, 0x0190)
			mainmemory.write_u32_le(Location, 0xA80201C8)

		end


		if PD == "8" then

			mainmemory.write_u16_le(StoryFlag, 0x01B8)
			mainmemory.write_u32_le(Location, 0xA80201C8)

		end


		if PD == "9" and mainmemory.read_u16_le(StoryFlag) ~= 0x0190 then

			mainmemory.write_u16_le(StoryFlag, 0x0160)
			mainmemory.write_u32_le(Location, 0xA8004348)

		end


	end


	if PD == "0" and mainmemory.read_u16_le(StoryFlag) == 0x0090 then																								-- PD Story Flag 1: First Permit Received

		console.writeline("[PD = 1] Time to meet Wayne.")
		PD = "1"

	end


	if PD == "1" and mainmemory.read_u16_le(StoryFlag) == 0x0098 then																								-- PD Story Flag 2: Met Wayne and Torres

		console.writeline("[PD = 2] Time to meet Ben.")
		PD = "2"

	end


	if PD == "2" and mainmemory.read_u16_le(StoryFlag) == 0x00A4 then																								-- PD Story Flag 3: Met Ben

		console.writeline("[PD = 3] The boss wants to see you.")
		PD = "3"

	end


	if PD == "3" and mainmemory.read_u32_le(Location) == 0xA80040C8 then																							-- PD Story Flag 4: 1st Visit Complete

		if mainmemory.readbyte(EventSkip) == 0x06 then

			mainmemory.write_u16_le(StoryFlag, 0x00DA)
			mainmemory.write_u32_le(Location, 0xA80041C8)
			console.writeline("[PD = 4] Second visit started, no need to visit the Museum.")
			PD = "4"

		elseif mainmemory.read_u16_le(StoryFlag) == 0x00B8 and mainmemory.readbyte(PumpSFXLoop) == 0x00 then

			mainmemory.write_u16_le(StoryFlag, 0x00DA)
			console.writeline("[PD = 4] Second visit started, no need to visit the Museum.")
			PD = "4"

		end


	end


	if PD == "4" and mainmemory.read_u16_le(StoryFlag) == 0x00E0 and mainmemory.read_u32_le(Location) == 0xA80041C8 then											-- PD Story Flag 5: 2nd Visit Complete / NYPD Battle Starts

		console.writeline("[PD = 5] Super Junk is required to activate 'NYPD Battle' at the entrance.")
		PD = "5"

	end


	if PD == "5" and mainmemory.read_u16_le(StoryFlag) == 0x0160 and mainmemory.read_u32_le(Location) == 0xA8004348 and											-- PD Story Flag 5: 2nd Visit Complete / NYPD Battle Starts
	mainmemory.read_u16_le(GameState) == 0x8000 and mainmemory.readbyte(GameClock) <= 0x03 then

		gui.pixelText(7, 4, "Aya requires the Super Junk to attract Eve to the Precinct.", "white", "0")

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[11] then

			console.writeline("[PD = 6] 'NYPD Battle' activated.")
			console.writeline("The fight by Wayne is disabled for accessibility at lower levels.")
			PD = "6"

		else console.writeline("Searching for Super Junk...")

		end


	end


	if PD == "6" and mainmemory.read_u16_le(StoryFlag) == 0x0190 then																								-- PD Story Flag 6: RIP Torres...

		console.writeline("[PD = 7] RIP Torres...")
		PD = "7"

	end


	if PD == "7" and mainmemory.read_u16_le(StoryFlag) == 0x01B8 then																								-- PD Story Flag 7: RIP Sheeva...

		console.writeline("[PD = 8] Find Maeda on the third floor.")
		PD = "8"

	end


	if PD == "8" and mainmemory.read_u32_le(Location) == 0xA80213C8 and mainmemory.read_u16_le(StoryFlag) == 0x01B8 and mainmemory.readbyte(AyaState) == 0x01 then	-- PD Story Flag 8: 4th Visit Complete

		console.writeline("[PD = 9] Precinct's story is complete.")
		PD = "9"
		mainmemory.writebyte(EventSkip, 0x04)

	end




	if mainmemory.read_u32_le(Location) == 0xA80203C8 and mainmemory.read_u16_le(GameState) == 0x8040 then															-- Restores Event Skip, prevents the battle in front of Wayne

		mainmemory.writebyte(EventSkip, 0x04)
		mainmemory.write_u16_le(BattleSkip, 0x8000)

	end


	if (mainmemory.read_u32_le(Location) == 0xA8020048 or mainmemory.read_u32_le(Location) == 0xA80210C8) and mainmemory.read_u16_le(GameState) == 0x8040 then		-- Turns battles back on after heading upstairs

		mainmemory.write_u16_le(BattleSkip, 0x0000)

	end




	if PD ~= "6" and PD ~= "7" and PD ~= "8" and PD ~= "9" and mainmemory.read_u32_le(Location) == 0xA80203C8 then													-- Fixes early Weapons Storage unlock

		mainmemory.write_u32_le(Location, 0xA80050C8)

	end




	if mainmemory.read_u32_le(Location) == 0xA8020448 or mainmemory.read_u32_le(Location) == 0xA80213C8 then														-- Prevents Event Skip at Torres's death and D4 Maeda to fix prompts and item spawn

		mainmemory.writebyte(EventSkip, 0x00)

	end




	if PD == "7" and mainmemory.read_u32_le(Location) == 0xA8065148 and mainmemory.read_u16_le(StoryFlag) == 0x01B0 then											-- Skips Day 4 title card

		mainmemory.write_u32_le(Location, 0xA8009448)
		mainmemory.write_u16_le(StoryFlag, 0x01B0)

	end




	if PD == "9" and mainmemory.read_u32_le(Location) == 0xA8004348 and mainmemory.read_u16_le(GameState) == 0x8000 then											-- Allows Backtrack Warp for NYPD Battle

		gui.pixelText(7, 4, "L1+R1+Circle can be used to revisit 'NYPD Battle'. Remember to loot bodies!", "white", "0")
		
		if mainmemory.read_u32_le(CurrentInput) == 0x0000004C then
		
			mainmemory.write_u16_le(StoryFlag, 0x0190)
			mainmemory.write_u32_le(Location, 0xA80201C8)

		end


	end



	if PD == "9" and mainmemory.read_u32_le(Location) == 0xA80203C8 and mainmemory.read_u16_le(StoryFlag) == 0x0160 then											-- Reverts hall before Wayne if leaving late-game Wayne on past Precinct

		mainmemory.write_u32_le(Location, 0xA80050C8)

	end


	if PD == "9" and (mainmemory.read_u32_le(Location) == 0xA8005148 or mainmemory.read_u32_le(Location) == 0xA8020448) then										-- Fixes late-game Wayne in other story flags

		mainmemory.write_u32_le(Location, 0xA8004448)

	end


	if PD == "9" and mainmemory.read_u32_le(Location) == 0xA8004248 then																							-- Kerberos on revisit sends player to World Map instead

		console.writeline("No, you can not pet the dog.")
		console.writeline("Warping back to World Map for convenience.")
		mainmemory.write_u16_le(GameState, 0x8040)																														-- Restores game's state
		mainmemory.writebyte(AyaState, 0x03)																															-- Restores Aya's state
		mainmemory.write_u32_le(CurrentInput, 0x00000000)																												-- Reset inputs, prevents infinite map warp loop
		mainmemory.write_u32_le(Location, 0xA8000048)																													-- World Map location

	end


	if PD == "9" and mainmemory.read_u32_le(Location) == 0xA8004448 and mainmemory.read_u16_le(GameState) == 0x8000 then											-- Displays Wayne's current junk total

		local WayneCurrentJunk = mainmemory.read_u16_le(WayneJunkTotal)
		gui.pixelText(7, 4, "Wayne's Junk Pile: " .. WayneCurrentJunk .. " / 300", "white", "0")

	end




	if PD == "4" and (mainmemory.read_u32_le(Location) == 0xA8004148 or mainmemory.read_u32_le(Location) == 0xA80041C8) and											-- Fixes missing music from event changes after Press Conference
	mainmemory.readbyte(AyaState) == 0x02 and mainmemory.readbyte(BGMVolume) == 0x00 then

		mainmemory.writebyte(BGMFadeTimer, 0x00)
		mainmemory.write_u16_le(BGMVolume, 0x007F)

	end


	if (mainmemory.read_u32_le(Location) == 0xA80050C8 or mainmemory.read_u32_le(Location) == 0xA80203C8) and mainmemory.readbyte(BGMFadeTimer) ~= 0x00 and			-- Slows BGM within Weapons Department
	(mainmemory.read_u16_le(StoryFlag) <= 0x017F or mainmemory.read_u16_le(StoryFlag) >= 0x0190) then

		mainmemory.writebyte(BGMFadeTimer, 0x00)
		mainmemory.write_u16_le(BGMVolume, 0x007F)
		
		if mainmemory.read_u16_le(BGMTempo) == 0x6EEF then

			mainmemory.write_u16_le(BGMTempo, 0x6EEF)

		else mainmemory.write_u16_le(BGMTempo, 0x4F5C) end
		
	end


	if (mainmemory.read_u32_le(Location) == 0xA8005148 or mainmemory.read_u32_le(Location) == 0xA8004448) and mainmemory.read_u16_le(BGMTempo) ~= 0x2F9E and
	(mainmemory.read_u16_le(StoryFlag) <= 0x017F or mainmemory.read_u16_le(StoryFlag) >= 0x0190) and mainmemory.read_u16_le(GameState) == 0x8000 then

		mainmemory.write_u16_le(BGMTempo, 0x2F9E)
		mainmemory.write_u16_le(BGMVolume, 0x007F)

	end




-- [ Open-World: Central Park ] --

	if (mainmemory.read_u32_le(Location) == 0xA8005448 or mainmemory.read_u32_le(Location) == 0xA8067248) and														-- Entrance Handler: Central Park
	(mainmemory.read_u16_le(StoryFlag) ~= 0x011B and mainmemory.read_u16_le(StoryFlag) ~= 0x011C and mainmemory.read_u16_le(StoryFlag) ~= 0x0120) then

		mainmemory.write_u32_le(Location, 0xA8067248)

		if CP == "0" then

			mainmemory.write_u16_le(StoryFlag, 0x00E4)

		end


		if CP == "1" then

			mainmemory.write_u16_le(StoryFlag, 0x00E8)

		end


		if CP == "2" then

			mainmemory.write_u16_le(StoryFlag, 0x00F8)

		end


	end


	if CP == "2" and mainmemory.read_u32_le(Location) == 0xA8067248 and
	(mainmemory.read_u16_le(StoryFlag) == 0x011C or mainmemory.read_u16_le(StoryFlag) == 0x0120) then																-- Entrance Handler: Ben Reunited Unskipped Event Fix

		mainmemory.write_u32_le(Location, 0xA8005448)

	end


	if CP == "0" and mainmemory.read_u32_le(Location) == 0xA80054C8 then																							-- CP Story Flag 1: Reassuring Daniel You Got This

		console.writeline("[CP = 1] Completing Central Park will unlock access to Soho.")
		CP = "1"
		mainmemory.write_u16_le(StoryFlag, 0x00E8)

	end


	if CP == "1" and mainmemory.read_u16_le(StoryFlag) == 0x00F8 then																								-- CP Story Flag 2: Eve Flees from Ampitheatre

		console.writeline("[CP = 2]")
		CP = "2"

	end


	if CP == "2" and mainmemory.read_u16_le(StoryFlag) == 0x0140 then																								-- CP Story Flag 3: Aya's Reflection

		console.writeline("[CP = 3] Central Park's story is complete. Soho is now unlocked!")
		CP = "3"

	end


	if mainmemory.read_u32_le(Location) == 0xA80650C8 and mainmemory.read_u16_le(StoryFlag) == 0x0138 then															-- Skips Day 3 title card

		mainmemory.write_u16_le(StoryFlag, 0x0140)
		mainmemory.write_u32_le(Location, 0xA8009148)

	end




-- [ Open-World: Soho ] --

	if mainmemory.read_u32_le(Location) == 0xA8009348 then																											-- Entrance Handler: Soho

		if SH ~= "0" then

			mainmemory.write_u16_le(StoryFlag, 0x0148)

		end


	end


	if SH == "0" and mainmemory.read_u16_le(StoryFlag) == 0x0148 then																								-- SH Story Flag 1: Reunion

		console.writeline("[SH = 1]")
		SH = "1"

	end


	if mainmemory.read_u32_le(Location) == 0xA80091C8 and mainmemory.readbyte(GameClock) <= 0x03 then																-- SH Story Flag 2: InvCheck for Weapon Memo in Center of Map

		mainmemory.writebyte(SHCarLock, 0x3A)																															-- Ensures you can still leave Soho by activating Daniel's car

		if SH == "1" then

			local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
			local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
			local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
			local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
			local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
			local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
			local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
			local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
			local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
			local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
			local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
			local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
			local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
			local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
			local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
			local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
			local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
			local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
			local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
			local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
			local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
			local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
			local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
			local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
			local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
			local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
			local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
			local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
			local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
			local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
			local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
			local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
			local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
			local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
			local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
			local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
			local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
			local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
			local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
			local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
			local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
			local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
			local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
			local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
			local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
			local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
			local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
			local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
			local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
			local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

			local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
			AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
			AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
			AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
			AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
			AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
			AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

			if Inventory[216] then

				console.writeline("[SH = 2] Weapon Memo detected! Now Daniel can LEGALLY break in!")
				SH = "2"

			else console.writeline("Searching for Weapon Memo...")

			end


		end


	end


	if SH == "2" and mainmemory.read_u32_le(Location) == 0xA8009248 and mainmemory.read_u32_le(0x0A318C) == 0x10000004 then											-- SH Story Flag 3: Daniel's Gunshot

		console.writeline("[SH = 3] Soho's story is complete. All checks here are now available.")
		SH = "3"

	end




	if mainmemory.read_u32_le(Location) == 0xA8009248 then																											-- Notifies the player of the new Gun Shop lock

		if SH == "1" then

			mainmemory.writebyte(SHCarLock, 0x00)
			gui.pixelText(7, 4, "Daniel now requires a Weapon Memo to shoot open Sam's Gun Shop.", "white", "0")

			if mainmemory.read_u16_le(0x09D394) == 0x8420 then																											-- Can't prevent a soft lock from the event at any story flag, so Aya is warped away instead if the player doesn't listen

				console.writeline("Access denied. Returning to the previous room.")
				mainmemory.write_u32_le(Location, 0xA80091C8)

			end


		elseif SH == "2" then																																			-- Allows the entrance to be shot, story flag 3 unlocks this address to break the door

			mainmemory.writebyte(SHCarLock, 0x12)

		end


	end
	



-- [ Open-World: Hospital ] --

	if mainmemory.read_u32_le(Location) == 0xA80222C8 and mainmemory.read_u16_le(StoryFlag) ~= 0x0134 then															-- Entrance Handler: Hospital, Story Flag Exception Prevents Flashback Warping

		if HS == "0" then																																				-- Talk to Maeda if you haven't been here before

			mainmemory.write_u16_le(StoryFlag, 0x01CC)

		end


		if HS == "1" then																																			-- You no longer have to talk to Maeda

			mainmemory.write_u16_le(StoryFlag, 0x01D0)

		end


		if HS == "2" or HS == "3" or HS == "4" then

			mainmemory.write_u16_le(StoryFlag, 0x01D6)

		end


		if HS == "5" then

			mainmemory.write_u16_le(StoryFlag, 0x01E8)

		end


		if HS == "6" then

			mainmemory.write_u16_le(StoryFlag, 0x01EB)

		end


		if HS == "7" then

			mainmemory.write_u16_le(StoryFlag, 0x01EE)

		end


		if HS == "8" then

			mainmemory.write_u16_le(StoryFlag, 0x01FC)

		end


		if HS == "9" then

			mainmemory.write_u16_le(StoryFlag, 0x0220)

		end


	end




	if mainmemory.read_u32_le(Location) == 0xA80223C8 and mainmemory.read_u16_le(GameState) == 0x8000 then															-- Transition Handler: 1F  Elevator Hall

		if HS == "0" or HS == "1" or HS == "2" or HS == "3" or HS == "4" or HS == "5" then																				-- Alert the player of the Green Cardkey softlock

			gui.pixelText(7, 4, "Green Cardkey cannot be used until you save the trapped nurses on this floor.", "white", "0")

		end


		if HS == "2" or HS == "3" or HS == "4" then																													-- Power outage, warp the player to the basement

			console.writeline("Elevator is down, warping to the basement...")
			console.writeline("A service technician has been notified.")
			mainmemory.write_u32_le(Location, 0xA8062048)

		end


	end




	if HS == "0" and mainmemory.read_u32_le(HSBasementLock) == 0x20000000 then																						-- HS Story Flag 1: Okay, Okay, Maeda

		console.writeline("[HS = 1] This place looks familiar...")
		console.writeline("Disabling the green card reader to prevent a soft lock.")
		mainmemory.writebyte(HSGreenCardLock, 0x10)
		HS = "1"

	end


	if HS == "0" and mainmemory.read_u16_le(StoryFlag) == 0x01D6 then																								-- HS Story Flag 2: Hospital Blackout (Full Inventory Failsafe)

		console.writeline("[HS = 2] Maeda's still waiting to give you his item.")
		console.writeline("You can use a Save-Warp to escape the basement.")
		HS = "2"

	end


	if HS == "1" and mainmemory.read_u16_le(StoryFlag) == 0x01D6 then																								-- HS Story Flag 2: Hospital Blackout

		console.writeline("[HS = 2] You can use a Save-Warp to escape the basement.")
		HS = "2"

	end


	if HS == "2" and mainmemory.read_u32_le(Location) == 0xA80634C8 and mainmemory.read_u16_le(GameState) == 0x8040 then											-- HS Story Flag 3: Blue Cardkey Detection

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[210] and mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("[HS = 3] Card reader enabled!")
			mainmemory.write_u16_le(HSBasementLock, 0x000B)
			HS = "3"

		elseif mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("Blue Cardkey not present.")
			mainmemory.write_u16_le(HSBasementLock, 0x0000)

		end


	end


	if (HS == "3" or HS == "4") and mainmemory.read_u32_le(Location) == 0xA80634C8 and																				-- Blue Cardkey: Re-unlock to keep open during outage
	mainmemory.read_u16_le(GameState) == 0x8040 and mainmemory.readbyte(GameClock) <= 0x03 then

		console.writeline("The blue card reader remains active.")
		mainmemory.write_u16_le(HSBasementLock, 0x000B)

	end


	if HS == "3" and mainmemory.read_u32_le(Location) == 0xA8024248 and																								-- HS Story Flag 4: Fuse Detection
	mainmemory.read_u16_le(GameState) == 0x8040 and mainmemory.readbyte(GameClock) <= 0x03 then

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[206] and Inventory[207] and Inventory [208] and mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("[HS = 4] Fuses detected and work wirelessly now, wow!")
			mainmemory.write_u16_le(HSBasementLock, 0x7FCB)
			HS = "4"

		elseif mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("One or more fuses are missing. You will need all three.")
			mainmemory.write_u16_le(HSBasementLock, 0x000B)

		end


	end


	if HS == "4" and mainmemory.read_u32_le(Location) == 0xA8024248 and																								-- Fuse Lock: Maintain Activated Fuses in Outage
	mainmemory.read_u16_le(GameState) == 0x8040 and mainmemory.readbyte(GameClock) <= 0x03 then

		console.writeline("The fuse box has all three fuses. CAUTION: High Voltage!")
		mainmemory.write_u16_le(HSBasementLock, 0x7FCB)

	end


	if HS == "4" and mainmemory.read_u16_le(StoryFlag) == 0x01E8 then																								-- HS Story Flag 5: Power Detection

		console.writeline("[HS = 5] The power has been restored.")
		mainmemory.write_u16_le(HSBasementLock, 0xFFCB)
		HS = "5"

	end


	if HS == "5" and mainmemory.read_u16_le(StoryFlag) == 0x01EB then																								-- HS Story Flag 6: Flashback Realization

		console.writeline("[HS = 6] The green card reader has been enabled.")
		mainmemory.writebyte(HSGreenCardLock, 0x25)
		HS = "6"

	end


	if HS == "6" and mainmemory.read_u16_le(StoryFlag) == 0x01EE then																								-- HS Story Flag 7: Liquid Nitrogen Cut Off

		console.writeline("[HS = 7] Access to the 13th Floor has been granted.")
		HS = "7"

	end


	if mainmemory.read_u32_le(Location) == 0xA80680C8 and mainmemory.read_u16_le(StoryFlag) == 0x01FC then															-- HS Story Flag 8: Jet Sequence and Time Stop

		mainmemory.writebyte(HSJetTimer, 0x01)

		if HS == "7" then

			console.writeline("[HS = 8] ZA WARUDO!!!!")
			HS = "8"

		end


	end


	if HS == "8" and (mainmemory.read_u32_le(Location) == 0xA8004348 or mainmemory.read_u32_le(Location) == 0xA80201C8) then										-- HS Story Flag 9: Completion / World Map Warp

		console.writeline("[HS = 9] Hospital's story is complete.")
		HS = "9"
		mainmemory.write_u32_le(Location, 0xA8000048)

	end
	



	if AK == "0" and mainmemory.read_u32_le(Location) == 0xA80620C8 and mainmemory.read_u16_le(GameState) == 0x8040 then											-- Autopsy Lock: During Outage

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[209] and mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("Autopsy unlocked!")
			mainmemory.write_u16_le(HSBasementLock, 0x0001)

		elseif mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("Autopsy Key not present.")
			mainmemory.write_u16_le(HSBasementLock, 0x0000)

		end


	end


	if AK == "0" and mainmemory.read_u32_le(Location) == 0xA80623C8 and																								-- Autopsy Lock: When the key is thrown on the ground like the piece of trash it is.
	mainmemory.read_u16_le(GameState) == 0x8000 and mainmemory.readbyte(GameClock) <= 0x03 then

		console.writeline("[AK = 1] The Autopsy will remain unlocked without the key.")
		AK = "1"

	end


	if AK == "1" and mainmemory.read_u32_le(Location) == 0xA80620C8 and																								-- Autopsy Lock: Post-Unlock
	mainmemory.read_u16_le(GameState) == 0x8040 and mainmemory.readbyte(GameClock) <= 0x03 then

		console.writeline("Autopsy remains unlocked!")
		mainmemory.write_u16_le(HSBasementLock, 0x0009)

	end


	if AK == "0" and mainmemory.read_u32_le(Location) == 0xA80231C8 and mainmemory.read_u16_le(GameState) == 0x8040 then											-- Autopsy Lock: Pre-Unlock and Post-Outage

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[209] and mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("Autopsy Key detected! The door will now remain unlocked.")
			AK = "1"

		elseif mainmemory.readbyte(GameClock) <= 0x03 then

			console.writeline("Autopsy Key not present.")

		end


	end


	if AK == "0" and mainmemory.read_u32_le(Location) == 0xA8024048 then																							-- Autopsy Lock: Custom Powered Lock

		gui.pixelText(7, 4, "Autopsy Key is required to progress.", "white", "0")

		if mainmemory.read_u16_le(GameState) == 0x8000 then

			mainmemory.write_u32_le(Location, 0xA80231C8)

		end

	end


	if (HS == "2" or HS == "3" or HS == "4") and mainmemory.read_u32_le(Location) == 0xA8024048 then																-- Autopsy: Restores Outage State from Crematory

		mainmemory.write_u32_le(Location, 0xA80623C8)

	end


	if (HS == "5" or HS == "6" or HS == "7" or HS == "8" or HS == "9") and mainmemory.read_u32_le(Location) == 0xA80623C8 then										-- Autopsy: Restores Powered State from Crematory

		mainmemory.write_u16_le(HSBasementLock, 0xFFEF)
		mainmemory.write_u32_le(Location, 0xA8024048)

	end


	if mainmemory.read_u32_le(Location) == 0xA80240C8 then																											-- Forces Outage-Variant of Crematory to Fix Pickups

		mainmemory.write_u16_le(HSBasementLock, 0x0009)
		mainmemory.write_u32_le(Location, 0xA8062448)

	end




	if HS == "6" and mainmemory.read_u32_le(Location) == 0xA80223C8 and mainmemory.read_u16_le(GameState) == 0x8000 then											-- Hospital Warp to Basement if Locked Out of Elevator

		gui.pixelText(7, 4, "You can use L1+R1+Circle to warp back to the basement.", "white", "0")

		if mainmemory.read_u32_le(CurrentInput) == 0x0000004C then

			mainmemory.write_u16_le(GameState, 0x8000)
			mainmemory.writebyte(AyaState, 0x00)
			mainmemory.write_u32_le(CurrentInput, 0x00000000)
			mainmemory.write_u32_le(Location, 0xA80224C8)
			mainmemory.writebyte(HSGreenCardLock, 0x00)

		end


	end




	if mainmemory.read_u32_le(Location) == 0xA80250C8 then																											-- Concept: Rando Goal / CB Status Display

		if (mainmemory.read_u16_le(GameState) == 0x8080 or mainmemory.read_u16_le(GameState) == 0x8084) and
		(mainmemory.readbyte(AyaState) == 0x00 or mainmemory.readbyte(AyaState) == 0x08) then

			gui.pixelText(7, 4, "The Chrysler Building is dormant... U.B. is your end goal.", "red", "0")

		else gui.pixelText(7, 4, "") end

	end




	-- [ Open-World: Chinatown ] --

	if mainmemory.read_u32_le(Location) == 0xA80260C8 then																											-- Entrance Handler: Chinatown

		if CT == "0" then

			mainmemory.write_u16_le(StoryFlag, 0x0228)

		end


		if CT == "1" then

			mainmemory.write_u16_le(StoryFlag, 0x0230)

		end


		if CT == "2" or CT == "3" then

			mainmemory.write_u16_le(StoryFlag, 0x0248)

		end


		if CT == "4" then

			mainmemory.write_u16_le(StoryFlag, 0x0254)

		end


	end




	if CT == "0" and mainmemory.read_u32_le(Location) == 0xA80262C8 and mainmemory.read_u16_le(StoryFlag) == 0x0230 then											-- CT Story Flag 1: Post-Maeda

		console.writeline("[CT = 1] ... After you.")
		CT = "1"

	end


	if (CT == "0" or CT == "1") and mainmemory.read_u32_le(Location) == 0xA8027248 and mainmemory.read_u16_le(StoryFlag) == 0x0248 then								-- CT Story Flag 2: Found the Slime

		console.writeline("[CT = 2] Reminder: You'll need the Pump Key now to progress.")
		CT = "2"

	end


	if CT == "2" and mainmemory.read_u32_le(Location) == 0xA8027348 and mainmemory.read_u16_le(GameState) == 0x8000 then											-- CT Story Flag 3: Pump Key Search

		gui.pixelText(7, 4, "[S] The Pump Key is now required to activate the Pumping Station here.", "white", "0")
		mainmemory.writebyte(PumpSFXLoop, 0x8C)
		mainmemory.write_u32_le(CTSewersPumpLock, 0x05400001)

		if mainmemory.readbyte(GameClock) <= 0x03 then

			local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
			local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
			local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
			local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
			local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
			local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
			local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
			local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
			local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
			local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
			local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
			local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
			local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
			local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
			local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
			local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
			local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
			local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
			local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
			local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
			local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
			local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
			local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
			local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
			local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
			local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
			local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
			local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
			local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
			local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
			local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
			local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
			local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
			local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
			local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
			local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
			local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
			local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
			local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
			local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
			local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
			local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
			local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
			local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
			local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
			local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
			local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
			local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
			local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
			local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

			local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
			AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
			AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
			AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
			AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
			AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
			AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

			if Inventory[212] then

				console.writeline("[CT = 3] Key detected! You can now activate the Pumping Station!")
				CT = "3"

			else console.writeline("Searching for Pump Key...")

			end


		end


	end


	if CT == "3" and mainmemory.read_u32_le(Location) == 0xA8028048 and mainmemory.read_u16_le(StoryFlag) == 0x0254 then

		console.writeline("[CT = 4] Chinatown's story is complete.")
		CT = "4"

	end




	if CT == "0" and mainmemory.read_u32_le(Location) == 0xA80262C8 and mainmemory.read_u16_le(StoryFlag) ~= 0x0228 then											-- Maeda Fix for Backwards CT Sewers

		mainmemory.write_u16_le(StoryFlag, 0x0228)

	end


	if (CT == "0" or CT == "1" or CT == "2") and mainmemory.read_u32_le(Location) == 0xA80260C8 and mainmemory.readbyte(AyaState) == 0x00 then						-- Early Notification of New Pump Key Requirement

		gui.pixelText(7, 4, "Subway access requires Pump Key through the sewers or Gate Key on the map.", "white", "0")

	end




	-- [ Open-World: Subway ] --

	if mainmemory.read_u32_le(Location) == 0xA80281C8 and mainmemory.read_u16_le(StoryFlag) ~= 0x0254 then															-- Entrance Handler: Subway

		mainmemory.write_u16_le(StoryFlag, 0x0254)

	end




	if SW == "0" and mainmemory.read_u32_le(Location) == 0xA80280C8 and mainmemory.readbyte(GameClock) <= 0x03 then

		console.writeline("[SW = 1] Phew! Made it!")
		SW = "1"

	end


	if mainmemory.read_u32_le(Location) == 0xA8029048 and mainmemory.read_u16_le(StoryFlag) == 0x258 then															-- Disc Change Removal for Subway

		console.writeline("[SW = 2] Subway's story is complete. No disc change necessary here.")
		mainmemory.write_u16_le(StoryFlag, 0x0254)
		SW = "2"

	end




	-- [ Open-World: Warehouse ] --

	if WH == "0" and mainmemory.read_u32_le(Location) == 0xA8046348 and mainmemory.readbyte(GameClock) <= 0x03 then													-- WH Story Flag 1: Because OF COURSE the Key Doesn't Work

		local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
		local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
		local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
		local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
		local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
		local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
		local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
		local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
		local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
		local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
		local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
		local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
		local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
		local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
		local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
		local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
		local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
		local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
		local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
		local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
		local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
		local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
		local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
		local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
		local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
		local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
		local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
		local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
		local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
		local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
		local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
		local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
		local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
		local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
		local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
		local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
		local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
		local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
		local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
		local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
		local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
		local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
		local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
		local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
		local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
		local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
		local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
		local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
		local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
		local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

		local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
		AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
		AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
		AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
		AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
		AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
		AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

		if Inventory[220] then

			console.writeline("[WH = 1] Key detected! You can now proceed.")
			WH = "1"
			mainmemory.writebyte(WarehouseLock, 0x02)

		else console.writeline("Searching for Warehouse Key...")
		mainmemory.writebyte(WarehouseLock, 0x00)

		end


	end




	-- [ Open-World: Museum ] --

	if mainmemory.read_u32_le(Location) == 0xA8029148 and mainmemory.read_u16_le(StoryFlag) ~= 0x0298 then															-- Entrance Handler: Museum, Includes Endgame Cutscene Exception

		if MU == "0" or MU == "1" or MU == "2" then

			mainmemory.write_u16_le(StoryFlag, 0x0258)
			gui.pixelText(7, 4, "To get to Eve on the 4th Floor, you'll need all three of Maeda's luck charms.", "white", "0")

		end


		if MU == "3" or MU == "4" then

			mainmemory.write_u16_le(StoryFlag, 0x0278)

		end


	end




	if MU == "0" and mainmemory.read_u32_le(Location) == 0xA80433C8 then																							-- MU Story Flag 1: Security Room

		console.writeline("[MU = 1] The security room. Finally.")
		MU = "1"

	end


	if MU == "1" and mainmemory.read_u32_le(Location) == 0xA8064248 then																							-- MU Story Flag 2: Klamp's Climax

		console.writeline("[MU = 2] Wait, that's not Klamp.")
		MU = "2"

	end


	if MU == "2" and mainmemory.read_u32_le(Location) == 0xA80452C8 and mainmemory.readbyte(AyaState) == 0x00 then													-- MU Story Flag 3: Before T-Rex

		console.writeline("[MU = 3] Mitochondria has replenished your HP and PE I guess?")
		MU = "3"

	end


	if MU == "3" and mainmemory.read_u32_le(Location) == 0xA8044348 and mainmemory.read_u16_le(GameState) == 0x8000 and mainmemory.readbyte(AyaState) == 0x00 then	-- Endgame Lock: 3 Good Luck Charm Requirements

		gui.pixelText(7, 4, "Aya will need an insane amount of LUCK to climb these stairs.", "white", "0")
		mainmemory.write_u16_le(BattleSkip, 0x8000)

		if mainmemory.readbyte(0x00E304) == 0x00 then

			mainmemory.writebyte(0x09D3A4, 0x01)

		elseif mainmemory.readbyte(0x00E304) ~= 0x00 then

			mainmemory.writebyte(0x09D3A4, 0x00)

		end

		if mainmemory.readbyte(GameClock) <= 0x03 then

			local AyaInv01	=	mainmemory.read_u16_le(0x0C0E48)
			local AyaInv02	=	mainmemory.read_u16_le(0x0C0E4A)
			local AyaInv03	=	mainmemory.read_u16_le(0x0C0E4C)
			local AyaInv04	=	mainmemory.read_u16_le(0x0C0E4E)
			local AyaInv05	=	mainmemory.read_u16_le(0x0C0E50)
			local AyaInv06	=	mainmemory.read_u16_le(0x0C0E52)
			local AyaInv07	=	mainmemory.read_u16_le(0x0C0E54)
			local AyaInv08	=	mainmemory.read_u16_le(0x0C0E56)
			local AyaInv09	=	mainmemory.read_u16_le(0x0C0E58)
			local AyaInv10	=	mainmemory.read_u16_le(0x0C0E5A)
			local AyaInv11	=	mainmemory.read_u16_le(0x0C0E5C)
			local AyaInv12	=	mainmemory.read_u16_le(0x0C0E5E)
			local AyaInv13	=	mainmemory.read_u16_le(0x0C0E60)
			local AyaInv14	=	mainmemory.read_u16_le(0x0C0E62)
			local AyaInv15	=	mainmemory.read_u16_le(0x0C0E64)
			local AyaInv16	=	mainmemory.read_u16_le(0x0C0E66)
			local AyaInv17	=	mainmemory.read_u16_le(0x0C0E68)
			local AyaInv18	=	mainmemory.read_u16_le(0x0C0E6A)
			local AyaInv19	=	mainmemory.read_u16_le(0x0C0E6C)
			local AyaInv20	=	mainmemory.read_u16_le(0x0C0E6E)
			local AyaInv21	=	mainmemory.read_u16_le(0x0C0E70)
			local AyaInv22	=	mainmemory.read_u16_le(0x0C0E72)
			local AyaInv23	=	mainmemory.read_u16_le(0x0C0E74)
			local AyaInv24	=	mainmemory.read_u16_le(0x0C0E76)
			local AyaInv25	=	mainmemory.read_u16_le(0x0C0E78)
			local AyaInv26	=	mainmemory.read_u16_le(0x0C0E7A)
			local AyaInv27	=	mainmemory.read_u16_le(0x0C0E7C)
			local AyaInv28	=	mainmemory.read_u16_le(0x0C0E7E)
			local AyaInv29	=	mainmemory.read_u16_le(0x0C0E80)
			local AyaInv30	=	mainmemory.read_u16_le(0x0C0E82)
			local AyaInv31	=	mainmemory.read_u16_le(0x0C0E84)
			local AyaInv32	=	mainmemory.read_u16_le(0x0C0E86)
			local AyaInv33	=	mainmemory.read_u16_le(0x0C0E88)
			local AyaInv34	=	mainmemory.read_u16_le(0x0C0E8A)
			local AyaInv35	=	mainmemory.read_u16_le(0x0C0E8C)
			local AyaInv36	=	mainmemory.read_u16_le(0x0C0E8E)
			local AyaInv37	=	mainmemory.read_u16_le(0x0C0E90)
			local AyaInv38	=	mainmemory.read_u16_le(0x0C0E92)
			local AyaInv39	=	mainmemory.read_u16_le(0x0C0E94)
			local AyaInv40	=	mainmemory.read_u16_le(0x0C0E96)
			local AyaInv41	=	mainmemory.read_u16_le(0x0C0E98)
			local AyaInv42	=	mainmemory.read_u16_le(0x0C0E9A)
			local AyaInv43	=	mainmemory.read_u16_le(0x0C0E9C)
			local AyaInv44	=	mainmemory.read_u16_le(0x0C0E9E)
			local AyaInv45	=	mainmemory.read_u16_le(0x0C0EA0)
			local AyaInv46	=	mainmemory.read_u16_le(0x0C0EA2)
			local AyaInv47	=	mainmemory.read_u16_le(0x0C0EA4)
			local AyaInv48	=	mainmemory.read_u16_le(0x0C0EA6)
			local AyaInv49	=	mainmemory.read_u16_le(0x0C0EA8)
			local AyaInv50	=	mainmemory.read_u16_le(0x0C0EAA)

			local Inventory = Set { AyaInv01, AyaInv02, AyaInv03, AyaInv04, AyaInv05, AyaInv06,
			AyaInv07, AyaInv08, AyaInv09, AyaInv10, AyaInv11, AyaInv12, AyaInv13, AyaInv14,
			AyaInv15, AyaInv16, AyaInv17, AyaInv18, AyaInv19, AyaInv20, AyaInv21, AyaInv22,
			AyaInv23, AyaInv24, AyaInv25, AyaInv26, AyaInv27, AyaInv28, AyaInv29, AyaInv30,
			AyaInv31, AyaInv32, AyaInv33, AyaInv34, AyaInv35, AyaInv36, AyaInv37, AyaInv38,
			AyaInv39, AyaInv40, AyaInv41, AyaInv42, AyaInv43, AyaInv44, AyaInv45, AyaInv46,
			AyaInv47, AyaInv48, AyaInv49, AyaInv50 }

			if Inventory[203] and Inventory[204] and Inventory[205] then

				console.writeline("[MU = 4] The base game's end sequence lies beyond this point.")
				console.writeline("You won't be able to save-warp until the Cruiser, so prepare yourself.")
				mainmemory.writebyte(0x09D3A4, 0x01)
				MU = "4"

			else console.writeline("Searching for Maeda's charms (Narita, Mayoke, and Hamaya)...")

			end


		end


	end


	if MU == "4" and (mainmemory.read_u32_le(Location) == 0xA8044348 or mainmemory.read_u32_le(Location) == 0xA8044448) and											-- Endgame Lock: Battle After Unlock
	mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.readbyte(AyaState) == 0x00 then

		mainmemory.write_u16_le(BattleSkip, 0x0000)

	end


	if MU == "3" and mainmemory.read_u32_le(Location) == 0xA80442C8 and mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.readbyte(AyaState) == 0x00 then		-- Reactivates Battles Before Endgame Lock

		mainmemory.write_u16_le(BattleSkip, 0x0000)

	end




	if mainmemory.read_u32_le(Location) == 0xA80433C8 and mainmemory.read_u16_le(MUPrimaryLock) == 0x00B4 then														-- Deactivates Security When Pressed, Fixing Save-Warp

		mainmemory.write_u16_le(MUPrimaryLock, 0x00B7)

	end


	if MU == "1" and (mainmemory.read_u32_le(Location) == 0xA8042048 or mainmemory.read_u32_le(Location) == 0xA80441C8) then										-- Warns Player of Item Check Removal

		gui.pixelText(7, 4, "Defeating bosses removes checks in Klamp's office, visit him first.", "white", "0")

	end




	if mainmemory.readbyte(0x0BCEB8) >= 0x11 and mainmemory.readbyte(0x0BCEB8) ~= 0x6C and mainmemory.readbyte(0x0BCEB8) ~= 0xFF and								-- Event Skip aboard the Namitz
	mainmemory.read_u16_le(StoryFlag) == 0x02A8 then

		gui.pixelText(7, 4, "Press TRIANGLE then continue dialogue to skip the missile sequence.", "lime", "0")

		if mainmemory.read_u32_le(CurrentInput) == 0x00000010 then

			gui.pixelText(7, 4, "")
			gui.clearGraphics()
			mainmemory.write_u16_le(StoryFlag, 0x02C6)
			mainmemory.write_u32_le(Location, 0xA80470C8)

		end


	end




	if mainmemory.read_u32_le(Location) == 0xA80471C8 and mainmemory.readbyte(EventSkip) ~= 0x00 then																-- Removes Eve 3/4 Event Skip

		mainmemory.writebyte(EventSkip, 0x00)

	end


	if mainmemory.read_u32_le(Location) == 0xA8083148 and mainmemory.readbyte(EventSkip) == 0x00 then

		mainmemory.writebyte(EventSkip, 0x04)

	end



-- [ Open World: Cruiser ] --

	if mainmemory.read_u32_le(Location) == 0xA8000348 then																											-- Faster Ending

		mainmemory.write_u16_le(StoryFlag, 0x02F2)
		mainmemory.write_u32_le(Location, 0xA8005048)
		console.writeline("[GG] Thank you for playing!!")

	end




-- [ Menu / Parasite Energy Handler ] --

	if mainmemory.readbyte(MapTimeOfDay) == 0xE0 and (mainmemory.readbyte(GameClock) == 0x80 or mainmemory.readbyte(GameClock) == 0x81) then						-- Assigns Stats / PE every second or so

--		if SeedMinimumStats == Balanced then

--			mainmemory.write_u16_le(AyaOffenseStat, 0x0000)
--			mainmemory.write_u16_le(AyaDefenseStat, 0x0000)
--			mainmemory.write_u16_le(AyaStatusRStat, 0x0000)

--			if mainmemory.read_u16_le(AyaPEnergyStat) > 0x00FA then

--				mainmemory.write_u16_le(AyaPEnergyStat, 0x00FA)

--			end


--		end




		if mainmemory.readbyte(CurrentLevel) == 0x00 and CH == "0" then																									-- Level's PE

			PE = SeedPE01 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x00 and CH ~= "0" then																								-- Level's PE and Melissa's Awakening Spell

			PE = SeedPE01

		end


		if mainmemory.readbyte(CurrentLevel) == 0x01 and CH == "0" then

			PE = SeedPE02 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x01 and CH ~= "0" then

			PE = SeedPE02

		end


		if mainmemory.readbyte(CurrentLevel) == 0x02 and CH == "0" then

			PE = SeedPE03 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x02 and CH ~= "0" then

			PE = SeedPE03

		end


		if mainmemory.readbyte(CurrentLevel) == 0x03 and CH == "0" then

			PE = SeedPE04 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x03 and CH ~= "0" then

			PE = SeedPE04

		end


		if mainmemory.readbyte(CurrentLevel) == 0x04 and CH == "0" then

			PE = SeedPE05 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x04 and CH ~= "0" then

			PE = SeedPE05

		end


		if mainmemory.readbyte(CurrentLevel) == 0x05 and CH == "0" then

			PE = SeedPE06 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x05 and CH ~= "0" then

			PE = SeedPE06

		end


		if mainmemory.readbyte(CurrentLevel) == 0x06 and CH == "0" then

			PE = SeedPE07 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x06 and CH ~= "0" then

			PE = SeedPE07

		end


		if mainmemory.readbyte(CurrentLevel) == 0x07 and CH == "0" then

			PE = SeedPE08 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x07 and CH ~= "0" then

			PE = SeedPE08

		end


		if mainmemory.readbyte(CurrentLevel) == 0x08 and CH == "0" then

			PE = SeedPE09 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x08 and CH ~= "0" then

			PE = SeedPE09

		end


		if mainmemory.readbyte(CurrentLevel) == 0x09 and CH == "0" then

			PE = SeedPE10 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x09 and CH ~= "0" then

			PE = SeedPE10

		end


		if mainmemory.readbyte(CurrentLevel) == 0x0A and CH == "0" then

			PE = SeedPE11 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x0A and CH ~= "0" then

			PE = SeedPE11

		end


		if mainmemory.readbyte(CurrentLevel) == 0x0B and CH == "0" then

			PE = SeedPE12 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x0B and CH ~= "0" then

			PE = SeedPE12

		end


		if mainmemory.readbyte(CurrentLevel) == 0x0C and CH == "0" then

			PE = SeedPE13 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x0C and CH ~= "0" then

			PE = SeedPE13

		end


		if mainmemory.readbyte(CurrentLevel) == 0x0D and CH == "0" then

			PE = SeedPE14 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x0D and CH ~= "0" then

			PE = SeedPE14

		end


		if mainmemory.readbyte(CurrentLevel) == 0x0E and CH == "0" then

			PE = SeedPE15 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x0E and CH ~= "0" then

			PE = SeedPE15

		end


		if mainmemory.readbyte(CurrentLevel) == 0x0F and CH == "0" then

			PE = SeedPE16 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x0F and CH ~= "0" then

			PE = SeedPE16

		end


		if mainmemory.readbyte(CurrentLevel) == 0x10 and CH == "0" then

			PE = SeedPE17 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x10 and CH ~= "0" then

			PE = SeedPE17

		end


		if mainmemory.readbyte(CurrentLevel) == 0x11 and CH == "0" then

			PE = SeedPE18 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x11 and CH ~= "0" then

			PE = SeedPE18

		end


		if mainmemory.readbyte(CurrentLevel) == 0x12 and CH == "0" then

			PE = SeedPE19 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x12 and CH ~= "0" then

			PE = SeedPE19

		end


		if mainmemory.readbyte(CurrentLevel) == 0x13 and CH == "0"  then

			PE = SeedPE20 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x13 and CH ~= "0" then

			PE = SeedPE20

		end


		if mainmemory.readbyte(CurrentLevel) == 0x14 and CH == "0" then

			PE = SeedPE21 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x14 and CH ~= "0" then

			PE = SeedPE21

		end


		if mainmemory.readbyte(CurrentLevel) == 0x15 and CH == "0" then
			PE = SeedPE22 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x15 and CH ~= "0" then

			PE = SeedPE22

		end


		if mainmemory.readbyte(CurrentLevel) == 0x16 and CH == "0" then

			PE = SeedPE23 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x16 and CH ~= "0" then

			PE = SeedPE23

		end


		if mainmemory.readbyte(CurrentLevel) == 0x17 and CH == "0" then

			PE = SeedPE24 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x17 and CH ~= "0" then

			PE = SeedPE24

		end


		if mainmemory.readbyte(CurrentLevel) == 0x18 and CH == "0" then

			PE = SeedPE25 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x18 and CH ~= "0" then

			PE = SeedPE25

		end


		if mainmemory.readbyte(CurrentLevel) == 0x19 and CH == "0" then

			PE = SeedPE26 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x19 and CH ~= "0" then

			PE = SeedPE26

		end


		if mainmemory.readbyte(CurrentLevel) == 0x1A and CH == "0" then

			PE = SeedPE27 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x1A and CH ~= "0" then

			PE = SeedPE27

		end


		if mainmemory.readbyte(CurrentLevel) == 0x1B and CH == "0" then

			PE = SeedPE28 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x1B and CH ~= "0" then

			PE = SeedPE28

		end


		if mainmemory.readbyte(CurrentLevel) == 0x1C and CH == "0" then

			PE = SeedPE29 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x1C and CH ~= "0" then

			PE = SeedPE29

		end


		if mainmemory.readbyte(CurrentLevel) == 0x1D and CH == "0" then

			PE = SeedPE30 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x1D and CH ~= "0" then

			PE = SeedPE30

		end


		if mainmemory.readbyte(CurrentLevel) == 0x1E and CH == "0" then

			PE = SeedPE31 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x1E and CH ~= "0" then

			PE = SeedPE31

		end


		if mainmemory.readbyte(CurrentLevel) == 0x1F and CH == "0" then

			PE = SeedPE32 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x1F and CH ~= "0" then

			PE = SeedPE32

		end


		if mainmemory.readbyte(CurrentLevel) == 0x20 and CH == "0" then

			PE = SeedPE33 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x20 and CH ~= "0" then

			PE = SeedPE33

		end


		if mainmemory.readbyte(CurrentLevel) == 0x21 and CH == "0" then

			PE = SeedPE34 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x21 and CH ~= "0" then

			PE = SeedPE34

		end


		if mainmemory.readbyte(CurrentLevel) == 0x22 and CH == "0" then

			PE = SeedPE35 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x22 and CH ~= "0" then

			PE = SeedPE35

		end


		if mainmemory.readbyte(CurrentLevel) == 0x23 and CH == "0" then

			PE = SeedPE36 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x23 and CH ~= "0" then

			PE = SeedPE36

		end


		if mainmemory.readbyte(CurrentLevel) == 0x24 and CH == "0" then

			PE = SeedPE37 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x24 and CH ~= "0"  then

			PE = SeedPE37

		end


		if mainmemory.readbyte(CurrentLevel) == 0x25 and CH == "0" then

			PE = SeedPE38 - SeedCH01

		elseif mainmemory.readbyte(CurrentLevel) == 0x25 and CH ~= "0" then

			PE = SeedPE38

		end




		if PE == 0 then																																				-- Sets PE option and guage

			mainmemory.write_u16_le(PauseMenuOptions, 0x1FFD)

		elseif PE ~= 0 then

			mainmemory.write_u16_le(PauseMenuOptions, 0x1FFF)

		end


		mainmemory.write_u32_le(PEAbilities, PE)

	end




	if mainmemory.read_u16_le(GameState) == 0x8082 and mainmemory.readbyte(DeathTrigger) == 0x02 then																-- Removes text from PE message during level ups to avoid confusion

		mainmemory.writebyte(LevelUpPEMessage, 0xFF)

	end



-- [ GUI: Miscellaneous ] --

	if mainmemory.read_u32_le(Location) == 0xA9400048 and mainmemory.readbyte(ActiveSaveMenu) == 0x01 and															-- Adds font change option at title screen and displays seed and script version.
	(mainmemory.readbyte(Slot1QuickerSave) == 0x01 or mainmemory.readbyte(Slot2QuickerSave) == 0x01) then

		gui.pixelText(7, 4, "[PER v0.09, Seed:" .. string.format("%09d", SeedNum) .. "] Use L1 or R1 here to change your pixel text font.", "white", "0")

		if joypad.get()["P1 L1"] == true and mainmemory.readbyte(GameClock) % 3 == 0 then

			gui.defaultPixelFont(1)
			console.writeline("Pixel font 'gens' set to default.")

		end


		if joypad.get()["P1 R1"] == true and mainmemory.readbyte(GameClock) % 3 == 0 then

			gui.defaultPixelFont(0)
			console.writeline("Pixel font 'fceux' set to default.")

		end


	end


	if (mainmemory.read_u32_le(Location) == 0xA9400048 and																											-- Clears text for FMV on title screen.
	mainmemory.readbyte(Slot1QuickerSave) == 0x00 and mainmemory.readbyte(Slot2QuickerSave) == 0x00) or
	(mainmemory.read_u32_le(Location) == 0xA80830C8 and mainmemory.read_u16_le(StoryFlag) == 0x0000) then

		gui.pixelText(7, 4, "")
		gui.clearGraphics()

	end



	if (mainmemory.read_u16_le(GameState) == 0x0040 or mainmemory.read_u16_le(GameState) == 0x8040) and mainmemory.readbyte(ChryslerFloor) == 0x00 then				-- Clears added text on screen transitions.

		gui.pixelText(7, 4, "")
		gui.clearGraphics()

	end


--	if mainmemory.readbyte(MapAvSelections) ~= 0x00 and mainmemory.readbyte(AyaState) % 2 == 0 and mainmemory.read_u32_le(AyaMenuName3) ~= SeedMenuName3 then		-- Warns player of incorrect save loading.

--		gui.pixelText(7, 4, "[!] The save file loaded does not match the current seed. Please reset.", "red", "0")

--	end




	if mainmemory.readbyte(CurrentOutfit) == 0x0C then																												-- Applies preferred outfit for Aya.

		mainmemory.writebyte(CurrentOutfit, 0x0D)

	end




-- [ Item Replacements: Carnegie Hall ] --

	if mainmemory.read_u32_le(Location) == 0xA80004C8 then

		mainmemory.writebyte(UChest4, SeedCH02)

	end


	if mainmemory.read_u32_le(Location) == 0xA8002048 then

		mainmemory.writebyte(UChest7, SeedCH03)
		mainmemory.writebyte(CHTheaterKeyIt, SeedCH04)
		mainmemory.writebyte(CHTheaterKeyTx, SeedCH04)

	end


	if mainmemory.read_u32_le(Location) == 0xA8001448 then

		mainmemory.writebyte(CHRehearseKeyIt, SeedCH05)
		mainmemory.writebyte(CHRehearseKeyTx, SeedCH05)
		mainmemory.writebyte(CHDiaryRoomAmmo, SeedCH06)

	end


	if mainmemory.read_u32_le(Location) == 0xA8002148 then

		mainmemory.writebyte(CHParrotAmmo, SeedCH07)

	end


	if mainmemory.read_u32_le(Location) == 0xA80013C8 then

		mainmemory.writebyte(CHClownAmmo, SeedCH08)

	end


	if mainmemory.read_u32_le(Location) == 0xA80020C8 then

		mainmemory.writebyte(CHBurnedPair, SeedCH09)

	end


	if mainmemory.read_u32_le(Location) == 0xA8001348 then

		mainmemory.writebyte(UChest3, SeedCH11)
		mainmemory.writebyte(UChest5, SeedCH10)
		mainmemory.writebyte(UChest6, SeedCH11)
		mainmemory.writebyte(CHPropRoomP220, SeedCH12)

	end


	if mainmemory.read_u32_le(Location) == 0xA8001248 then

		mainmemory.writebyte(UChest6, SeedCH13)

	end


	if mainmemory.read_u32_le(Location) == 0xA8002448 then

		mainmemory.writebyte(UChest7, SeedCH14)

	end


	if mainmemory.read_u32_le(Location) == 0xA80030C8 then

		mainmemory.writebyte(UChest5, SeedCH15)
		mainmemory.writebyte(UChest6, SeedCH16)
		mainmemory.writebyte(UChest7, SeedCH17)

	end


	if mainmemory.read_u32_le(Location) == 0xA8063248 then

		mainmemory.writebyte(UChest4, SeedCH18)
		mainmemory.writebyte(UChest5, SeedCH19)
		mainmemory.writebyte(UChest6, SeedCH20)
		mainmemory.writebyte(UChest8, SeedCH21)

	end


	if mainmemory.read_u32_le(Location) == 0xA8064448 then

		mainmemory.writebyte(DropItem1, SeedCH22)

	end


-- [ Item Replacements: N.Y.P.D. #17 ] --

	if mainmemory.read_u32_le(Location) == 0xA80040C8 and mainmemory.read_u16_le(StoryFlag) == 0x0090 then

		mainmemory.writebyte(EventSkip, 0x04)
		mainmemory.writebyte(PDModPermit1It, SeedPD01)
		mainmemory.writebyte(PDModPermit1Tx, SeedPD01)

	end


	if mainmemory.read_u32_le(Location) == 0xA80042C8 then

		mainmemory.writebyte(PDCmVest1, SeedPD02)
		mainmemory.writebyte(PDD2Locker1ACurP, SeedPD03)
		mainmemory.writebyte(PDD2Locker1BMed2, SeedPD03)
		mainmemory.writebyte(PDEarlyBlueEyesWD, SeedPD13)

	end


	if mainmemory.read_u32_le(Location) == 0xA80043C8 then

		mainmemory.writebyte(PDModPermit2It, SeedPD04)
		mainmemory.writebyte(PDModPermit2Tx, SeedPD04)

	end


	if mainmemory.read_u32_le(Location) == 0xA8005148 then

		mainmemory.writebyte(PDM16A1It, SeedPD05)
		mainmemory.writebyte(PDM16A1Tx, SeedPD05)

	end


	if mainmemory.read_u32_le(Location) == 0xA80201C8 then

		mainmemory.writebyte(PDMaedaHamayaIt, SeedPD06)
		mainmemory.writebyte(PDMaedaHamayaTx, SeedPD06)

	end


	if mainmemory.read_u32_le(Location) == 0xA8020048 then

		mainmemory.writebyte(PDCop1Ammo6It, SeedPD07)
		mainmemory.writebyte(PDCop1Ammo6Tx, SeedPD07)
		mainmemory.writebyte(PDNixAmmo15It, SeedPD08)
		mainmemory.writebyte(PDNixAmmo15Tx, SeedPD08)

	end


	if mainmemory.read_u32_le(Location) == 0xA80094C8 then

		mainmemory.writebyte(PDWarnerAmmoIt, SeedPD09)
		mainmemory.writebyte(PDWarnerAmmoTx, SeedPD09)

	end


	if mainmemory.read_u32_le(Location) == 0xA8020148 then

		mainmemory.writebyte(PDLocker1AD3Med2, SeedPD10)
		mainmemory.writebyte(PDLocker1BD3CurP, SeedPD10)
		mainmemory.writebyte(PDD3LockerMed3, SeedPD11)
		mainmemory.writebyte(PDLockerCopAmmoIt, SeedPD12)
		mainmemory.writebyte(PDLockerCopAmmoTx, SeedPD12)
		mainmemory.writebyte(PDBlueEyesWhtDrgn, SeedPD13)

	end


	if mainmemory.read_u32_le(Location) == 0xA8020448 then

		mainmemory.writebyte(PDTorresM92FIt, SeedPD14)
		mainmemory.writebyte(PDTorresM92FTx, SeedPD14)

	end


	if mainmemory.read_u32_le(Location) == 0xA80210C8 then

		mainmemory.writebyte(PDCathyAmmo6It, SeedPD15)
		mainmemory.writebyte(PDCathyAmmo6Tx, SeedPD15)

	end


	if mainmemory.read_u32_le(Location) == 0xA8020248 then

		mainmemory.writebyte(UChest3, SeedPD16)

	end


	if mainmemory.read_u32_le(Location) == 0xA8021348 then

		mainmemory.writebyte(PDStairsCopAmmoIt, SeedPD17)
		mainmemory.writebyte(PDStairsCopAmmoTx, SeedPD17)

	end


	if mainmemory.read_u32_le(Location) == 0xA80211C8 then

		mainmemory.writebyte(UChest4, SeedPD18)
		mainmemory.writebyte(UChest5, SeedPD19)

	end


	if mainmemory.read_u32_le(Location) == 0xA8021248 then

		mainmemory.writebyte(UChest3, SeedPD20)
		mainmemory.writebyte(PDStorageKeyIt, SeedPD21)
		mainmemory.writebyte(PDStorageKeyTx, SeedPD21)

	end


	if mainmemory.read_u32_le(Location) == 0xA8021148 then

		mainmemory.writebyte(UChest3, SeedPD22)
		mainmemory.writebyte(UChest4, SeedPD23)

	end


	if mainmemory.read_u32_le(Location) == 0xA80220C8 then

		mainmemory.writebyte(PDLockerKeyIt, SeedPD24)
		mainmemory.writebyte(PDLockerKeyTx, SeedPD24)

	end


	if mainmemory.read_u32_le(Location) == 0xA80213C8 then

		mainmemory.writebyte(PDMedOfficeAmmoIt, SeedPD25)
		mainmemory.writebyte(PDMedOfficeAmmoTx, SeedPD25)

	end


	if mainmemory.read_u32_le(Location) == 0xA8021448 then

		mainmemory.writebyte(UChest3, SeedPD26)
		mainmemory.writebyte(DropItem1, SeedPD27)
		mainmemory.writebyte(PDBBWCopAmmo6It, SeedPD28)
		mainmemory.writebyte(PDBBWCopAmmo6Tx, SeedPD28)
		mainmemory.writebyte(UChest4, SeedPD29)

	end


	if mainmemory.read_u32_le(Location) == 0xA8020348 then

		mainmemory.writebyte(UChest2, SeedPD30)
		mainmemory.writebyte(UChest3, SeedPD31)
		mainmemory.writebyte(UChest4, SeedPD32)

	end


	if mainmemory.read_u32_le(Location) == 0xA80221C8 then

		mainmemory.writebyte(DropItem1, SeedPD33)

	end


-- [ Item Replacements: Central Park ] --

	if mainmemory.read_u32_le(Location) == 0xA80054C8 then

		mainmemory.writebyte(UChest4, SeedCP01)
		mainmemory.writebyte(UChest5, SeedCP02)

	end


	if mainmemory.read_u32_le(Location) == 0xA8006048 then

		mainmemory.writebyte(UChest3, SeedCP03)
		mainmemory.writebyte(UChest4, SeedCP04)

	end


	if mainmemory.read_u32_le(Location) == 0xA80060C8 then

		mainmemory.writebyte(UChest4, SeedCP05)
		mainmemory.writebyte(UChest5, SeedCP06)

	end


	if mainmemory.read_u32_le(Location) == 0xA8006248 then

		mainmemory.writebyte(CPZooKey, SeedCP07)
		mainmemory.writebyte(CPOfficeSpVest1, SeedCP08)
		mainmemory.writebyte(CPOfficeM203, SeedCP09)

	end


	if mainmemory.read_u32_le(Location) == 0xA8006148 then

		mainmemory.writebyte(UChest4, SeedCP10)
		mainmemory.writebyte(UChest5, SeedCP11)
		mainmemory.writebyte(UChest6, SeedCP12)

	end


	if mainmemory.read_u32_le(Location) == 0xA8065448 then

		mainmemory.writebyte(UChest4, SeedCP13)

	end


	if mainmemory.read_u32_le(Location) == 0xA8006348 then

		mainmemory.writebyte(UChest3, SeedCP14)
		mainmemory.writebyte(UChest4, SeedCP15)

	end


	if mainmemory.read_u32_le(Location) == 0xA8007248 then

		mainmemory.writebyte(UChest4, SeedCP16)
		mainmemory.writebyte(UChest5, SeedCP17)

	end


	if mainmemory.read_u32_le(Location) == 0xA80072C8 then

		mainmemory.writebyte(UChest4, SeedCP18)

	end


	if mainmemory.read_u32_le(Location) == 0xA80073C8 then

		mainmemory.writebyte(UChest3, SeedCP19)

	end


	if mainmemory.read_u32_le(Location) == 0xA8008048 then

		mainmemory.writebyte(UChest4, SeedCP20)

	end


	if mainmemory.read_u32_le(Location) == 0xA8007448 then

		mainmemory.writebyte(UChest4, SeedCP21)

	end


	if mainmemory.read_u32_le(Location) == 0xA80074C8 then

		mainmemory.writebyte(UChest3, SeedCP22)

	end


	if mainmemory.read_u32_le(Location) == 0xA8008248 then

		mainmemory.writebyte(UChest3, SeedCP23)
		mainmemory.writebyte(UChest4, SeedCP24)

	end


-- [ Item Replacements: Soho ] --

	if mainmemory.read_u32_le(Location) == 0xA8009148 then

		mainmemory.writebyte(UChest3, SeedSH01)

	end


	if mainmemory.read_u32_le(Location) == 0xA80091C8 then

		mainmemory.writebyte(SHTrashPileTCard, SeedSH02)

	end


	if mainmemory.read_u32_le(Location) == 0xA80092C8 then

		mainmemory.writebyte(UChest3, SeedSH03)
		mainmemory.writebyte(UChest4, SeedSH04)
		mainmemory.writebyte(UChest5, SeedSH05)
		mainmemory.writebyte(UChest6, SeedSH06)
		mainmemory.writebyte(SHSamsM11, SeedSH07)
		mainmemory.writebyte(SHSamsClub2, SeedSH08)
		mainmemory.writebyte(SHSamsG19, SeedSH09)
		mainmemory.writebyte(SHSamsCrVest1, SeedSH10)

	end


	if mainmemory.read_u32_le(Location) == 0xA80093C8 then

		mainmemory.writebyte(UChest4, SeedSH11)
		mainmemory.writebyte(UChest5, SeedSH12)
		mainmemory.writebyte(UChest8, SeedSH13)
		mainmemory.writebyte(UChest9, SeedSH14)
		mainmemory.writebyte(SHPharMed3, SeedSH15)
		mainmemory.writebyte(SHPharCureM, SeedSH16)
		mainmemory.writebyte(SHPharA1Def1, SeedSH17)
		mainmemory.writebyte(SHPharA2Def2, SeedSH17)
		mainmemory.writebyte(SHPharB1PE1, SeedSH18)
		mainmemory.writebyte(SHPharB2PE2, SeedSH18)

	end


-- [ Item Replacements: Hospital ] --

	if mainmemory.read_u32_le(Location) == 0xA80222C8 then

		mainmemory.writebyte(HSMaedaMayokeIt, SeedHS01)
		mainmemory.writebyte(HSMaedaMayokeTx, SeedHS01)

	end


	if mainmemory.read_u32_le(Location) == 0xA8022348 then

		mainmemory.writebyte(UChest3, SeedHS03)
		mainmemory.writebyte(UChest5, SeedHS03)
		mainmemory.writebyte(UChest6, SeedHS02)
		mainmemory.writebyte(UChest7, SeedHS03)

	end


	if mainmemory.read_u32_le(Location) == 0xA8062348 or mainmemory.read_u32_le(Location) == 0xA80234C8 then

		mainmemory.writebyte(UChest3, SeedHS04)
		mainmemory.writebyte(UChest4, SeedHS05)
		mainmemory.writebyte(HSFuse1It, SeedHS06)
		mainmemory.writebyte(HSFuse1Tx, SeedHS06)

	end


	if mainmemory.read_u32_le(Location) == 0xA80622C8 or mainmemory.read_u32_le(Location) == 0xA8023448 then

		mainmemory.writebyte(UChest2, SeedHS07)
		mainmemory.writebyte(HSAutopsyKeyIt, SeedHS08)
		mainmemory.writebyte(HSAutopsyKeyTx, SeedHS08)

	end


	if mainmemory.read_u32_le(Location) == 0xA8062248 or mainmemory.read_u32_le(Location) == 0xA80233C8 then

		mainmemory.writebyte(UChest4, SeedHS09)

	end


	if mainmemory.read_u32_le(Location) == 0xA80623C8 or mainmemory.read_u32_le(Location) == 0xA8024048 then

		mainmemory.writebyte(UChest3, SeedHS10)
		mainmemory.writebyte(UChest4, SeedHS11)
		mainmemory.writebyte(UChest5, SeedHS10)

	end


	if mainmemory.read_u32_le(Location) == 0xA8062448 or mainmemory.read_u32_le(Location) == 0xA80240C8 then

		mainmemory.writebyte(UChest3, SeedHS12)
		mainmemory.writebyte(UChest5, SeedHS12)
		mainmemory.writebyte(HSFuse2It, SeedHS13)
		mainmemory.writebyte(HSFuse2Tx, SeedHS13)
		mainmemory.writebyte(HSBlueKeycardIt, SeedHS14)
		mainmemory.writebyte(HSBlueKeycardTx, SeedHS14)

	end


	if mainmemory.read_u32_le(Location) == 0xA80624C8 or mainmemory.read_u32_le(Location) == 0xA8024148 then

		mainmemory.writebyte(UChest2, SeedHS15)

	end


	if mainmemory.read_u32_le(Location) == 0xA8063048 or mainmemory.read_u32_le(Location) == 0xA80241C8 then

		mainmemory.writebyte(HSStairwell2Off1, SeedHS16)
		mainmemory.writebyte(HSStair2CTSwSTool, SeedHS16)

	end


	if mainmemory.read_u32_le(Location) == 0xA8063148 or mainmemory.read_u32_le(Location) == 0xA80242C8 then

		mainmemory.writebyte(UChest4, SeedHS17)
		mainmemory.writebyte(UChest5, SeedHS18)
		mainmemory.writebyte(HSFuse3It, SeedHS19)
		mainmemory.writebyte(HSFuse3Tx, SeedHS19)

	end


	if mainmemory.read_u32_le(Location) == 0xA8024348 then

		mainmemory.writebyte(UChest3, SeedHS20)
		mainmemory.writebyte(UChest4, SeedHS20)

	end


	if mainmemory.read_u32_le(Location) == 0xA80243C8 then

		mainmemory.writebyte(UChest5, SeedHS21)
		mainmemory.writebyte(HSGreenCardkeyIt, SeedHS22)
		mainmemory.writebyte(HSGreenCardkeyTx, SeedHS22)

	end


	if mainmemory.read_u32_le(Location) == 0xA8024448 then

		mainmemory.writebyte(UChest2, SeedHS23)

	end


	if mainmemory.read_u32_le(Location) == 0xA80244C8 then

		mainmemory.writebyte(UChest4, SeedHS24)
		mainmemory.writebyte(DropItem1, SeedHS25)

	end


	if mainmemory.read_u32_le(Location) == 0xA8025148 then

		mainmemory.writebyte(UChest3, SeedHS26)
		mainmemory.writebyte(HSF13Med3, SeedHS27)
		mainmemory.writebyte(HSF13Tool, SeedHS28)

	end


	if mainmemory.read_u32_le(Location) == 0xA80251C8 then

		mainmemory.writebyte(UChest4, SeedHS29)
		mainmemory.writebyte(UChest4, SeedHS29)
		mainmemory.writebyte(UChest5, SeedHS29)

	end


	if mainmemory.read_u32_le(Location) == 0xA8025248 then

		mainmemory.writebyte(UChest3, SeedHS30)
		mainmemory.writebyte(UChest4, SeedHS31)
		mainmemory.writebyte(UChest5, SeedHS31)
		mainmemory.writebyte(HSF13JunkIt, SeedHS32)
		mainmemory.writebyte(HSF13JunkTx, SeedHS32)
		mainmemory.writebyte(HSF13ElevateKeyIt, SeedHS33)
		mainmemory.writebyte(HSF13ElevateKeyTx, SeedHS33)

	end


	if mainmemory.read_u32_le(Location) == 0xA8068048 then

		mainmemory.writebyte(DropItem1, SeedHS34)

	end


-- [ Item Replacements: Warehouse ] --

	if mainmemory.read_u32_le(Location) == 0xA8046048 then

		mainmemory.writebyte(UChest2, SeedWH01)
		mainmemory.writebyte(UChest3, SeedWH02)

	end


	if mainmemory.read_u32_le(Location) == 0xA8046148 then

		mainmemory.writebyte(UChest3, SeedWH03)

	end


	if mainmemory.read_u32_le(Location) == 0xA80461C8 then

		mainmemory.writebyte(UChest5, SeedWH04)
		mainmemory.writebyte(WHWarehouseKey, SeedWH05)

	end


	if mainmemory.read_u32_le(Location) == 0xA8046348 then

		mainmemory.writebyte(UChest3, SeedWH06)
		mainmemory.writebyte(UChest4, SeedWH07)
		mainmemory.writebyte(UChest5, SeedWH08)

	end


	if mainmemory.read_u32_le(Location) == 0xA80463C8 then

		mainmemory.writebyte(UChest3, SeedWH09)
		mainmemory.writebyte(UChest4, SeedWH10)
		mainmemory.writebyte(UChest5, SeedWH11)

	end


	if mainmemory.read_u32_le(Location) == 0xA80464C8 then

		mainmemory.writebyte(DropItem1, SeedWH12)
		mainmemory.writebyte(WHTool, SeedWH13)

	end


-- [ Item Replacements: Chinatown ] --

	if mainmemory.read_u32_le(Location) == 0xA8026148 then

		mainmemory.writebyte(UChest4, SeedCT01)
		mainmemory.writebyte(UChest5, SeedCT02)

	end


	if mainmemory.read_u32_le(Location) == 0xA80261C8 then

		mainmemory.writebyte(UChest6, SeedCT03)
		mainmemory.writebyte(UChest7, SeedCT04)

	end


	if mainmemory.read_u32_le(Location) == 0xA8026248 then

		mainmemory.writebyte(UChest3, SeedCT05)
		mainmemory.writebyte(CTAntiqueTool, SeedCT06)

	end


	if mainmemory.read_u32_le(Location) == 0xA80262C8 then

		mainmemory.writebyte(UChest4, SeedCT07)
		mainmemory.writebyte(CTMaedaNaritaIt, SeedCT08)
		mainmemory.writebyte(CTMaedaNaritaTx, SeedCT08)

	end


	if mainmemory.read_u32_le(Location) == 0xA8027148 then

		if mainmemory.readbyte(CTSewersX) == 0x04 and mainmemory.readbyte(CTSewersY) == 0x05 then

			mainmemory.writebyte(HSStair2CTSwSTool, SeedCT09)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80270C8 then

		if mainmemory.readbyte(CTSewersX) == 0x01 and mainmemory.readbyte(CTSewersY) == 0x04 then

			mainmemory.writebyte(UChest1, SeedCT10)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80264C8 then

		if mainmemory.readbyte(CTSewersX) == 0x03 and mainmemory.readbyte(CTSewersY) == 0x04 then

			mainmemory.writebyte(CTSewersCurD, SeedCT11)

		end


		if mainmemory.readbyte(CTSewersX) == 0x03 and mainmemory.readbyte(CTSewersY) == 0x02 then

			mainmemory.writebyte(UChest3, SeedCT15)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80263C8 then

		if mainmemory.readbyte(CTSewersX) == 0x06 and mainmemory.readbyte(CTSewersY) == 0x04 then

			mainmemory.writebyte(UChest3, SeedCT12)

		end


		if mainmemory.readbyte(CTSewersX) == 0x08 and mainmemory.readbyte(CTSewersY) == 0x02 then

			mainmemory.writebyte(UChest3, SeedCT16)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA8026448 then

		if mainmemory.readbyte(CTSewersX) == 0x02 and mainmemory.readbyte(CTSewersY) == 0x03 then

			mainmemory.writebyte(UChest3, SeedCT13)

		end


		if mainmemory.readbyte(CTSewersX) == 0x06 and mainmemory.readbyte(CTSewersY) == 0x03 then

			mainmemory.writebyte(CTSewersOff1, SeedCT14)
			mainmemory.writebyte(CTSewersRng1, SeedCT14)

		end


		if mainmemory.readbyte(CTSewersX) == 0x04 and mainmemory.readbyte(CTSewersY) == 0x01 then

			mainmemory.writebyte(UChest3, SeedCT18)

		end


		if mainmemory.readbyte(CTSewersX) == 0x0A and mainmemory.readbyte(CTSewersY) == 0x01 then

			mainmemory.writebyte(CTSewersTool, SeedCT19)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA8027048 then

		if mainmemory.readbyte(CTSewersX) == 0x0B and mainmemory.readbyte(CTSewersY) == 0x02 then

			mainmemory.writebyte(UChest1, SeedCT17)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80271C8 then

		mainmemory.writebyte(UChest5, SeedCT20)
		mainmemory.writebyte(UChest6, SeedCT21)

	end


	if mainmemory.read_u32_le(Location) == 0xA8027248 then

		mainmemory.writebyte(UChest5, SeedCT22)
		mainmemory.writebyte(UChest6, SeedCT23)

	end


	if mainmemory.read_u32_le(Location) == 0xA8027348 then

		mainmemory.writebyte(UChest5, SeedCT24)

	end


-- [ Item Replacements: Subway ] --

	if mainmemory.read_u32_le(Location) == 0xA8028248 then

		mainmemory.writebyte(UChest4, SeedSW01)
		mainmemory.writebyte(UChest5, SeedSW02)

	end


	if mainmemory.read_u32_le(Location) == 0xA80281C8 then

		mainmemory.writebyte(UChest3, SeedSW03)

	end


	if mainmemory.read_u32_le(Location) == 0xA80283C8 then

		mainmemory.writebyte(UChest4, SeedSW04)

	end


	if mainmemory.read_u32_le(Location) == 0xA8028448 then

		mainmemory.writebyte(DropItem3, SeedSW05)

	end


	if mainmemory.read_u32_le(Location) == 0xA80282C8 then

		mainmemory.writebyte(UChest4, SeedSW06)
		mainmemory.writebyte(UChest5, SeedSW07)
		mainmemory.writebyte(UChest6, SeedSW08)

	end


	if mainmemory.read_u32_le(Location) == 0xA8029048 then

		mainmemory.writebyte(SWGateKey, SeedSW09)

	end


-- [ Item Replacements: Museum ] --

	if mainmemory.read_u32_le(Location) == 0xA80293C8 then

		mainmemory.writebyte(MChest3, SeedMU01)

	end


	if mainmemory.read_u32_le(Location) == 0xA8029448 then

		mainmemory.writebyte(MChest2, SeedMU02)

	end


	if mainmemory.read_u32_le(Location) == 0xA80294C8 then

		mainmemory.writebyte(MChest1, SeedMU03)
		mainmemory.writebyte(MChest2, SeedMU04)
		mainmemory.writebyte(MChest3, SeedMU04)

	end


	if mainmemory.read_u32_le(Location) == 0xA8040148 then

		mainmemory.writebyte(UChest3, SeedMU05)

	end


	if mainmemory.read_u32_le(Location) == 0xA80401C8 then

		mainmemory.writebyte(MChest5, SeedMU06)
		mainmemory.writebyte(MChest6, SeedMU07)
		mainmemory.writebyte(MChest7, SeedMU08)
		mainmemory.writebyte(MChest8, SeedMU09)
		mainmemory.writebyte(MChest9, SeedMU10)

	end


	if mainmemory.read_u32_le(Location) == 0xA80403C8 then

		mainmemory.writebyte(MChest2, SeedMU11)

	end


	if mainmemory.read_u32_le(Location) == 0xA8041048 then

		mainmemory.writebyte(MChest1, SeedMU12)

	end


	if mainmemory.read_u32_le(Location) == 0xA80410C8 then

		mainmemory.writebyte(MChest1, SeedMU13)

	end


	if mainmemory.read_u32_le(Location) == 0xA8041248 then

		mainmemory.writebyte(UChest3, SeedMU14)
		mainmemory.writebyte(UChest4, SeedMU15)
		mainmemory.writebyte(UChest5, SeedMU14)

	end


	if mainmemory.read_u32_le(Location) == 0xA80411C8 then

		mainmemory.writebyte(MChest1, SeedMU16)

	end


	if mainmemory.read_u32_le(Location) == 0xA80413C8 then

		mainmemory.writebyte(UChest4, SeedMU17)

	end


	if mainmemory.read_u32_le(Location) == 0xA80420C8 then

		mainmemory.writebyte(MChest4, SeedMU18)

	end


	if mainmemory.read_u32_le(Location) == 0xA80423C8 then

		mainmemory.writebyte(MChest2, SeedMU19)

	end


	if mainmemory.read_u32_le(Location) == 0xA8043148 then

		mainmemory.writebyte(MChest2, SeedMU20)
		mainmemory.writebyte(MChest3, SeedMU21)

	end


	if mainmemory.read_u32_le(Location) == 0xA80433C8 then

		mainmemory.writebyte(UChest4, SeedMU22)

	end


	if mainmemory.read_u32_le(Location) == 0xA8045048 then

		mainmemory.writebyte(UChest3, SeedMU23)
		mainmemory.writebyte(UChest4, SeedMU24)
		mainmemory.writebyte(UChest5, SeedMU25)
		mainmemory.writebyte(UChest6, SeedMU26)

	end


	if mainmemory.read_u32_le(Location) == 0xA8064248 then

		mainmemory.writebyte(MUMaedaGunIt, SeedMU27)
		mainmemory.writebyte(MUMaedaGunTx, SeedMU27)
		mainmemory.writebyte(MUKlampKeyIt, SeedMU28)
		mainmemory.writebyte(MUKlampKeyTx, SeedMU28)

		if mainmemory.read_u16_le(BGMTempo) ~= 0x5C29 then

			mainmemory.writebyte(AyaFullInvHold, SeedMU27)

		end


		if mainmemory.read_u16_le(BGMTempo) == 0x5C29 then

			mainmemory.writebyte(AyaFullInvHold, SeedMU28)

		end


	end


	if mainmemory.read_u32_le(Location) == 0xA80443C8 then

		mainmemory.writebyte(UChest3, SeedMU29)

	end


	if mainmemory.read_u32_le(Location) == 0xA80674C8 then

		mainmemory.writebyte(UChest3, SeedMU30)
		mainmemory.writebyte(UChest4, SeedMU31)

	end


	if mainmemory.read_u32_le(Location) == 0xA80442C8 then
	
		mainmemory.writebyte(DropItem2, SeedMU32)

	end


	if mainmemory.read_u32_le(Location) == 0xA8045248 or mainmemory.read_u32_le(Location) == 0xA8045348 or
	mainmemory.read_u32_le(Location) == 0xA80670C8 then

		mainmemory.writebyte(MChest2, SeedMU33)
		mainmemory.writebyte(MChest3, SeedMU34)
		mainmemory.writebyte(DropItem1, SeedMU35)

	end


	if mainmemory.read_u32_le(Location) == 0xA8044348 then

		mainmemory.writebyte(UChest4, SeedMU36)
		mainmemory.writebyte(UChest5, SeedMU37)

	end


-- [ Item Replacements: Cruiser ] --

	-- none yet implemented --




-- [ Equippable Stat Modifications ] --

	if mainmemory.read_u16_le(StoryFlag) == 0x0000 and mainmemory.readbyte(ActiveSaveMenu) ~= 0x00 then

		mainmemory.writebyte(IcnSuperJunk, 0x17)
		mainmemory.writebyte(DscSuperJunk, 0xC0)
		mainmemory.writebyte(IcnUnusedDef1, 0x6C)
		mainmemory.writebyte(InfUnusedDef1, 0x00)
		mainmemory.writebyte(TypUnusedDef1, 0x10)
		mainmemory.writebyte(IcnRevive, 0x76)
		mainmemory.writebyte(IcnToolKit, 0x1A)
		mainmemory.writebyte(IcnSuperToolKit, 0x1A)
		mainmemory.writebyte(IcnChryslerKey1, 0x7C)
		mainmemory.writebyte(IcnChryslerKey2, 0x7C)
		mainmemory.writebyte(IcnChryslerKey3, 0x7C)
		mainmemory.writebyte(IcnChryslerKey4, 0x7C)
		mainmemory.writebyte(IcnChryslerKey5, 0x7C)
		mainmemory.writebyte(IcnChryslerKey6, 0x7C)
		mainmemory.writebyte(IcnChryslerKey7, 0x7C)
		mainmemory.writebyte(DscMaedaGun, 0x00)
		mainmemory.writebyte(DscDress, 0x00)
		mainmemory.writebyte(DscNarita, 0xC0)

		mainmemory.writebyte(IconClub1, SeedIconClub1)
		mainmemory.writebyte(MaxSlotsClub1, SeedMaxSlotsClub1)
		mainmemory.writebyte(TypClub1, SeedTypClub1)
		mainmemory.writebyte(OffClub1, SeedOffClub1)
		mainmemory.writebyte(RngClub1, SeedRngClub1)
		mainmemory.writebyte(BltClub1, SeedBltClub1)
		mainmemory.writebyte(CurAmmoClub1, SeedBltClub1)
		mainmemory.writebyte(OffPlusClub1, SeedOffPlusClub1)
		mainmemory.writebyte(RngPlusClub1, SeedRngPlusClub1)
		mainmemory.writebyte(BltPlusClub1, SeedBltPlusClub1)
		mainmemory.writebyte(CurSlotsClub1, SeedCurSlotsClub1)
		mainmemory.writebyte(Mod1Club1, SeedMod1Club1)
		mainmemory.writebyte(Mod2Club1, SeedMod2Club1)
		mainmemory.writebyte(Mod3Club1, SeedMod3Club1)
		mainmemory.writebyte(Mod4Club1, SeedMod4Club1)
		mainmemory.writebyte(Mod5Club1, SeedMod5Club1)
		mainmemory.writebyte(Mod6Club1, SeedMod6Club1)
		mainmemory.writebyte(Mod7Club1, SeedMod7Club1)
		mainmemory.writebyte(Mod8Club1, SeedMod8Club1)
		mainmemory.writebyte(Mod9Club1, SeedMod9Club1)
		mainmemory.writebyte(Mod10Club1, SeedMod10Club1)
		mainmemory.writebyte(IconClub2, SeedIconClub2)
		mainmemory.writebyte(MaxSlotsClub2, SeedMaxSlotsClub2)
		mainmemory.writebyte(TypClub2, SeedTypClub2)
		mainmemory.writebyte(OffClub2, SeedOffClub2)
		mainmemory.writebyte(RngClub2, SeedRngClub2)
		mainmemory.writebyte(BltClub2, SeedBltClub2)
		mainmemory.writebyte(CurAmmoClub2, SeedBltClub2)
		mainmemory.writebyte(OffPlusClub2, SeedOffPlusClub2)
		mainmemory.writebyte(RngPlusClub2, SeedRngPlusClub2)
		mainmemory.writebyte(BltPlusClub2, SeedBltPlusClub2)
		mainmemory.writebyte(CurSlotsClub2, SeedCurSlotsClub2)
		mainmemory.writebyte(Mod1Club2, SeedMod1Club2)
		mainmemory.writebyte(Mod2Club2, SeedMod2Club2)
		mainmemory.writebyte(Mod3Club2, SeedMod3Club2)
		mainmemory.writebyte(Mod4Club2, SeedMod4Club2)
		mainmemory.writebyte(Mod5Club2, SeedMod5Club2)
		mainmemory.writebyte(Mod6Club2, SeedMod6Club2)
		mainmemory.writebyte(Mod7Club2, SeedMod7Club2)
		mainmemory.writebyte(Mod8Club2, SeedMod8Club2)
		mainmemory.writebyte(Mod9Club2, SeedMod9Club2)
		mainmemory.writebyte(Mod10Club2, SeedMod10Club2)
		mainmemory.writebyte(IconClub3, SeedIconClub3)
		mainmemory.writebyte(MaxSlotsClub3, SeedMaxSlotsClub3)
		mainmemory.writebyte(TypClub3, SeedTypClub3)
		mainmemory.writebyte(OffClub3, SeedOffClub3)
		mainmemory.writebyte(RngClub3, SeedRngClub3)
		mainmemory.writebyte(BltClub3, SeedBltClub3)
		mainmemory.writebyte(CurAmmoClub3, SeedBltClub3)
		mainmemory.writebyte(OffPlusClub3, SeedOffPlusClub3)
		mainmemory.writebyte(RngPlusClub3, SeedRngPlusClub3)
		mainmemory.writebyte(BltPlusClub3, SeedBltPlusClub3)
		mainmemory.writebyte(CurSlotsClub3, SeedCurSlotsClub3)
		mainmemory.writebyte(Mod1Club3, SeedMod1Club3)
		mainmemory.writebyte(Mod2Club3, SeedMod2Club3)
		mainmemory.writebyte(Mod3Club3, SeedMod3Club3)
		mainmemory.writebyte(Mod4Club3, SeedMod4Club3)
		mainmemory.writebyte(Mod5Club3, SeedMod5Club3)
		mainmemory.writebyte(Mod6Club3, SeedMod6Club3)
		mainmemory.writebyte(Mod7Club3, SeedMod7Club3)
		mainmemory.writebyte(Mod8Club3, SeedMod8Club3)
		mainmemory.writebyte(Mod9Club3, SeedMod9Club3)
		mainmemory.writebyte(Mod10Club3, SeedMod10Club3)
		mainmemory.writebyte(IconClub4, SeedIconClub4)
		mainmemory.writebyte(MaxSlotsClub4, SeedMaxSlotsClub4)
		mainmemory.writebyte(TypClub4, SeedTypClub4)
		mainmemory.writebyte(OffClub4, SeedOffClub4)
		mainmemory.writebyte(RngClub4, SeedRngClub4)
		mainmemory.writebyte(BltClub4, SeedBltClub4)
		mainmemory.writebyte(CurAmmoClub4, SeedBltClub4)
		mainmemory.writebyte(OffPlusClub4, SeedOffPlusClub4)
		mainmemory.writebyte(RngPlusClub4, SeedRngPlusClub4)
		mainmemory.writebyte(BltPlusClub4, SeedBltPlusClub4)
		mainmemory.writebyte(CurSlotsClub4, SeedCurSlotsClub4)
		mainmemory.writebyte(Mod1Club4, SeedMod1Club4)
		mainmemory.writebyte(Mod2Club4, SeedMod2Club4)
		mainmemory.writebyte(Mod3Club4, SeedMod3Club4)
		mainmemory.writebyte(Mod4Club4, SeedMod4Club4)
		mainmemory.writebyte(Mod5Club4, SeedMod5Club4)
		mainmemory.writebyte(Mod6Club4, SeedMod6Club4)
		mainmemory.writebyte(Mod7Club4, SeedMod7Club4)
		mainmemory.writebyte(Mod8Club4, SeedMod8Club4)
		mainmemory.writebyte(Mod9Club4, SeedMod9Club4)
		mainmemory.writebyte(Mod10Club4, SeedMod10Club4)
		mainmemory.writebyte(IconClub5, SeedIconClub5)
		mainmemory.writebyte(MaxSlotsClub5, SeedMaxSlotsClub5)
		mainmemory.writebyte(TypClub5, SeedTypClub5)
		mainmemory.writebyte(OffClub5, SeedOffClub5)
		mainmemory.writebyte(RngClub5, SeedRngClub5)
		mainmemory.writebyte(BltClub5, SeedBltClub5)
		mainmemory.writebyte(CurAmmoClub5, SeedBltClub5)
		mainmemory.writebyte(OffPlusClub5, SeedOffPlusClub5)
		mainmemory.writebyte(RngPlusClub5, SeedRngPlusClub5)
		mainmemory.writebyte(BltPlusClub5, SeedBltPlusClub5)
		mainmemory.writebyte(CurSlotsClub5, SeedCurSlotsClub5)
		mainmemory.writebyte(Mod1Club5, SeedMod1Club5)
		mainmemory.writebyte(Mod2Club5, SeedMod2Club5)
		mainmemory.writebyte(Mod3Club5, SeedMod3Club5)
		mainmemory.writebyte(Mod4Club5, SeedMod4Club5)
		mainmemory.writebyte(Mod5Club5, SeedMod5Club5)
		mainmemory.writebyte(Mod6Club5, SeedMod6Club5)
		mainmemory.writebyte(Mod7Club5, SeedMod7Club5)
		mainmemory.writebyte(Mod8Club5, SeedMod8Club5)
		mainmemory.writebyte(Mod9Club5, SeedMod9Club5)
		mainmemory.writebyte(Mod10Club5, SeedMod10Club5)
		mainmemory.writebyte(IconM84F, SeedIconM84F)
		mainmemory.writebyte(MaxSlotsM84F, SeedMaxSlotsM84F)
		mainmemory.writebyte(TypM84F, SeedTypM84F)
		mainmemory.writebyte(OffM84F, SeedOffM84F)
		mainmemory.writebyte(RngM84F, SeedRngM84F)
		mainmemory.writebyte(BltM84F, SeedBltM84F)
		mainmemory.writebyte(CurAmmoM84F, SeedBltM84F)
		mainmemory.writebyte(OffPlusM84F, SeedOffPlusM84F)
		mainmemory.writebyte(RngPlusM84F, SeedRngPlusM84F)
		mainmemory.writebyte(BltPlusM84F, SeedBltPlusM84F)
		mainmemory.writebyte(CurSlotsM84F, SeedCurSlotsM84F)
		mainmemory.writebyte(Mod1M84F, SeedMod1M84F)
		mainmemory.writebyte(Mod2M84F, SeedMod2M84F)
		mainmemory.writebyte(Mod3M84F, SeedMod3M84F)
		mainmemory.writebyte(Mod4M84F, SeedMod4M84F)
		mainmemory.writebyte(Mod5M84F, SeedMod5M84F)
		mainmemory.writebyte(Mod6M84F, SeedMod6M84F)
		mainmemory.writebyte(Mod7M84F, SeedMod7M84F)
		mainmemory.writebyte(Mod8M84F, SeedMod8M84F)
		mainmemory.writebyte(Mod9M84F, SeedMod9M84F)
		mainmemory.writebyte(Mod10M84F, SeedMod10M84F)
		mainmemory.writebyte(IconM9, SeedIconM9)
		mainmemory.writebyte(MaxSlotsM9, SeedMaxSlotsM9)
		mainmemory.writebyte(TypM9, SeedTypM9)
		mainmemory.writebyte(OffM9, SeedOffM9)
		mainmemory.writebyte(RngM9, SeedRngM9)
		mainmemory.writebyte(BltM9, SeedBltM9)
		mainmemory.writebyte(CurAmmoM9, SeedBltM9)
		mainmemory.writebyte(OffPlusM9, SeedOffPlusM9)
		mainmemory.writebyte(RngPlusM9, SeedRngPlusM9)
		mainmemory.writebyte(BltPlusM9, SeedBltPlusM9)
		mainmemory.writebyte(CurSlotsM9, SeedCurSlotsM9)
		mainmemory.writebyte(Mod1M9, SeedMod1M9)
		mainmemory.writebyte(Mod2M9, SeedMod2M9)
		mainmemory.writebyte(Mod3M9, SeedMod3M9)
		mainmemory.writebyte(Mod4M9, SeedMod4M9)
		mainmemory.writebyte(Mod5M9, SeedMod5M9)
		mainmemory.writebyte(Mod6M9, SeedMod6M9)
		mainmemory.writebyte(Mod7M9, SeedMod7M9)
		mainmemory.writebyte(Mod8M9, SeedMod8M9)
		mainmemory.writebyte(Mod9M9, SeedMod9M9)
		mainmemory.writebyte(Mod10M9, SeedMod10M9)
		mainmemory.writebyte(IconM92, SeedIconM92)
		mainmemory.writebyte(MaxSlotsM92, SeedMaxSlotsM92)
		mainmemory.writebyte(TypM92, SeedTypM92)
		mainmemory.writebyte(OffM92, SeedOffM92)
		mainmemory.writebyte(RngM92, SeedRngM92)
		mainmemory.writebyte(BltM92, SeedBltM92)
		mainmemory.writebyte(CurAmmoM92, SeedBltM92)
		mainmemory.writebyte(OffPlusM92, SeedOffPlusM92)
		mainmemory.writebyte(RngPlusM92, SeedRngPlusM92)
		mainmemory.writebyte(BltPlusM92, SeedBltPlusM92)
		mainmemory.writebyte(CurSlotsM92, SeedCurSlotsM92)
		mainmemory.writebyte(Mod1M92, SeedMod1M92)
		mainmemory.writebyte(Mod2M92, SeedMod2M92)
		mainmemory.writebyte(Mod3M92, SeedMod3M92)
		mainmemory.writebyte(Mod4M92, SeedMod4M92)
		mainmemory.writebyte(Mod5M92, SeedMod5M92)
		mainmemory.writebyte(Mod6M92, SeedMod6M92)
		mainmemory.writebyte(Mod7M92, SeedMod7M92)
		mainmemory.writebyte(Mod8M92, SeedMod8M92)
		mainmemory.writebyte(Mod9M92, SeedMod9M92)
		mainmemory.writebyte(Mod10M92, SeedMod10M92)
		mainmemory.writebyte(IconM93, SeedIconM93)
		mainmemory.writebyte(MaxSlotsM93, SeedMaxSlotsM93)
		mainmemory.writebyte(TypM93, SeedTypM93)
		mainmemory.writebyte(OffM93, SeedOffM93)
		mainmemory.writebyte(RngM93, SeedRngM93)
		mainmemory.writebyte(BltM93, SeedBltM93)
		mainmemory.writebyte(CurAmmoM93, SeedBltM93)
		mainmemory.writebyte(OffPlusM93, SeedOffPlusM93)
		mainmemory.writebyte(RngPlusM93, SeedRngPlusM93)
		mainmemory.writebyte(BltPlusM93, SeedBltPlusM93)
		mainmemory.writebyte(CurSlotsM93, SeedCurSlotsM93)
		mainmemory.writebyte(Mod1M93, SeedMod1M93)
		mainmemory.writebyte(Mod2M93, SeedMod2M93)
		mainmemory.writebyte(Mod3M93, SeedMod3M93)
		mainmemory.writebyte(Mod4M93, SeedMod4M93)
		mainmemory.writebyte(Mod5M93, SeedMod5M93)
		mainmemory.writebyte(Mod6M93, SeedMod6M93)
		mainmemory.writebyte(Mod7M93, SeedMod7M93)
		mainmemory.writebyte(Mod8M93, SeedMod8M93)
		mainmemory.writebyte(Mod9M93, SeedMod9M93)
		mainmemory.writebyte(Mod10M93, SeedMod10M93)
		mainmemory.writebyte(IconM8000, SeedIconM8000)
		mainmemory.writebyte(MaxSlotsM8000, SeedMaxSlotsM8000)
		mainmemory.writebyte(TypM8000, SeedTypM8000)
		mainmemory.writebyte(OffM8000, SeedOffM8000)
		mainmemory.writebyte(RngM8000, SeedRngM8000)
		mainmemory.writebyte(BltM8000, SeedBltM8000)
		mainmemory.writebyte(CurAmmoM8000, SeedBltM8000)
		mainmemory.writebyte(OffPlusM8000, SeedOffPlusM8000)
		mainmemory.writebyte(RngPlusM8000, SeedRngPlusM8000)
		mainmemory.writebyte(BltPlusM8000, SeedBltPlusM8000)
		mainmemory.writebyte(CurSlotsM8000, SeedCurSlotsM8000)
		mainmemory.writebyte(Mod1M8000, SeedMod1M8000)
		mainmemory.writebyte(Mod2M8000, SeedMod2M8000)
		mainmemory.writebyte(Mod3M8000, SeedMod3M8000)
		mainmemory.writebyte(Mod4M8000, SeedMod4M8000)
		mainmemory.writebyte(Mod5M8000, SeedMod5M8000)
		mainmemory.writebyte(Mod6M8000, SeedMod6M8000)
		mainmemory.writebyte(Mod7M8000, SeedMod7M8000)
		mainmemory.writebyte(Mod8M8000, SeedMod8M8000)
		mainmemory.writebyte(Mod9M8000, SeedMod9M8000)
		mainmemory.writebyte(Mod10M8000, SeedMod10M8000)
		mainmemory.writebyte(IconM96, SeedIconM96)
		mainmemory.writebyte(MaxSlotsM96, SeedMaxSlotsM96)
		mainmemory.writebyte(TypM96, SeedTypM96)
		mainmemory.writebyte(OffM96, SeedOffM96)
		mainmemory.writebyte(RngM96, SeedRngM96)
		mainmemory.writebyte(BltM96, SeedBltM96)
		mainmemory.writebyte(CurAmmoM96, SeedBltM96)
		mainmemory.writebyte(OffPlusM96, SeedOffPlusM96)
		mainmemory.writebyte(RngPlusM96, SeedRngPlusM96)
		mainmemory.writebyte(BltPlusM96, SeedBltPlusM96)
		mainmemory.writebyte(CurSlotsM96, SeedCurSlotsM96)
		mainmemory.writebyte(Mod1M96, SeedMod1M96)
		mainmemory.writebyte(Mod2M96, SeedMod2M96)
		mainmemory.writebyte(Mod3M96, SeedMod3M96)
		mainmemory.writebyte(Mod4M96, SeedMod4M96)
		mainmemory.writebyte(Mod5M96, SeedMod5M96)
		mainmemory.writebyte(Mod6M96, SeedMod6M96)
		mainmemory.writebyte(Mod7M96, SeedMod7M96)
		mainmemory.writebyte(Mod8M96, SeedMod8M96)
		mainmemory.writebyte(Mod9M96, SeedMod9M96)
		mainmemory.writebyte(Mod10M96, SeedMod10M96)
		mainmemory.writebyte(IconM96R, SeedIconM96R)
		mainmemory.writebyte(MaxSlotsM96R, SeedMaxSlotsM96R)
		mainmemory.writebyte(TypM96R, SeedTypM96R)
		mainmemory.writebyte(OffM96R, SeedOffM96R)
		mainmemory.writebyte(RngM96R, SeedRngM96R)
		mainmemory.writebyte(BltM96R, SeedBltM96R)
		mainmemory.writebyte(CurAmmoM96R, SeedBltM96R)
		mainmemory.writebyte(OffPlusM96R, SeedOffPlusM96R)
		mainmemory.writebyte(RngPlusM96R, SeedRngPlusM96R)
		mainmemory.writebyte(BltPlusM96R, SeedBltPlusM96R)
		mainmemory.writebyte(CurSlotsM96R, SeedCurSlotsM96R)
		mainmemory.writebyte(Mod1M96R, SeedMod1M96R)
		mainmemory.writebyte(Mod2M96R, SeedMod2M96R)
		mainmemory.writebyte(Mod3M96R, SeedMod3M96R)
		mainmemory.writebyte(Mod4M96R, SeedMod4M96R)
		mainmemory.writebyte(Mod5M96R, SeedMod5M96R)
		mainmemory.writebyte(Mod6M96R, SeedMod6M96R)
		mainmemory.writebyte(Mod7M96R, SeedMod7M96R)
		mainmemory.writebyte(Mod8M96R, SeedMod8M96R)
		mainmemory.writebyte(Mod9M96R, SeedMod9M96R)
		mainmemory.writebyte(Mod10M96R, SeedMod10M96R)
		mainmemory.writebyte(IconP220, SeedIconP220)
		mainmemory.writebyte(MaxSlotsP220, SeedMaxSlotsP220)
		mainmemory.writebyte(TypP220, SeedTypP220)
		mainmemory.writebyte(OffP220, SeedOffP220)
		mainmemory.writebyte(RngP220, SeedRngP220)
		mainmemory.writebyte(BltP220, SeedBltP220)
		mainmemory.writebyte(CurAmmoP220, SeedBltP220)
		mainmemory.writebyte(OffPlusP220, SeedOffPlusP220)
		mainmemory.writebyte(RngPlusP220, SeedRngPlusP220)
		mainmemory.writebyte(BltPlusP220, SeedBltPlusP220)
		mainmemory.writebyte(CurSlotsP220, SeedCurSlotsP220)
		mainmemory.writebyte(Mod1P220, SeedMod1P220)
		mainmemory.writebyte(Mod2P220, SeedMod2P220)
		mainmemory.writebyte(Mod3P220, SeedMod3P220)
		mainmemory.writebyte(Mod4P220, SeedMod4P220)
		mainmemory.writebyte(Mod5P220, SeedMod5P220)
		mainmemory.writebyte(Mod6P220, SeedMod6P220)
		mainmemory.writebyte(Mod7P220, SeedMod7P220)
		mainmemory.writebyte(Mod8P220, SeedMod8P220)
		mainmemory.writebyte(Mod9P220, SeedMod9P220)
		mainmemory.writebyte(Mod10P220, SeedMod10P220)
		mainmemory.writebyte(IconP2202, SeedIconP2202)
		mainmemory.writebyte(MaxSlotsP2202, SeedMaxSlotsP2202)
		mainmemory.writebyte(TypP2202, SeedTypP2202)
		mainmemory.writebyte(OffP2202, SeedOffP2202)
		mainmemory.writebyte(RngP2202, SeedRngP2202)
		mainmemory.writebyte(BltP2202, SeedBltP2202)
		mainmemory.writebyte(CurAmmoP2202, SeedBltP2202)
		mainmemory.writebyte(OffPlusP2202, SeedOffPlusP2202)
		mainmemory.writebyte(RngPlusP2202, SeedRngPlusP2202)
		mainmemory.writebyte(BltPlusP2202, SeedBltPlusP2202)
		mainmemory.writebyte(CurSlotsP2202, SeedCurSlotsP2202)
		mainmemory.writebyte(Mod1P2202, SeedMod1P2202)
		mainmemory.writebyte(Mod2P2202, SeedMod2P2202)
		mainmemory.writebyte(Mod3P2202, SeedMod3P2202)
		mainmemory.writebyte(Mod4P2202, SeedMod4P2202)
		mainmemory.writebyte(Mod5P2202, SeedMod5P2202)
		mainmemory.writebyte(Mod6P2202, SeedMod6P2202)
		mainmemory.writebyte(Mod7P2202, SeedMod7P2202)
		mainmemory.writebyte(Mod8P2202, SeedMod8P2202)
		mainmemory.writebyte(Mod9P2202, SeedMod9P2202)
		mainmemory.writebyte(Mod10P2202, SeedMod10P2202)
		mainmemory.writebyte(IconP228, SeedIconP228)
		mainmemory.writebyte(MaxSlotsP228, SeedMaxSlotsP228)
		mainmemory.writebyte(TypP228, SeedTypP228)
		mainmemory.writebyte(OffP228, SeedOffP228)
		mainmemory.writebyte(RngP228, SeedRngP228)
		mainmemory.writebyte(BltP228, SeedBltP228)
		mainmemory.writebyte(CurAmmoP228, SeedBltP228)
		mainmemory.writebyte(OffPlusP228, SeedOffPlusP228)
		mainmemory.writebyte(RngPlusP228, SeedRngPlusP228)
		mainmemory.writebyte(BltPlusP228, SeedBltPlusP228)
		mainmemory.writebyte(CurSlotsP228, SeedCurSlotsP228)
		mainmemory.writebyte(Mod1P228, SeedMod1P228)
		mainmemory.writebyte(Mod2P228, SeedMod2P228)
		mainmemory.writebyte(Mod3P228, SeedMod3P228)
		mainmemory.writebyte(Mod4P228, SeedMod4P228)
		mainmemory.writebyte(Mod5P228, SeedMod5P228)
		mainmemory.writebyte(Mod6P228, SeedMod6P228)
		mainmemory.writebyte(Mod7P228, SeedMod7P228)
		mainmemory.writebyte(Mod8P228, SeedMod8P228)
		mainmemory.writebyte(Mod9P228, SeedMod9P228)
		mainmemory.writebyte(Mod10P228, SeedMod10P228)
		mainmemory.writebyte(IconP226, SeedIconP226)
		mainmemory.writebyte(MaxSlotsP226, SeedMaxSlotsP226)
		mainmemory.writebyte(TypP226, SeedTypP226)
		mainmemory.writebyte(OffP226, SeedOffP226)
		mainmemory.writebyte(RngP226, SeedRngP226)
		mainmemory.writebyte(BltP226, SeedBltP226)
		mainmemory.writebyte(CurAmmoP226, SeedBltP226)
		mainmemory.writebyte(OffPlusP226, SeedOffPlusP226)
		mainmemory.writebyte(RngPlusP226, SeedRngPlusP226)
		mainmemory.writebyte(BltPlusP226, SeedBltPlusP226)
		mainmemory.writebyte(CurSlotsP226, SeedCurSlotsP226)
		mainmemory.writebyte(Mod1P226, SeedMod1P226)
		mainmemory.writebyte(Mod2P226, SeedMod2P226)
		mainmemory.writebyte(Mod3P226, SeedMod3P226)
		mainmemory.writebyte(Mod4P226, SeedMod4P226)
		mainmemory.writebyte(Mod5P226, SeedMod5P226)
		mainmemory.writebyte(Mod6P226, SeedMod6P226)
		mainmemory.writebyte(Mod7P226, SeedMod7P226)
		mainmemory.writebyte(Mod8P226, SeedMod8P226)
		mainmemory.writebyte(Mod9P226, SeedMod9P226)
		mainmemory.writebyte(Mod10P226, SeedMod10P226)
		mainmemory.writebyte(IconP229, SeedIconP229)
		mainmemory.writebyte(MaxSlotsP229, SeedMaxSlotsP229)
		mainmemory.writebyte(TypP229, SeedTypP229)
		mainmemory.writebyte(OffP229, SeedOffP229)
		mainmemory.writebyte(RngP229, SeedRngP229)
		mainmemory.writebyte(BltP229, SeedBltP229)
		mainmemory.writebyte(CurAmmoP229, SeedBltP229)
		mainmemory.writebyte(OffPlusP229, SeedOffPlusP229)
		mainmemory.writebyte(RngPlusP229, SeedRngPlusP229)
		mainmemory.writebyte(BltPlusP229, SeedBltPlusP229)
		mainmemory.writebyte(CurSlotsP229, SeedCurSlotsP229)
		mainmemory.writebyte(Mod1P229, SeedMod1P229)
		mainmemory.writebyte(Mod2P229, SeedMod2P229)
		mainmemory.writebyte(Mod3P229, SeedMod3P229)
		mainmemory.writebyte(Mod4P229, SeedMod4P229)
		mainmemory.writebyte(Mod5P229, SeedMod5P229)
		mainmemory.writebyte(Mod6P229, SeedMod6P229)
		mainmemory.writebyte(Mod7P229, SeedMod7P229)
		mainmemory.writebyte(Mod8P229, SeedMod8P229)
		mainmemory.writebyte(Mod9P229, SeedMod9P229)
		mainmemory.writebyte(Mod10P229, SeedMod10P229)
		mainmemory.writebyte(IconM1911A1, SeedIconM1911A1)
		mainmemory.writebyte(MaxSlotsM1911A1, SeedMaxSlotsM1911A1)
		mainmemory.writebyte(TypM1911A1, SeedTypM1911A1)
		mainmemory.writebyte(OffM1911A1, SeedOffM1911A1)
		mainmemory.writebyte(RngM1911A1, SeedRngM1911A1)
		mainmemory.writebyte(BltM1911A1, SeedBltM1911A1)
		mainmemory.writebyte(CurAmmoM1911A1, SeedBltM1911A1)
		mainmemory.writebyte(OffPlusM1911A1, SeedOffPlusM1911A1)
		mainmemory.writebyte(RngPlusM1911A1, SeedRngPlusM1911A1)
		mainmemory.writebyte(BltPlusM1911A1, SeedBltPlusM1911A1)
		mainmemory.writebyte(CurSlotsM1911A1, SeedCurSlotsM1911A1)
		mainmemory.writebyte(Mod1M1911A1, SeedMod1M1911A1)
		mainmemory.writebyte(Mod2M1911A1, SeedMod2M1911A1)
		mainmemory.writebyte(Mod3M1911A1, SeedMod3M1911A1)
		mainmemory.writebyte(Mod4M1911A1, SeedMod4M1911A1)
		mainmemory.writebyte(Mod5M1911A1, SeedMod5M1911A1)
		mainmemory.writebyte(Mod6M1911A1, SeedMod6M1911A1)
		mainmemory.writebyte(Mod7M1911A1, SeedMod7M1911A1)
		mainmemory.writebyte(Mod8M1911A1, SeedMod8M1911A1)
		mainmemory.writebyte(Mod9M1911A1, SeedMod9M1911A1)
		mainmemory.writebyte(Mod10M1911A1, SeedMod10M1911A1)
		mainmemory.writebyte(IconM1911A2, SeedIconM1911A2)
		mainmemory.writebyte(MaxSlotsM1911A2, SeedMaxSlotsM1911A2)
		mainmemory.writebyte(TypM1911A2, SeedTypM1911A2)
		mainmemory.writebyte(OffM1911A2, SeedOffM1911A2)
		mainmemory.writebyte(RngM1911A2, SeedRngM1911A2)
		mainmemory.writebyte(BltM1911A2, SeedBltM1911A2)
		mainmemory.writebyte(CurAmmoM1911A2, SeedBltM1911A2)
		mainmemory.writebyte(OffPlusM1911A2, SeedOffPlusM1911A2)
		mainmemory.writebyte(RngPlusM1911A2, SeedRngPlusM1911A2)
		mainmemory.writebyte(BltPlusM1911A2, SeedBltPlusM1911A2)
		mainmemory.writebyte(CurSlotsM1911A2, SeedCurSlotsM1911A2)
		mainmemory.writebyte(Mod1M1911A2, SeedMod1M1911A2)
		mainmemory.writebyte(Mod2M1911A2, SeedMod2M1911A2)
		mainmemory.writebyte(Mod3M1911A2, SeedMod3M1911A2)
		mainmemory.writebyte(Mod4M1911A2, SeedMod4M1911A2)
		mainmemory.writebyte(Mod5M1911A2, SeedMod5M1911A2)
		mainmemory.writebyte(Mod6M1911A2, SeedMod6M1911A2)
		mainmemory.writebyte(Mod7M1911A2, SeedMod7M1911A2)
		mainmemory.writebyte(Mod8M1911A2, SeedMod8M1911A2)
		mainmemory.writebyte(Mod9M1911A2, SeedMod9M1911A2)
		mainmemory.writebyte(Mod10M1911A2, SeedMod10M1911A2)
		mainmemory.writebyte(IconM1911A3, SeedIconM1911A3)
		mainmemory.writebyte(MaxSlotsM1911A3, SeedMaxSlotsM1911A3)
		mainmemory.writebyte(TypM1911A3, SeedTypM1911A3)
		mainmemory.writebyte(OffM1911A3, SeedOffM1911A3)
		mainmemory.writebyte(RngM1911A3, SeedRngM1911A3)
		mainmemory.writebyte(BltM1911A3, SeedBltM1911A3)
		mainmemory.writebyte(CurAmmoM1911A3, SeedBltM1911A3)
		mainmemory.writebyte(OffPlusM1911A3, SeedOffPlusM1911A3)
		mainmemory.writebyte(RngPlusM1911A3, SeedRngPlusM1911A3)
		mainmemory.writebyte(BltPlusM1911A3, SeedBltPlusM1911A3)
		mainmemory.writebyte(CurSlotsM1911A3, SeedCurSlotsM1911A3)
		mainmemory.writebyte(Mod1M1911A3, SeedMod1M1911A3)
		mainmemory.writebyte(Mod2M1911A3, SeedMod2M1911A3)
		mainmemory.writebyte(Mod3M1911A3, SeedMod3M1911A3)
		mainmemory.writebyte(Mod4M1911A3, SeedMod4M1911A3)
		mainmemory.writebyte(Mod5M1911A3, SeedMod5M1911A3)
		mainmemory.writebyte(Mod6M1911A3, SeedMod6M1911A3)
		mainmemory.writebyte(Mod7M1911A3, SeedMod7M1911A3)
		mainmemory.writebyte(Mod8M1911A3, SeedMod8M1911A3)
		mainmemory.writebyte(Mod9M1911A3, SeedMod9M1911A3)
		mainmemory.writebyte(Mod10M1911A3, SeedMod10M1911A3)
		mainmemory.writebyte(IconM1911A4, SeedIconM1911A4)
		mainmemory.writebyte(MaxSlotsM1911A4, SeedMaxSlotsM1911A4)
		mainmemory.writebyte(TypM1911A4, SeedTypM1911A4)
		mainmemory.writebyte(OffM1911A4, SeedOffM1911A4)
		mainmemory.writebyte(RngM1911A4, SeedRngM1911A4)
		mainmemory.writebyte(BltM1911A4, SeedBltM1911A4)
		mainmemory.writebyte(CurAmmoM1911A4, SeedBltM1911A4)
		mainmemory.writebyte(OffPlusM1911A4, SeedOffPlusM1911A4)
		mainmemory.writebyte(RngPlusM1911A4, SeedRngPlusM1911A4)
		mainmemory.writebyte(BltPlusM1911A4, SeedBltPlusM1911A4)
		mainmemory.writebyte(CurSlotsM1911A4, SeedCurSlotsM1911A4)
		mainmemory.writebyte(Mod1M1911A4, SeedMod1M1911A4)
		mainmemory.writebyte(Mod2M1911A4, SeedMod2M1911A4)
		mainmemory.writebyte(Mod3M1911A4, SeedMod3M1911A4)
		mainmemory.writebyte(Mod4M1911A4, SeedMod4M1911A4)
		mainmemory.writebyte(Mod5M1911A4, SeedMod5M1911A4)
		mainmemory.writebyte(Mod6M1911A4, SeedMod6M1911A4)
		mainmemory.writebyte(Mod7M1911A4, SeedMod7M1911A4)
		mainmemory.writebyte(Mod8M1911A4, SeedMod8M1911A4)
		mainmemory.writebyte(Mod9M1911A4, SeedMod9M1911A4)
		mainmemory.writebyte(Mod10M1911A4, SeedMod10M1911A4)
		mainmemory.writebyte(IconM1911A5, SeedIconM1911A5)
		mainmemory.writebyte(MaxSlotsM1911A5, SeedMaxSlotsM1911A5)
		mainmemory.writebyte(TypM1911A5, SeedTypM1911A5)
		mainmemory.writebyte(OffM1911A5, SeedOffM1911A5)
		mainmemory.writebyte(RngM1911A5, SeedRngM1911A5)
		mainmemory.writebyte(BltM1911A5, SeedBltM1911A5)
		mainmemory.writebyte(CurAmmoM1911A5, SeedBltM1911A5)
		mainmemory.writebyte(OffPlusM1911A5, SeedOffPlusM1911A5)
		mainmemory.writebyte(RngPlusM1911A5, SeedRngPlusM1911A5)
		mainmemory.writebyte(BltPlusM1911A5, SeedBltPlusM1911A5)
		mainmemory.writebyte(CurSlotsM1911A5, SeedCurSlotsM1911A5)
		mainmemory.writebyte(Mod1M1911A5, SeedMod1M1911A5)
		mainmemory.writebyte(Mod2M1911A5, SeedMod2M1911A5)
		mainmemory.writebyte(Mod3M1911A5, SeedMod3M1911A5)
		mainmemory.writebyte(Mod4M1911A5, SeedMod4M1911A5)
		mainmemory.writebyte(Mod5M1911A5, SeedMod5M1911A5)
		mainmemory.writebyte(Mod6M1911A5, SeedMod6M1911A5)
		mainmemory.writebyte(Mod7M1911A5, SeedMod7M1911A5)
		mainmemory.writebyte(Mod8M1911A5, SeedMod8M1911A5)
		mainmemory.writebyte(Mod9M1911A5, SeedMod9M1911A5)
		mainmemory.writebyte(Mod10M1911A5, SeedMod10M1911A5)
		mainmemory.writebyte(IconP8, SeedIconP8)
		mainmemory.writebyte(MaxSlotsP8, SeedMaxSlotsP8)
		mainmemory.writebyte(TypP8, SeedTypP8)
		mainmemory.writebyte(OffP8, SeedOffP8)
		mainmemory.writebyte(RngP8, SeedRngP8)
		mainmemory.writebyte(BltP8, SeedBltP8)
		mainmemory.writebyte(CurAmmoP8, SeedBltP8)
		mainmemory.writebyte(OffPlusP8, SeedOffPlusP8)
		mainmemory.writebyte(RngPlusP8, SeedRngPlusP8)
		mainmemory.writebyte(BltPlusP8, SeedBltPlusP8)
		mainmemory.writebyte(CurSlotsP8, SeedCurSlotsP8)
		mainmemory.writebyte(Mod1P8, SeedMod1P8)
		mainmemory.writebyte(Mod2P8, SeedMod2P8)
		mainmemory.writebyte(Mod3P8, SeedMod3P8)
		mainmemory.writebyte(Mod4P8, SeedMod4P8)
		mainmemory.writebyte(Mod5P8, SeedMod5P8)
		mainmemory.writebyte(Mod6P8, SeedMod6P8)
		mainmemory.writebyte(Mod7P8, SeedMod7P8)
		mainmemory.writebyte(Mod8P8, SeedMod8P8)
		mainmemory.writebyte(Mod9P8, SeedMod9P8)
		mainmemory.writebyte(Mod10P8, SeedMod10P8)
		mainmemory.writebyte(IconUSP, SeedIconUSP)
		mainmemory.writebyte(MaxSlotsUSP, SeedMaxSlotsUSP)
		mainmemory.writebyte(TypUSP, SeedTypUSP)
		mainmemory.writebyte(OffUSP, SeedOffUSP)
		mainmemory.writebyte(RngUSP, SeedRngUSP)
		mainmemory.writebyte(BltUSP, SeedBltUSP)
		mainmemory.writebyte(CurAmmoUSP, SeedBltUSP)
		mainmemory.writebyte(OffPlusUSP, SeedOffPlusUSP)
		mainmemory.writebyte(RngPlusUSP, SeedRngPlusUSP)
		mainmemory.writebyte(BltPlusUSP, SeedBltPlusUSP)
		mainmemory.writebyte(CurSlotsUSP, SeedCurSlotsUSP)
		mainmemory.writebyte(Mod1USP, SeedMod1USP)
		mainmemory.writebyte(Mod2USP, SeedMod2USP)
		mainmemory.writebyte(Mod3USP, SeedMod3USP)
		mainmemory.writebyte(Mod4USP, SeedMod4USP)
		mainmemory.writebyte(Mod5USP, SeedMod5USP)
		mainmemory.writebyte(Mod6USP, SeedMod6USP)
		mainmemory.writebyte(Mod7USP, SeedMod7USP)
		mainmemory.writebyte(Mod8USP, SeedMod8USP)
		mainmemory.writebyte(Mod9USP, SeedMod9USP)
		mainmemory.writebyte(Mod10USP, SeedMod10USP)
		mainmemory.writebyte(IconUSP2, SeedIconUSP2)
		mainmemory.writebyte(MaxSlotsUSP2, SeedMaxSlotsUSP2)
		mainmemory.writebyte(TypUSP2, SeedTypUSP2)
		mainmemory.writebyte(OffUSP2, SeedOffUSP2)
		mainmemory.writebyte(RngUSP2, SeedRngUSP2)
		mainmemory.writebyte(BltUSP2, SeedBltUSP2)
		mainmemory.writebyte(CurAmmoUSP2, SeedBltUSP2)
		mainmemory.writebyte(OffPlusUSP2, SeedOffPlusUSP2)
		mainmemory.writebyte(RngPlusUSP2, SeedRngPlusUSP2)
		mainmemory.writebyte(BltPlusUSP2, SeedBltPlusUSP2)
		mainmemory.writebyte(CurSlotsUSP2, SeedCurSlotsUSP2)
		mainmemory.writebyte(Mod1USP2, SeedMod1USP2)
		mainmemory.writebyte(Mod2USP2, SeedMod2USP2)
		mainmemory.writebyte(Mod3USP2, SeedMod3USP2)
		mainmemory.writebyte(Mod4USP2, SeedMod4USP2)
		mainmemory.writebyte(Mod5USP2, SeedMod5USP2)
		mainmemory.writebyte(Mod6USP2, SeedMod6USP2)
		mainmemory.writebyte(Mod7USP2, SeedMod7USP2)
		mainmemory.writebyte(Mod8USP2, SeedMod8USP2)
		mainmemory.writebyte(Mod9USP2, SeedMod9USP2)
		mainmemory.writebyte(Mod10USP2, SeedMod10USP2)
		mainmemory.writebyte(IconUSP3, SeedIconUSP3)
		mainmemory.writebyte(MaxSlotsUSP3, SeedMaxSlotsUSP3)
		mainmemory.writebyte(TypUSP3, SeedTypUSP3)
		mainmemory.writebyte(OffUSP3, SeedOffUSP3)
		mainmemory.writebyte(RngUSP3, SeedRngUSP3)
		mainmemory.writebyte(BltUSP3, SeedBltUSP3)
		mainmemory.writebyte(CurAmmoUSP3, SeedBltUSP3)
		mainmemory.writebyte(OffPlusUSP3, SeedOffPlusUSP3)
		mainmemory.writebyte(RngPlusUSP3, SeedRngPlusUSP3)
		mainmemory.writebyte(BltPlusUSP3, SeedBltPlusUSP3)
		mainmemory.writebyte(CurSlotsUSP3, SeedCurSlotsUSP3)
		mainmemory.writebyte(Mod1USP3, SeedMod1USP3)
		mainmemory.writebyte(Mod2USP3, SeedMod2USP3)
		mainmemory.writebyte(Mod3USP3, SeedMod3USP3)
		mainmemory.writebyte(Mod4USP3, SeedMod4USP3)
		mainmemory.writebyte(Mod5USP3, SeedMod5USP3)
		mainmemory.writebyte(Mod6USP3, SeedMod6USP3)
		mainmemory.writebyte(Mod7USP3, SeedMod7USP3)
		mainmemory.writebyte(Mod8USP3, SeedMod8USP3)
		mainmemory.writebyte(Mod9USP3, SeedMod9USP3)
		mainmemory.writebyte(Mod10USP3, SeedMod10USP3)
		mainmemory.writebyte(IconMark23, SeedIconMark23)
		mainmemory.writebyte(MaxSlotsMark23, SeedMaxSlotsMark23)
		mainmemory.writebyte(TypMark23, SeedTypMark23)
		mainmemory.writebyte(OffMark23, SeedOffMark23)
		mainmemory.writebyte(RngMark23, SeedRngMark23)
		mainmemory.writebyte(BltMark23, SeedBltMark23)
		mainmemory.writebyte(CurAmmoMark23, SeedBltMark23)
		mainmemory.writebyte(OffPlusMark23, SeedOffPlusMark23)
		mainmemory.writebyte(RngPlusMark23, SeedRngPlusMark23)
		mainmemory.writebyte(BltPlusMark23, SeedBltPlusMark23)
		mainmemory.writebyte(CurSlotsMark23, SeedCurSlotsMark23)
		mainmemory.writebyte(Mod1Mark23, SeedMod1Mark23)
		mainmemory.writebyte(Mod2Mark23, SeedMod2Mark23)
		mainmemory.writebyte(Mod3Mark23, SeedMod3Mark23)
		mainmemory.writebyte(Mod4Mark23, SeedMod4Mark23)
		mainmemory.writebyte(Mod5Mark23, SeedMod5Mark23)
		mainmemory.writebyte(Mod6Mark23, SeedMod6Mark23)
		mainmemory.writebyte(Mod7Mark23, SeedMod7Mark23)
		mainmemory.writebyte(Mod8Mark23, SeedMod8Mark23)
		mainmemory.writebyte(Mod9Mark23, SeedMod9Mark23)
		mainmemory.writebyte(Mod10Mark23, SeedMod10Mark23)
		mainmemory.writebyte(IconG19, SeedIconG19)
		mainmemory.writebyte(MaxSlotsG19, SeedMaxSlotsG19)
		mainmemory.writebyte(TypG19, SeedTypG19)
		mainmemory.writebyte(OffG19, SeedOffG19)
		mainmemory.writebyte(RngG19, SeedRngG19)
		mainmemory.writebyte(BltG19, SeedBltG19)
		mainmemory.writebyte(CurAmmoG19, SeedBltG19)
		mainmemory.writebyte(OffPlusG19, SeedOffPlusG19)
		mainmemory.writebyte(RngPlusG19, SeedRngPlusG19)
		mainmemory.writebyte(BltPlusG19, SeedBltPlusG19)
		mainmemory.writebyte(CurSlotsG19, SeedCurSlotsG19)
		mainmemory.writebyte(Mod1G19, SeedMod1G19)
		mainmemory.writebyte(Mod2G19, SeedMod2G19)
		mainmemory.writebyte(Mod3G19, SeedMod3G19)
		mainmemory.writebyte(Mod4G19, SeedMod4G19)
		mainmemory.writebyte(Mod5G19, SeedMod5G19)
		mainmemory.writebyte(Mod6G19, SeedMod6G19)
		mainmemory.writebyte(Mod7G19, SeedMod7G19)
		mainmemory.writebyte(Mod8G19, SeedMod8G19)
		mainmemory.writebyte(Mod9G19, SeedMod9G19)
		mainmemory.writebyte(Mod10G19, SeedMod10G19)
		mainmemory.writebyte(IconG23, SeedIconG23)
		mainmemory.writebyte(MaxSlotsG23, SeedMaxSlotsG23)
		mainmemory.writebyte(TypG23, SeedTypG23)
		mainmemory.writebyte(OffG23, SeedOffG23)
		mainmemory.writebyte(RngG23, SeedRngG23)
		mainmemory.writebyte(BltG23, SeedBltG23)
		mainmemory.writebyte(CurAmmoG23, SeedBltG23)
		mainmemory.writebyte(OffPlusG23, SeedOffPlusG23)
		mainmemory.writebyte(RngPlusG23, SeedRngPlusG23)
		mainmemory.writebyte(BltPlusG23, SeedBltPlusG23)
		mainmemory.writebyte(CurSlotsG23, SeedCurSlotsG23)
		mainmemory.writebyte(Mod1G23, SeedMod1G23)
		mainmemory.writebyte(Mod2G23, SeedMod2G23)
		mainmemory.writebyte(Mod3G23, SeedMod3G23)
		mainmemory.writebyte(Mod4G23, SeedMod4G23)
		mainmemory.writebyte(Mod5G23, SeedMod5G23)
		mainmemory.writebyte(Mod6G23, SeedMod6G23)
		mainmemory.writebyte(Mod7G23, SeedMod7G23)
		mainmemory.writebyte(Mod8G23, SeedMod8G23)
		mainmemory.writebyte(Mod9G23, SeedMod9G23)
		mainmemory.writebyte(Mod10G23, SeedMod10G23)
		mainmemory.writebyte(IconG22, SeedIconG22)
		mainmemory.writebyte(MaxSlotsG22, SeedMaxSlotsG22)
		mainmemory.writebyte(TypG22, SeedTypG22)
		mainmemory.writebyte(OffG22, SeedOffG22)
		mainmemory.writebyte(RngG22, SeedRngG22)
		mainmemory.writebyte(BltG22, SeedBltG22)
		mainmemory.writebyte(CurAmmoG22, SeedBltG22)
		mainmemory.writebyte(OffPlusG22, SeedOffPlusG22)
		mainmemory.writebyte(RngPlusG22, SeedRngPlusG22)
		mainmemory.writebyte(BltPlusG22, SeedBltPlusG22)
		mainmemory.writebyte(CurSlotsG22, SeedCurSlotsG22)
		mainmemory.writebyte(Mod1G22, SeedMod1G22)
		mainmemory.writebyte(Mod2G22, SeedMod2G22)
		mainmemory.writebyte(Mod3G22, SeedMod3G22)
		mainmemory.writebyte(Mod4G22, SeedMod4G22)
		mainmemory.writebyte(Mod5G22, SeedMod5G22)
		mainmemory.writebyte(Mod6G22, SeedMod6G22)
		mainmemory.writebyte(Mod7G22, SeedMod7G22)
		mainmemory.writebyte(Mod8G22, SeedMod8G22)
		mainmemory.writebyte(Mod9G22, SeedMod9G22)
		mainmemory.writebyte(Mod10G22, SeedMod10G22)
		mainmemory.writebyte(IconG20, SeedIconG20)
		mainmemory.writebyte(MaxSlotsG20, SeedMaxSlotsG20)
		mainmemory.writebyte(TypG20, SeedTypG20)
		mainmemory.writebyte(OffG20, SeedOffG20)
		mainmemory.writebyte(RngG20, SeedRngG20)
		mainmemory.writebyte(BltG20, SeedBltG20)
		mainmemory.writebyte(CurAmmoG20, SeedBltG20)
		mainmemory.writebyte(OffPlusG20, SeedOffPlusG20)
		mainmemory.writebyte(RngPlusG20, SeedRngPlusG20)
		mainmemory.writebyte(BltPlusG20, SeedBltPlusG20)
		mainmemory.writebyte(CurSlotsG20, SeedCurSlotsG20)
		mainmemory.writebyte(Mod1G20, SeedMod1G20)
		mainmemory.writebyte(Mod2G20, SeedMod2G20)
		mainmemory.writebyte(Mod3G20, SeedMod3G20)
		mainmemory.writebyte(Mod4G20, SeedMod4G20)
		mainmemory.writebyte(Mod5G20, SeedMod5G20)
		mainmemory.writebyte(Mod6G20, SeedMod6G20)
		mainmemory.writebyte(Mod7G20, SeedMod7G20)
		mainmemory.writebyte(Mod8G20, SeedMod8G20)
		mainmemory.writebyte(Mod9G20, SeedMod9G20)
		mainmemory.writebyte(Mod10G20, SeedMod10G20)
		mainmemory.writebyte(IconM712, SeedIconM712)
		mainmemory.writebyte(MaxSlotsM712, SeedMaxSlotsM712)
		mainmemory.writebyte(TypM712, SeedTypM712)
		mainmemory.writebyte(OffM712, SeedOffM712)
		mainmemory.writebyte(RngM712, SeedRngM712)
		mainmemory.writebyte(BltM712, SeedBltM712)
		mainmemory.writebyte(CurAmmoM712, SeedBltM712)
		mainmemory.writebyte(OffPlusM712, SeedOffPlusM712)
		mainmemory.writebyte(RngPlusM712, SeedRngPlusM712)
		mainmemory.writebyte(BltPlusM712, SeedBltPlusM712)
		mainmemory.writebyte(CurSlotsM712, SeedCurSlotsM712)
		mainmemory.writebyte(Mod1M712, SeedMod1M712)
		mainmemory.writebyte(Mod2M712, SeedMod2M712)
		mainmemory.writebyte(Mod3M712, SeedMod3M712)
		mainmemory.writebyte(Mod4M712, SeedMod4M712)
		mainmemory.writebyte(Mod5M712, SeedMod5M712)
		mainmemory.writebyte(Mod6M712, SeedMod6M712)
		mainmemory.writebyte(Mod7M712, SeedMod7M712)
		mainmemory.writebyte(Mod8M712, SeedMod8M712)
		mainmemory.writebyte(Mod9M712, SeedMod9M712)
		mainmemory.writebyte(Mod10M712, SeedMod10M712)
		mainmemory.writebyte(IconPPK, SeedIconPPK)
		mainmemory.writebyte(MaxSlotsPPK, SeedMaxSlotsPPK)
		mainmemory.writebyte(TypPPK, SeedTypPPK)
		mainmemory.writebyte(OffPPK, SeedOffPPK)
		mainmemory.writebyte(RngPPK, SeedRngPPK)
		mainmemory.writebyte(BltPPK, SeedBltPPK)
		mainmemory.writebyte(CurAmmoPPK, SeedBltPPK)
		mainmemory.writebyte(OffPlusPPK, SeedOffPlusPPK)
		mainmemory.writebyte(RngPlusPPK, SeedRngPlusPPK)
		mainmemory.writebyte(BltPlusPPK, SeedBltPlusPPK)
		mainmemory.writebyte(CurSlotsPPK, SeedCurSlotsPPK)
		mainmemory.writebyte(Mod1PPK, SeedMod1PPK)
		mainmemory.writebyte(Mod2PPK, SeedMod2PPK)
		mainmemory.writebyte(Mod3PPK, SeedMod3PPK)
		mainmemory.writebyte(Mod4PPK, SeedMod4PPK)
		mainmemory.writebyte(Mod5PPK, SeedMod5PPK)
		mainmemory.writebyte(Mod6PPK, SeedMod6PPK)
		mainmemory.writebyte(Mod7PPK, SeedMod7PPK)
		mainmemory.writebyte(Mod8PPK, SeedMod8PPK)
		mainmemory.writebyte(Mod9PPK, SeedMod9PPK)
		mainmemory.writebyte(Mod10PPK, SeedMod10PPK)
		mainmemory.writebyte(IconAM44, SeedIconAM44)
		mainmemory.writebyte(MaxSlotsAM44, SeedMaxSlotsAM44)
		mainmemory.writebyte(TypAM44, SeedTypAM44)
		mainmemory.writebyte(OffAM44, SeedOffAM44)
		mainmemory.writebyte(RngAM44, SeedRngAM44)
		mainmemory.writebyte(BltAM44, SeedBltAM44)
		mainmemory.writebyte(CurAmmoAM44, SeedBltAM44)
		mainmemory.writebyte(OffPlusAM44, SeedOffPlusAM44)
		mainmemory.writebyte(RngPlusAM44, SeedRngPlusAM44)
		mainmemory.writebyte(BltPlusAM44, SeedBltPlusAM44)
		mainmemory.writebyte(CurSlotsAM44, SeedCurSlotsAM44)
		mainmemory.writebyte(Mod1AM44, SeedMod1AM44)
		mainmemory.writebyte(Mod2AM44, SeedMod2AM44)
		mainmemory.writebyte(Mod3AM44, SeedMod3AM44)
		mainmemory.writebyte(Mod4AM44, SeedMod4AM44)
		mainmemory.writebyte(Mod5AM44, SeedMod5AM44)
		mainmemory.writebyte(Mod6AM44, SeedMod6AM44)
		mainmemory.writebyte(Mod7AM44, SeedMod7AM44)
		mainmemory.writebyte(Mod8AM44, SeedMod8AM44)
		mainmemory.writebyte(Mod9AM44, SeedMod9AM44)
		mainmemory.writebyte(Mod10AM44, SeedMod10AM44)
		mainmemory.writebyte(IconMaedaGun, SeedIconMaedaGun)
		mainmemory.writebyte(MaxSlotsMaedaGun, SeedMaxSlotsMaedaGun)
		mainmemory.writebyte(TypMaedaGun, SeedTypMaedaGun)
		mainmemory.writebyte(OffMaedaGun, SeedOffMaedaGun)
		mainmemory.writebyte(RngMaedaGun, SeedRngMaedaGun)
		mainmemory.writebyte(BltMaedaGun, SeedBltMaedaGun)
		mainmemory.writebyte(CurAmmoMaedaGun, SeedBltMaedaGun)
		mainmemory.writebyte(OffPlusMaedaGun, SeedOffPlusMaedaGun)
		mainmemory.writebyte(RngPlusMaedaGun, SeedRngPlusMaedaGun)
		mainmemory.writebyte(BltPlusMaedaGun, SeedBltPlusMaedaGun)
		mainmemory.writebyte(CurSlotsMaedaGun, SeedCurSlotsMaedaGun)
		mainmemory.writebyte(Mod1MaedaGun, SeedMod1MaedaGun)
		mainmemory.writebyte(Mod2MaedaGun, SeedMod2MaedaGun)
		mainmemory.writebyte(Mod3MaedaGun, SeedMod3MaedaGun)
		mainmemory.writebyte(Mod4MaedaGun, SeedMod4MaedaGun)
		mainmemory.writebyte(Mod5MaedaGun, SeedMod5MaedaGun)
		mainmemory.writebyte(Mod6MaedaGun, SeedMod6MaedaGun)
		mainmemory.writebyte(Mod7MaedaGun, SeedMod7MaedaGun)
		mainmemory.writebyte(Mod8MaedaGun, SeedMod8MaedaGun)
		mainmemory.writebyte(Mod9MaedaGun, SeedMod9MaedaGun)
		mainmemory.writebyte(Mod10MaedaGun, SeedMod10MaedaGun)
		mainmemory.writebyte(IconPPSh41, SeedIconPPSh41)
		mainmemory.writebyte(MaxSlotsPPSh41, SeedMaxSlotsPPSh41)
		mainmemory.writebyte(TypPPSh41, SeedTypPPSh41)
		mainmemory.writebyte(OffPPSh41, SeedOffPPSh41)
		mainmemory.writebyte(RngPPSh41, SeedRngPPSh41)
		mainmemory.writebyte(BltPPSh41, SeedBltPPSh41)
		mainmemory.writebyte(CurAmmoPPSh41, SeedBltPPSh41)
		mainmemory.writebyte(OffPlusPPSh41, SeedOffPlusPPSh41)
		mainmemory.writebyte(RngPlusPPSh41, SeedRngPlusPPSh41)
		mainmemory.writebyte(BltPlusPPSh41, SeedBltPlusPPSh41)
		mainmemory.writebyte(CurSlotsPPSh41, SeedCurSlotsPPSh41)
		mainmemory.writebyte(Mod1PPSh41, SeedMod1PPSh41)
		mainmemory.writebyte(Mod2PPSh41, SeedMod2PPSh41)
		mainmemory.writebyte(Mod3PPSh41, SeedMod3PPSh41)
		mainmemory.writebyte(Mod4PPSh41, SeedMod4PPSh41)
		mainmemory.writebyte(Mod5PPSh41, SeedMod5PPSh41)
		mainmemory.writebyte(Mod6PPSh41, SeedMod6PPSh41)
		mainmemory.writebyte(Mod7PPSh41, SeedMod7PPSh41)
		mainmemory.writebyte(Mod8PPSh41, SeedMod8PPSh41)
		mainmemory.writebyte(Mod9PPSh41, SeedMod9PPSh41)
		mainmemory.writebyte(Mod10PPSh41, SeedMod10PPSh41)
		mainmemory.writebyte(IconSP1C, SeedIconSP1C)
		mainmemory.writebyte(MaxSlotsSP1C, SeedMaxSlotsSP1C)
		mainmemory.writebyte(TypSP1C, SeedTypSP1C)
		mainmemory.writebyte(OffSP1C, SeedOffSP1C)
		mainmemory.writebyte(RngSP1C, SeedRngSP1C)
		mainmemory.writebyte(BltSP1C, SeedBltSP1C)
		mainmemory.writebyte(CurAmmoSP1C, SeedBltSP1C)
		mainmemory.writebyte(OffPlusSP1C, SeedOffPlusSP1C)
		mainmemory.writebyte(RngPlusSP1C, SeedRngPlusSP1C)
		mainmemory.writebyte(BltPlusSP1C, SeedBltPlusSP1C)
		mainmemory.writebyte(CurSlotsSP1C, SeedCurSlotsSP1C)
		mainmemory.writebyte(Mod1SP1C, SeedMod1SP1C)
		mainmemory.writebyte(Mod2SP1C, SeedMod2SP1C)
		mainmemory.writebyte(Mod3SP1C, SeedMod3SP1C)
		mainmemory.writebyte(Mod4SP1C, SeedMod4SP1C)
		mainmemory.writebyte(Mod5SP1C, SeedMod5SP1C)
		mainmemory.writebyte(Mod6SP1C, SeedMod6SP1C)
		mainmemory.writebyte(Mod7SP1C, SeedMod7SP1C)
		mainmemory.writebyte(Mod8SP1C, SeedMod8SP1C)
		mainmemory.writebyte(Mod9SP1C, SeedMod9SP1C)
		mainmemory.writebyte(Mod10SP1C, SeedMod10SP1C)
		mainmemory.writebyte(IconUSPTU, SeedIconUSPTU)
		mainmemory.writebyte(MaxSlotsUSPTU, SeedMaxSlotsUSPTU)
		mainmemory.writebyte(TypUSPTU, SeedTypUSPTU)
		mainmemory.writebyte(OffUSPTU, SeedOffUSPTU)
		mainmemory.writebyte(RngUSPTU, SeedRngUSPTU)
		mainmemory.writebyte(BltUSPTU, SeedBltUSPTU)
		mainmemory.writebyte(CurAmmoUSPTU, SeedBltUSPTU)
		mainmemory.writebyte(OffPlusUSPTU, SeedOffPlusUSPTU)
		mainmemory.writebyte(RngPlusUSPTU, SeedRngPlusUSPTU)
		mainmemory.writebyte(BltPlusUSPTU, SeedBltPlusUSPTU)
		mainmemory.writebyte(CurSlotsUSPTU, SeedCurSlotsUSPTU)
		mainmemory.writebyte(Mod1USPTU, SeedMod1USPTU)
		mainmemory.writebyte(Mod2USPTU, SeedMod2USPTU)
		mainmemory.writebyte(Mod3USPTU, SeedMod3USPTU)
		mainmemory.writebyte(Mod4USPTU, SeedMod4USPTU)
		mainmemory.writebyte(Mod5USPTU, SeedMod5USPTU)
		mainmemory.writebyte(Mod6USPTU, SeedMod6USPTU)
		mainmemory.writebyte(Mod7USPTU, SeedMod7USPTU)
		mainmemory.writebyte(Mod8USPTU, SeedMod8USPTU)
		mainmemory.writebyte(Mod9USPTU, SeedMod9USPTU)
		mainmemory.writebyte(Mod10USPTU, SeedMod10USPTU)
		mainmemory.writebyte(IconAK47, SeedIconAK47)
		mainmemory.writebyte(MaxSlotsAK47, SeedMaxSlotsAK47)
		mainmemory.writebyte(TypAK47, SeedTypAK47)
		mainmemory.writebyte(OffAK47, SeedOffAK47)
		mainmemory.writebyte(RngAK47, SeedRngAK47)
		mainmemory.writebyte(BltAK47, SeedBltAK47)
		mainmemory.writebyte(CurAmmoAK47, SeedBltAK47)
		mainmemory.writebyte(OffPlusAK47, SeedOffPlusAK47)
		mainmemory.writebyte(RngPlusAK47, SeedRngPlusAK47)
		mainmemory.writebyte(BltPlusAK47, SeedBltPlusAK47)
		mainmemory.writebyte(CurSlotsAK47, SeedCurSlotsAK47)
		mainmemory.writebyte(Mod1AK47, SeedMod1AK47)
		mainmemory.writebyte(Mod2AK47, SeedMod2AK47)
		mainmemory.writebyte(Mod3AK47, SeedMod3AK47)
		mainmemory.writebyte(Mod4AK47, SeedMod4AK47)
		mainmemory.writebyte(Mod5AK47, SeedMod5AK47)
		mainmemory.writebyte(Mod6AK47, SeedMod6AK47)
		mainmemory.writebyte(Mod7AK47, SeedMod7AK47)
		mainmemory.writebyte(Mod8AK47, SeedMod8AK47)
		mainmemory.writebyte(Mod9AK47, SeedMod9AK47)
		mainmemory.writebyte(Mod10AK47, SeedMod10AK47)
		mainmemory.writebyte(IconDE50AE7, SeedIconDE50AE7)
		mainmemory.writebyte(MaxSlotsDE50AE7, SeedMaxSlotsDE50AE7)
		mainmemory.writebyte(TypDE50AE7, SeedTypDE50AE7)
		mainmemory.writebyte(OffDE50AE7, SeedOffDE50AE7)
		mainmemory.writebyte(RngDE50AE7, SeedRngDE50AE7)
		mainmemory.writebyte(BltDE50AE7, SeedBltDE50AE7)
		mainmemory.writebyte(CurAmmoDE50AE7, SeedBltDE50AE7)
		mainmemory.writebyte(OffPlusDE50AE7, SeedOffPlusDE50AE7)
		mainmemory.writebyte(RngPlusDE50AE7, SeedRngPlusDE50AE7)
		mainmemory.writebyte(BltPlusDE50AE7, SeedBltPlusDE50AE7)
		mainmemory.writebyte(CurSlotsDE50AE7, SeedCurSlotsDE50AE7)
		mainmemory.writebyte(Mod1DE50AE7, SeedMod1DE50AE7)
		mainmemory.writebyte(Mod2DE50AE7, SeedMod2DE50AE7)
		mainmemory.writebyte(Mod3DE50AE7, SeedMod3DE50AE7)
		mainmemory.writebyte(Mod4DE50AE7, SeedMod4DE50AE7)
		mainmemory.writebyte(Mod5DE50AE7, SeedMod5DE50AE7)
		mainmemory.writebyte(Mod6DE50AE7, SeedMod6DE50AE7)
		mainmemory.writebyte(Mod7DE50AE7, SeedMod7DE50AE7)
		mainmemory.writebyte(Mod8DE50AE7, SeedMod8DE50AE7)
		mainmemory.writebyte(Mod9DE50AE7, SeedMod9DE50AE7)
		mainmemory.writebyte(Mod10DE50AE7, SeedMod10DE50AE7)
		mainmemory.writebyte(IconM870, SeedIconM870)
		mainmemory.writebyte(MaxSlotsM870, SeedMaxSlotsM870)
		mainmemory.writebyte(TypM870, SeedTypM870)
		mainmemory.writebyte(OffM870, SeedOffM870)
		mainmemory.writebyte(RngM870, SeedRngM870)
		mainmemory.writebyte(BltM870, SeedBltM870)
		mainmemory.writebyte(CurAmmoM870, SeedBltM870)
		mainmemory.writebyte(OffPlusM870, SeedOffPlusM870)
		mainmemory.writebyte(RngPlusM870, SeedRngPlusM870)
		mainmemory.writebyte(BltPlusM870, SeedBltPlusM870)
		mainmemory.writebyte(CurSlotsM870, SeedCurSlotsM870)
		mainmemory.writebyte(Mod1M870, SeedMod1M870)
		mainmemory.writebyte(Mod2M870, SeedMod2M870)
		mainmemory.writebyte(Mod3M870, SeedMod3M870)
		mainmemory.writebyte(Mod4M870, SeedMod4M870)
		mainmemory.writebyte(Mod5M870, SeedMod5M870)
		mainmemory.writebyte(Mod6M870, SeedMod6M870)
		mainmemory.writebyte(Mod7M870, SeedMod7M870)
		mainmemory.writebyte(Mod8M870, SeedMod8M870)
		mainmemory.writebyte(Mod9M870, SeedMod9M870)
		mainmemory.writebyte(Mod10M870, SeedMod10M870)
		mainmemory.writebyte(IconM8702, SeedIconM8702)
		mainmemory.writebyte(MaxSlotsM8702, SeedMaxSlotsM8702)
		mainmemory.writebyte(TypM8702, SeedTypM8702)
		mainmemory.writebyte(OffM8702, SeedOffM8702)
		mainmemory.writebyte(RngM8702, SeedRngM8702)
		mainmemory.writebyte(BltM8702, SeedBltM8702)
		mainmemory.writebyte(CurAmmoM8702, SeedBltM8702)
		mainmemory.writebyte(OffPlusM8702, SeedOffPlusM8702)
		mainmemory.writebyte(RngPlusM8702, SeedRngPlusM8702)
		mainmemory.writebyte(BltPlusM8702, SeedBltPlusM8702)
		mainmemory.writebyte(CurSlotsM8702, SeedCurSlotsM8702)
		mainmemory.writebyte(Mod1M8702, SeedMod1M8702)
		mainmemory.writebyte(Mod2M8702, SeedMod2M8702)
		mainmemory.writebyte(Mod3M8702, SeedMod3M8702)
		mainmemory.writebyte(Mod4M8702, SeedMod4M8702)
		mainmemory.writebyte(Mod5M8702, SeedMod5M8702)
		mainmemory.writebyte(Mod6M8702, SeedMod6M8702)
		mainmemory.writebyte(Mod7M8702, SeedMod7M8702)
		mainmemory.writebyte(Mod8M8702, SeedMod8M8702)
		mainmemory.writebyte(Mod9M8702, SeedMod9M8702)
		mainmemory.writebyte(Mod10M8702, SeedMod10M8702)
		mainmemory.writebyte(IconM500, SeedIconM500)
		mainmemory.writebyte(MaxSlotsM500, SeedMaxSlotsM500)
		mainmemory.writebyte(TypM500, SeedTypM500)
		mainmemory.writebyte(OffM500, SeedOffM500)
		mainmemory.writebyte(RngM500, SeedRngM500)
		mainmemory.writebyte(BltM500, SeedBltM500)
		mainmemory.writebyte(CurAmmoM500, SeedBltM500)
		mainmemory.writebyte(OffPlusM500, SeedOffPlusM500)
		mainmemory.writebyte(RngPlusM500, SeedRngPlusM500)
		mainmemory.writebyte(BltPlusM500, SeedBltPlusM500)
		mainmemory.writebyte(CurSlotsM500, SeedCurSlotsM500)
		mainmemory.writebyte(Mod1M500, SeedMod1M500)
		mainmemory.writebyte(Mod2M500, SeedMod2M500)
		mainmemory.writebyte(Mod3M500, SeedMod3M500)
		mainmemory.writebyte(Mod4M500, SeedMod4M500)
		mainmemory.writebyte(Mod5M500, SeedMod5M500)
		mainmemory.writebyte(Mod6M500, SeedMod6M500)
		mainmemory.writebyte(Mod7M500, SeedMod7M500)
		mainmemory.writebyte(Mod8M500, SeedMod8M500)
		mainmemory.writebyte(Mod9M500, SeedMod9M500)
		mainmemory.writebyte(Mod10M500, SeedMod10M500)
		mainmemory.writebyte(IconM5002, SeedIconM5002)
		mainmemory.writebyte(MaxSlotsM5002, SeedMaxSlotsM5002)
		mainmemory.writebyte(TypM5002, SeedTypM5002)
		mainmemory.writebyte(OffM5002, SeedOffM5002)
		mainmemory.writebyte(RngM5002, SeedRngM5002)
		mainmemory.writebyte(BltM5002, SeedBltM5002)
		mainmemory.writebyte(CurAmmoM5002, SeedBltM5002)
		mainmemory.writebyte(OffPlusM5002, SeedOffPlusM5002)
		mainmemory.writebyte(RngPlusM5002, SeedRngPlusM5002)
		mainmemory.writebyte(BltPlusM5002, SeedBltPlusM5002)
		mainmemory.writebyte(CurSlotsM5002, SeedCurSlotsM5002)
		mainmemory.writebyte(Mod1M5002, SeedMod1M5002)
		mainmemory.writebyte(Mod2M5002, SeedMod2M5002)
		mainmemory.writebyte(Mod3M5002, SeedMod3M5002)
		mainmemory.writebyte(Mod4M5002, SeedMod4M5002)
		mainmemory.writebyte(Mod5M5002, SeedMod5M5002)
		mainmemory.writebyte(Mod6M5002, SeedMod6M5002)
		mainmemory.writebyte(Mod7M5002, SeedMod7M5002)
		mainmemory.writebyte(Mod8M5002, SeedMod8M5002)
		mainmemory.writebyte(Mod9M5002, SeedMod9M5002)
		mainmemory.writebyte(Mod10M5002, SeedMod10M5002)
		mainmemory.writebyte(IconMaverick, SeedIconMaverick)
		mainmemory.writebyte(MaxSlotsMaverick, SeedMaxSlotsMaverick)
		mainmemory.writebyte(TypMaverick, SeedTypMaverick)
		mainmemory.writebyte(OffMaverick, SeedOffMaverick)
		mainmemory.writebyte(RngMaverick, SeedRngMaverick)
		mainmemory.writebyte(BltMaverick, SeedBltMaverick)
		mainmemory.writebyte(CurAmmoMaverick, SeedBltMaverick)
		mainmemory.writebyte(OffPlusMaverick, SeedOffPlusMaverick)
		mainmemory.writebyte(RngPlusMaverick, SeedRngPlusMaverick)
		mainmemory.writebyte(BltPlusMaverick, SeedBltPlusMaverick)
		mainmemory.writebyte(CurSlotsMaverick, SeedCurSlotsMaverick)
		mainmemory.writebyte(Mod1Maverick, SeedMod1Maverick)
		mainmemory.writebyte(Mod2Maverick, SeedMod2Maverick)
		mainmemory.writebyte(Mod3Maverick, SeedMod3Maverick)
		mainmemory.writebyte(Mod4Maverick, SeedMod4Maverick)
		mainmemory.writebyte(Mod5Maverick, SeedMod5Maverick)
		mainmemory.writebyte(Mod6Maverick, SeedMod6Maverick)
		mainmemory.writebyte(Mod7Maverick, SeedMod7Maverick)
		mainmemory.writebyte(Mod8Maverick, SeedMod8Maverick)
		mainmemory.writebyte(Mod9Maverick, SeedMod9Maverick)
		mainmemory.writebyte(Mod10Maverick, SeedMod10Maverick)
		mainmemory.writebyte(IconS12, SeedIconS12)
		mainmemory.writebyte(MaxSlotsS12, SeedMaxSlotsS12)
		mainmemory.writebyte(TypS12, SeedTypS12)
		mainmemory.writebyte(OffS12, SeedOffS12)
		mainmemory.writebyte(RngS12, SeedRngS12)
		mainmemory.writebyte(BltS12, SeedBltS12)
		mainmemory.writebyte(CurAmmoS12, SeedBltS12)
		mainmemory.writebyte(OffPlusS12, SeedOffPlusS12)
		mainmemory.writebyte(RngPlusS12, SeedRngPlusS12)
		mainmemory.writebyte(BltPlusS12, SeedBltPlusS12)
		mainmemory.writebyte(CurSlotsS12, SeedCurSlotsS12)
		mainmemory.writebyte(Mod1S12, SeedMod1S12)
		mainmemory.writebyte(Mod2S12, SeedMod2S12)
		mainmemory.writebyte(Mod3S12, SeedMod3S12)
		mainmemory.writebyte(Mod4S12, SeedMod4S12)
		mainmemory.writebyte(Mod5S12, SeedMod5S12)
		mainmemory.writebyte(Mod6S12, SeedMod6S12)
		mainmemory.writebyte(Mod7S12, SeedMod7S12)
		mainmemory.writebyte(Mod8S12, SeedMod8S12)
		mainmemory.writebyte(Mod9S12, SeedMod9S12)
		mainmemory.writebyte(Mod10S12, SeedMod10S12)
		mainmemory.writebyte(IconM10B, SeedIconM10B)
		mainmemory.writebyte(MaxSlotsM10B, SeedMaxSlotsM10B)
		mainmemory.writebyte(TypM10B, SeedTypM10B)
		mainmemory.writebyte(OffM10B, SeedOffM10B)
		mainmemory.writebyte(RngM10B, SeedRngM10B)
		mainmemory.writebyte(BltM10B, SeedBltM10B)
		mainmemory.writebyte(CurAmmoM10B, SeedBltM10B)
		mainmemory.writebyte(OffPlusM10B, SeedOffPlusM10B)
		mainmemory.writebyte(RngPlusM10B, SeedRngPlusM10B)
		mainmemory.writebyte(BltPlusM10B, SeedBltPlusM10B)
		mainmemory.writebyte(CurSlotsM10B, SeedCurSlotsM10B)
		mainmemory.writebyte(Mod1M10B, SeedMod1M10B)
		mainmemory.writebyte(Mod2M10B, SeedMod2M10B)
		mainmemory.writebyte(Mod3M10B, SeedMod3M10B)
		mainmemory.writebyte(Mod4M10B, SeedMod4M10B)
		mainmemory.writebyte(Mod5M10B, SeedMod5M10B)
		mainmemory.writebyte(Mod6M10B, SeedMod6M10B)
		mainmemory.writebyte(Mod7M10B, SeedMod7M10B)
		mainmemory.writebyte(Mod8M10B, SeedMod8M10B)
		mainmemory.writebyte(Mod9M10B, SeedMod9M10B)
		mainmemory.writebyte(Mod10M10B, SeedMod10M10B)
		mainmemory.writebyte(IconM11, SeedIconM11)
		mainmemory.writebyte(MaxSlotsM11, SeedMaxSlotsM11)
		mainmemory.writebyte(TypM11, SeedTypM11)
		mainmemory.writebyte(OffM11, SeedOffM11)
		mainmemory.writebyte(RngM11, SeedRngM11)
		mainmemory.writebyte(BltM11, SeedBltM11)
		mainmemory.writebyte(CurAmmoM11, SeedBltM11)
		mainmemory.writebyte(OffPlusM11, SeedOffPlusM11)
		mainmemory.writebyte(RngPlusM11, SeedRngPlusM11)
		mainmemory.writebyte(BltPlusM11, SeedBltPlusM11)
		mainmemory.writebyte(CurSlotsM11, SeedCurSlotsM11)
		mainmemory.writebyte(Mod1M11, SeedMod1M11)
		mainmemory.writebyte(Mod2M11, SeedMod2M11)
		mainmemory.writebyte(Mod3M11, SeedMod3M11)
		mainmemory.writebyte(Mod4M11, SeedMod4M11)
		mainmemory.writebyte(Mod5M11, SeedMod5M11)
		mainmemory.writebyte(Mod6M11, SeedMod6M11)
		mainmemory.writebyte(Mod7M11, SeedMod7M11)
		mainmemory.writebyte(Mod8M11, SeedMod8M11)
		mainmemory.writebyte(Mod9M11, SeedMod9M11)
		mainmemory.writebyte(Mod10M11, SeedMod10M11)
		mainmemory.writebyte(IconM10, SeedIconM10)
		mainmemory.writebyte(MaxSlotsM10, SeedMaxSlotsM10)
		mainmemory.writebyte(TypM10, SeedTypM10)
		mainmemory.writebyte(OffM10, SeedOffM10)
		mainmemory.writebyte(RngM10, SeedRngM10)
		mainmemory.writebyte(BltM10, SeedBltM10)
		mainmemory.writebyte(CurAmmoM10, SeedBltM10)
		mainmemory.writebyte(OffPlusM10, SeedOffPlusM10)
		mainmemory.writebyte(RngPlusM10, SeedRngPlusM10)
		mainmemory.writebyte(BltPlusM10, SeedBltPlusM10)
		mainmemory.writebyte(CurSlotsM10, SeedCurSlotsM10)
		mainmemory.writebyte(Mod1M10, SeedMod1M10)
		mainmemory.writebyte(Mod2M10, SeedMod2M10)
		mainmemory.writebyte(Mod3M10, SeedMod3M10)
		mainmemory.writebyte(Mod4M10, SeedMod4M10)
		mainmemory.writebyte(Mod5M10, SeedMod5M10)
		mainmemory.writebyte(Mod6M10, SeedMod6M10)
		mainmemory.writebyte(Mod7M10, SeedMod7M10)
		mainmemory.writebyte(Mod8M10, SeedMod8M10)
		mainmemory.writebyte(Mod9M10, SeedMod9M10)
		mainmemory.writebyte(Mod10M10, SeedMod10M10)
		mainmemory.writebyte(IconMP5K, SeedIconMP5K)
		mainmemory.writebyte(MaxSlotsMP5K, SeedMaxSlotsMP5K)
		mainmemory.writebyte(TypMP5K, SeedTypMP5K)
		mainmemory.writebyte(OffMP5K, SeedOffMP5K)
		mainmemory.writebyte(RngMP5K, SeedRngMP5K)
		mainmemory.writebyte(BltMP5K, SeedBltMP5K)
		mainmemory.writebyte(CurAmmoMP5K, SeedBltMP5K)
		mainmemory.writebyte(OffPlusMP5K, SeedOffPlusMP5K)
		mainmemory.writebyte(RngPlusMP5K, SeedRngPlusMP5K)
		mainmemory.writebyte(BltPlusMP5K, SeedBltPlusMP5K)
		mainmemory.writebyte(CurSlotsMP5K, SeedCurSlotsMP5K)
		mainmemory.writebyte(Mod1MP5K, SeedMod1MP5K)
		mainmemory.writebyte(Mod2MP5K, SeedMod2MP5K)
		mainmemory.writebyte(Mod3MP5K, SeedMod3MP5K)
		mainmemory.writebyte(Mod4MP5K, SeedMod4MP5K)
		mainmemory.writebyte(Mod5MP5K, SeedMod5MP5K)
		mainmemory.writebyte(Mod6MP5K, SeedMod6MP5K)
		mainmemory.writebyte(Mod7MP5K, SeedMod7MP5K)
		mainmemory.writebyte(Mod8MP5K, SeedMod8MP5K)
		mainmemory.writebyte(Mod9MP5K, SeedMod9MP5K)
		mainmemory.writebyte(Mod10MP5K, SeedMod10MP5K)
		mainmemory.writebyte(IconMP5PDW, SeedIconMP5PDW)
		mainmemory.writebyte(MaxSlotsMP5PDW, SeedMaxSlotsMP5PDW)
		mainmemory.writebyte(TypMP5PDW, SeedTypMP5PDW)
		mainmemory.writebyte(OffMP5PDW, SeedOffMP5PDW)
		mainmemory.writebyte(RngMP5PDW, SeedRngMP5PDW)
		mainmemory.writebyte(BltMP5PDW, SeedBltMP5PDW)
		mainmemory.writebyte(CurAmmoMP5PDW, SeedBltMP5PDW)
		mainmemory.writebyte(OffPlusMP5PDW, SeedOffPlusMP5PDW)
		mainmemory.writebyte(RngPlusMP5PDW, SeedRngPlusMP5PDW)
		mainmemory.writebyte(BltPlusMP5PDW, SeedBltPlusMP5PDW)
		mainmemory.writebyte(CurSlotsMP5PDW, SeedCurSlotsMP5PDW)
		mainmemory.writebyte(Mod1MP5PDW, SeedMod1MP5PDW)
		mainmemory.writebyte(Mod2MP5PDW, SeedMod2MP5PDW)
		mainmemory.writebyte(Mod3MP5PDW, SeedMod3MP5PDW)
		mainmemory.writebyte(Mod4MP5PDW, SeedMod4MP5PDW)
		mainmemory.writebyte(Mod5MP5PDW, SeedMod5MP5PDW)
		mainmemory.writebyte(Mod6MP5PDW, SeedMod6MP5PDW)
		mainmemory.writebyte(Mod7MP5PDW, SeedMod7MP5PDW)
		mainmemory.writebyte(Mod8MP5PDW, SeedMod8MP5PDW)
		mainmemory.writebyte(Mod9MP5PDW, SeedMod9MP5PDW)
		mainmemory.writebyte(Mod10MP5PDW, SeedMod10MP5PDW)
		mainmemory.writebyte(IconMP5A5, SeedIconMP5A5)
		mainmemory.writebyte(MaxSlotsMP5A5, SeedMaxSlotsMP5A5)
		mainmemory.writebyte(TypMP5A5, SeedTypMP5A5)
		mainmemory.writebyte(OffMP5A5, SeedOffMP5A5)
		mainmemory.writebyte(RngMP5A5, SeedRngMP5A5)
		mainmemory.writebyte(BltMP5A5, SeedBltMP5A5)
		mainmemory.writebyte(CurAmmoMP5A5, SeedBltMP5A5)
		mainmemory.writebyte(OffPlusMP5A5, SeedOffPlusMP5A5)
		mainmemory.writebyte(RngPlusMP5A5, SeedRngPlusMP5A5)
		mainmemory.writebyte(BltPlusMP5A5, SeedBltPlusMP5A5)
		mainmemory.writebyte(CurSlotsMP5A5, SeedCurSlotsMP5A5)
		mainmemory.writebyte(Mod1MP5A5, SeedMod1MP5A5)
		mainmemory.writebyte(Mod2MP5A5, SeedMod2MP5A5)
		mainmemory.writebyte(Mod3MP5A5, SeedMod3MP5A5)
		mainmemory.writebyte(Mod4MP5A5, SeedMod4MP5A5)
		mainmemory.writebyte(Mod5MP5A5, SeedMod5MP5A5)
		mainmemory.writebyte(Mod6MP5A5, SeedMod6MP5A5)
		mainmemory.writebyte(Mod7MP5A5, SeedMod7MP5A5)
		mainmemory.writebyte(Mod8MP5A5, SeedMod8MP5A5)
		mainmemory.writebyte(Mod9MP5A5, SeedMod9MP5A5)
		mainmemory.writebyte(Mod10MP5A5, SeedMod10MP5A5)
		mainmemory.writebyte(IconMP5SD6, SeedIconMP5SD6)
		mainmemory.writebyte(MaxSlotsMP5SD6, SeedMaxSlotsMP5SD6)
		mainmemory.writebyte(TypMP5SD6, SeedTypMP5SD6)
		mainmemory.writebyte(OffMP5SD6, SeedOffMP5SD6)
		mainmemory.writebyte(RngMP5SD6, SeedRngMP5SD6)
		mainmemory.writebyte(BltMP5SD6, SeedBltMP5SD6)
		mainmemory.writebyte(CurAmmoMP5SD6, SeedBltMP5SD6)
		mainmemory.writebyte(OffPlusMP5SD6, SeedOffPlusMP5SD6)
		mainmemory.writebyte(RngPlusMP5SD6, SeedRngPlusMP5SD6)
		mainmemory.writebyte(BltPlusMP5SD6, SeedBltPlusMP5SD6)
		mainmemory.writebyte(CurSlotsMP5SD6, SeedCurSlotsMP5SD6)
		mainmemory.writebyte(Mod1MP5SD6, SeedMod1MP5SD6)
		mainmemory.writebyte(Mod2MP5SD6, SeedMod2MP5SD6)
		mainmemory.writebyte(Mod3MP5SD6, SeedMod3MP5SD6)
		mainmemory.writebyte(Mod4MP5SD6, SeedMod4MP5SD6)
		mainmemory.writebyte(Mod5MP5SD6, SeedMod5MP5SD6)
		mainmemory.writebyte(Mod6MP5SD6, SeedMod6MP5SD6)
		mainmemory.writebyte(Mod7MP5SD6, SeedMod7MP5SD6)
		mainmemory.writebyte(Mod8MP5SD6, SeedMod8MP5SD6)
		mainmemory.writebyte(Mod9MP5SD6, SeedMod9MP5SD6)
		mainmemory.writebyte(Mod10MP5SD6, SeedMod10MP5SD6)
		mainmemory.writebyte(IconMicroUZ, SeedIconMicroUZ)
		mainmemory.writebyte(MaxSlotsMicroUZ, SeedMaxSlotsMicroUZ)
		mainmemory.writebyte(TypMicroUZ, SeedTypMicroUZ)
		mainmemory.writebyte(OffMicroUZ, SeedOffMicroUZ)
		mainmemory.writebyte(RngMicroUZ, SeedRngMicroUZ)
		mainmemory.writebyte(BltMicroUZ, SeedBltMicroUZ)
		mainmemory.writebyte(CurAmmoMicroUZ, SeedBltMicroUZ)
		mainmemory.writebyte(OffPlusMicroUZ, SeedOffPlusMicroUZ)
		mainmemory.writebyte(RngPlusMicroUZ, SeedRngPlusMicroUZ)
		mainmemory.writebyte(BltPlusMicroUZ, SeedBltPlusMicroUZ)
		mainmemory.writebyte(CurSlotsMicroUZ, SeedCurSlotsMicroUZ)
		mainmemory.writebyte(Mod1MicroUZ, SeedMod1MicroUZ)
		mainmemory.writebyte(Mod2MicroUZ, SeedMod2MicroUZ)
		mainmemory.writebyte(Mod3MicroUZ, SeedMod3MicroUZ)
		mainmemory.writebyte(Mod4MicroUZ, SeedMod4MicroUZ)
		mainmemory.writebyte(Mod5MicroUZ, SeedMod5MicroUZ)
		mainmemory.writebyte(Mod6MicroUZ, SeedMod6MicroUZ)
		mainmemory.writebyte(Mod7MicroUZ, SeedMod7MicroUZ)
		mainmemory.writebyte(Mod8MicroUZ, SeedMod8MicroUZ)
		mainmemory.writebyte(Mod9MicroUZ, SeedMod9MicroUZ)
		mainmemory.writebyte(Mod10MicroUZ, SeedMod10MicroUZ)
		mainmemory.writebyte(IconMiniUZ, SeedIconMiniUZ)
		mainmemory.writebyte(MaxSlotsMiniUZ, SeedMaxSlotsMiniUZ)
		mainmemory.writebyte(TypMiniUZ, SeedTypMiniUZ)
		mainmemory.writebyte(OffMiniUZ, SeedOffMiniUZ)
		mainmemory.writebyte(RngMiniUZ, SeedRngMiniUZ)
		mainmemory.writebyte(BltMiniUZ, SeedBltMiniUZ)
		mainmemory.writebyte(CurAmmoMiniUZ, SeedBltMiniUZ)
		mainmemory.writebyte(OffPlusMiniUZ, SeedOffPlusMiniUZ)
		mainmemory.writebyte(RngPlusMiniUZ, SeedRngPlusMiniUZ)
		mainmemory.writebyte(BltPlusMiniUZ, SeedBltPlusMiniUZ)
		mainmemory.writebyte(CurSlotsMiniUZ, SeedCurSlotsMiniUZ)
		mainmemory.writebyte(Mod1MiniUZ, SeedMod1MiniUZ)
		mainmemory.writebyte(Mod2MiniUZ, SeedMod2MiniUZ)
		mainmemory.writebyte(Mod3MiniUZ, SeedMod3MiniUZ)
		mainmemory.writebyte(Mod4MiniUZ, SeedMod4MiniUZ)
		mainmemory.writebyte(Mod5MiniUZ, SeedMod5MiniUZ)
		mainmemory.writebyte(Mod6MiniUZ, SeedMod6MiniUZ)
		mainmemory.writebyte(Mod7MiniUZ, SeedMod7MiniUZ)
		mainmemory.writebyte(Mod8MiniUZ, SeedMod8MiniUZ)
		mainmemory.writebyte(Mod9MiniUZ, SeedMod9MiniUZ)
		mainmemory.writebyte(Mod10MiniUZ, SeedMod10MiniUZ)
		mainmemory.writebyte(IconFullUZ, SeedIconFullUZ)
		mainmemory.writebyte(MaxSlotsFullUZ, SeedMaxSlotsFullUZ)
		mainmemory.writebyte(TypFullUZ, SeedTypFullUZ)
		mainmemory.writebyte(OffFullUZ, SeedOffFullUZ)
		mainmemory.writebyte(RngFullUZ, SeedRngFullUZ)
		mainmemory.writebyte(BltFullUZ, SeedBltFullUZ)
		mainmemory.writebyte(CurAmmoFullUZ, SeedBltFullUZ)
		mainmemory.writebyte(OffPlusFullUZ, SeedOffPlusFullUZ)
		mainmemory.writebyte(RngPlusFullUZ, SeedRngPlusFullUZ)
		mainmemory.writebyte(BltPlusFullUZ, SeedBltPlusFullUZ)
		mainmemory.writebyte(CurSlotsFullUZ, SeedCurSlotsFullUZ)
		mainmemory.writebyte(Mod1FullUZ, SeedMod1FullUZ)
		mainmemory.writebyte(Mod2FullUZ, SeedMod2FullUZ)
		mainmemory.writebyte(Mod3FullUZ, SeedMod3FullUZ)
		mainmemory.writebyte(Mod4FullUZ, SeedMod4FullUZ)
		mainmemory.writebyte(Mod5FullUZ, SeedMod5FullUZ)
		mainmemory.writebyte(Mod6FullUZ, SeedMod6FullUZ)
		mainmemory.writebyte(Mod7FullUZ, SeedMod7FullUZ)
		mainmemory.writebyte(Mod8FullUZ, SeedMod8FullUZ)
		mainmemory.writebyte(Mod9FullUZ, SeedMod9FullUZ)
		mainmemory.writebyte(Mod10FullUZ, SeedMod10FullUZ)
		mainmemory.writebyte(IconP90, SeedIconP90)
		mainmemory.writebyte(MaxSlotsP90, SeedMaxSlotsP90)
		mainmemory.writebyte(TypP90, SeedTypP90)
		mainmemory.writebyte(OffP90, SeedOffP90)
		mainmemory.writebyte(RngP90, SeedRngP90)
		mainmemory.writebyte(BltP90, SeedBltP90)
		mainmemory.writebyte(CurAmmoP90, SeedBltP90)
		mainmemory.writebyte(OffPlusP90, SeedOffPlusP90)
		mainmemory.writebyte(RngPlusP90, SeedRngPlusP90)
		mainmemory.writebyte(BltPlusP90, SeedBltPlusP90)
		mainmemory.writebyte(CurSlotsP90, SeedCurSlotsP90)
		mainmemory.writebyte(Mod1P90, SeedMod1P90)
		mainmemory.writebyte(Mod2P90, SeedMod2P90)
		mainmemory.writebyte(Mod3P90, SeedMod3P90)
		mainmemory.writebyte(Mod4P90, SeedMod4P90)
		mainmemory.writebyte(Mod5P90, SeedMod5P90)
		mainmemory.writebyte(Mod6P90, SeedMod6P90)
		mainmemory.writebyte(Mod7P90, SeedMod7P90)
		mainmemory.writebyte(Mod8P90, SeedMod8P90)
		mainmemory.writebyte(Mod9P90, SeedMod9P90)
		mainmemory.writebyte(Mod10P90, SeedMod10P90)
		mainmemory.writebyte(IconM16A1, SeedIconM16A1)
		mainmemory.writebyte(MaxSlotsM16A1, SeedMaxSlotsM16A1)
		mainmemory.writebyte(TypM16A1, SeedTypM16A1)
		mainmemory.writebyte(OffM16A1, SeedOffM16A1)
		mainmemory.writebyte(RngM16A1, SeedRngM16A1)
		mainmemory.writebyte(BltM16A1, SeedBltM16A1)
		mainmemory.writebyte(CurAmmoM16A1, SeedBltM16A1)
		mainmemory.writebyte(OffPlusM16A1, SeedOffPlusM16A1)
		mainmemory.writebyte(RngPlusM16A1, SeedRngPlusM16A1)
		mainmemory.writebyte(BltPlusM16A1, SeedBltPlusM16A1)
		mainmemory.writebyte(CurSlotsM16A1, SeedCurSlotsM16A1)
		mainmemory.writebyte(Mod1M16A1, SeedMod1M16A1)
		mainmemory.writebyte(Mod2M16A1, SeedMod2M16A1)
		mainmemory.writebyte(Mod3M16A1, SeedMod3M16A1)
		mainmemory.writebyte(Mod4M16A1, SeedMod4M16A1)
		mainmemory.writebyte(Mod5M16A1, SeedMod5M16A1)
		mainmemory.writebyte(Mod6M16A1, SeedMod6M16A1)
		mainmemory.writebyte(Mod7M16A1, SeedMod7M16A1)
		mainmemory.writebyte(Mod8M16A1, SeedMod8M16A1)
		mainmemory.writebyte(Mod9M16A1, SeedMod9M16A1)
		mainmemory.writebyte(Mod10M16A1, SeedMod10M16A1)
		mainmemory.writebyte(IconM16A2, SeedIconM16A2)
		mainmemory.writebyte(MaxSlotsM16A2, SeedMaxSlotsM16A2)
		mainmemory.writebyte(TypM16A2, SeedTypM16A2)
		mainmemory.writebyte(OffM16A2, SeedOffM16A2)
		mainmemory.writebyte(RngM16A2, SeedRngM16A2)
		mainmemory.writebyte(BltM16A2, SeedBltM16A2)
		mainmemory.writebyte(CurAmmoM16A2, SeedBltM16A2)
		mainmemory.writebyte(OffPlusM16A2, SeedOffPlusM16A2)
		mainmemory.writebyte(RngPlusM16A2, SeedRngPlusM16A2)
		mainmemory.writebyte(BltPlusM16A2, SeedBltPlusM16A2)
		mainmemory.writebyte(CurSlotsM16A2, SeedCurSlotsM16A2)
		mainmemory.writebyte(Mod1M16A2, SeedMod1M16A2)
		mainmemory.writebyte(Mod2M16A2, SeedMod2M16A2)
		mainmemory.writebyte(Mod3M16A2, SeedMod3M16A2)
		mainmemory.writebyte(Mod4M16A2, SeedMod4M16A2)
		mainmemory.writebyte(Mod5M16A2, SeedMod5M16A2)
		mainmemory.writebyte(Mod6M16A2, SeedMod6M16A2)
		mainmemory.writebyte(Mod7M16A2, SeedMod7M16A2)
		mainmemory.writebyte(Mod8M16A2, SeedMod8M16A2)
		mainmemory.writebyte(Mod9M16A2, SeedMod9M16A2)
		mainmemory.writebyte(Mod10M16A2, SeedMod10M16A2)
		mainmemory.writebyte(IconSG550, SeedIconSG550)
		mainmemory.writebyte(MaxSlotsSG550, SeedMaxSlotsSG550)
		mainmemory.writebyte(TypSG550, SeedTypSG550)
		mainmemory.writebyte(OffSG550, SeedOffSG550)
		mainmemory.writebyte(RngSG550, SeedRngSG550)
		mainmemory.writebyte(BltSG550, SeedBltSG550)
		mainmemory.writebyte(CurAmmoSG550, SeedBltSG550)
		mainmemory.writebyte(OffPlusSG550, SeedOffPlusSG550)
		mainmemory.writebyte(RngPlusSG550, SeedRngPlusSG550)
		mainmemory.writebyte(BltPlusSG550, SeedBltPlusSG550)
		mainmemory.writebyte(CurSlotsSG550, SeedCurSlotsSG550)
		mainmemory.writebyte(Mod1SG550, SeedMod1SG550)
		mainmemory.writebyte(Mod2SG550, SeedMod2SG550)
		mainmemory.writebyte(Mod3SG550, SeedMod3SG550)
		mainmemory.writebyte(Mod4SG550, SeedMod4SG550)
		mainmemory.writebyte(Mod5SG550, SeedMod5SG550)
		mainmemory.writebyte(Mod6SG550, SeedMod6SG550)
		mainmemory.writebyte(Mod7SG550, SeedMod7SG550)
		mainmemory.writebyte(Mod8SG550, SeedMod8SG550)
		mainmemory.writebyte(Mod9SG550, SeedMod9SG550)
		mainmemory.writebyte(Mod10SG550, SeedMod10SG550)
		mainmemory.writebyte(IconSAR, SeedIconSAR)
		mainmemory.writebyte(MaxSlotsSAR, SeedMaxSlotsSAR)
		mainmemory.writebyte(TypSAR, SeedTypSAR)
		mainmemory.writebyte(OffSAR, SeedOffSAR)
		mainmemory.writebyte(RngSAR, SeedRngSAR)
		mainmemory.writebyte(BltSAR, SeedBltSAR)
		mainmemory.writebyte(CurAmmoSAR, SeedBltSAR)
		mainmemory.writebyte(OffPlusSAR, SeedOffPlusSAR)
		mainmemory.writebyte(RngPlusSAR, SeedRngPlusSAR)
		mainmemory.writebyte(BltPlusSAR, SeedBltPlusSAR)
		mainmemory.writebyte(CurSlotsSAR, SeedCurSlotsSAR)
		mainmemory.writebyte(Mod1SAR, SeedMod1SAR)
		mainmemory.writebyte(Mod2SAR, SeedMod2SAR)
		mainmemory.writebyte(Mod3SAR, SeedMod3SAR)
		mainmemory.writebyte(Mod4SAR, SeedMod4SAR)
		mainmemory.writebyte(Mod5SAR, SeedMod5SAR)
		mainmemory.writebyte(Mod6SAR, SeedMod6SAR)
		mainmemory.writebyte(Mod7SAR, SeedMod7SAR)
		mainmemory.writebyte(Mod8SAR, SeedMod8SAR)
		mainmemory.writebyte(Mod9SAR, SeedMod9SAR)
		mainmemory.writebyte(Mod10SAR, SeedMod10SAR)
		mainmemory.writebyte(IconG3A3, SeedIconG3A3)
		mainmemory.writebyte(MaxSlotsG3A3, SeedMaxSlotsG3A3)
		mainmemory.writebyte(TypG3A3, SeedTypG3A3)
		mainmemory.writebyte(OffG3A3, SeedOffG3A3)
		mainmemory.writebyte(RngG3A3, SeedRngG3A3)
		mainmemory.writebyte(BltG3A3, SeedBltG3A3)
		mainmemory.writebyte(CurAmmoG3A3, SeedBltG3A3)
		mainmemory.writebyte(OffPlusG3A3, SeedOffPlusG3A3)
		mainmemory.writebyte(RngPlusG3A3, SeedRngPlusG3A3)
		mainmemory.writebyte(BltPlusG3A3, SeedBltPlusG3A3)
		mainmemory.writebyte(CurSlotsG3A3, SeedCurSlotsG3A3)
		mainmemory.writebyte(Mod1G3A3, SeedMod1G3A3)
		mainmemory.writebyte(Mod2G3A3, SeedMod2G3A3)
		mainmemory.writebyte(Mod3G3A3, SeedMod3G3A3)
		mainmemory.writebyte(Mod4G3A3, SeedMod4G3A3)
		mainmemory.writebyte(Mod5G3A3, SeedMod5G3A3)
		mainmemory.writebyte(Mod6G3A3, SeedMod6G3A3)
		mainmemory.writebyte(Mod7G3A3, SeedMod7G3A3)
		mainmemory.writebyte(Mod8G3A3, SeedMod8G3A3)
		mainmemory.writebyte(Mod9G3A3, SeedMod9G3A3)
		mainmemory.writebyte(Mod10G3A3, SeedMod10G3A3)
		mainmemory.writebyte(IconType64, SeedIconType64)
		mainmemory.writebyte(MaxSlotsType64, SeedMaxSlotsType64)
		mainmemory.writebyte(TypType64, SeedTypType64)
		mainmemory.writebyte(OffType64, SeedOffType64)
		mainmemory.writebyte(RngType64, SeedRngType64)
		mainmemory.writebyte(BltType64, SeedBltType64)
		mainmemory.writebyte(CurAmmoType64, SeedBltType64)
		mainmemory.writebyte(OffPlusType64, SeedOffPlusType64)
		mainmemory.writebyte(RngPlusType64, SeedRngPlusType64)
		mainmemory.writebyte(BltPlusType64, SeedBltPlusType64)
		mainmemory.writebyte(CurSlotsType64, SeedCurSlotsType64)
		mainmemory.writebyte(Mod1Type64, SeedMod1Type64)
		mainmemory.writebyte(Mod2Type64, SeedMod2Type64)
		mainmemory.writebyte(Mod3Type64, SeedMod3Type64)
		mainmemory.writebyte(Mod4Type64, SeedMod4Type64)
		mainmemory.writebyte(Mod5Type64, SeedMod5Type64)
		mainmemory.writebyte(Mod6Type64, SeedMod6Type64)
		mainmemory.writebyte(Mod7Type64, SeedMod7Type64)
		mainmemory.writebyte(Mod8Type64, SeedMod8Type64)
		mainmemory.writebyte(Mod9Type64, SeedMod9Type64)
		mainmemory.writebyte(Mod10Type64, SeedMod10Type64)
		mainmemory.writebyte(IconXM177E2, SeedIconXM177E2)
		mainmemory.writebyte(MaxSlotsXM177E2, SeedMaxSlotsXM177E2)
		mainmemory.writebyte(TypXM177E2, SeedTypXM177E2)
		mainmemory.writebyte(OffXM177E2, SeedOffXM177E2)
		mainmemory.writebyte(RngXM177E2, SeedRngXM177E2)
		mainmemory.writebyte(BltXM177E2, SeedBltXM177E2)
		mainmemory.writebyte(CurAmmoXM177E2, SeedBltXM177E2)
		mainmemory.writebyte(OffPlusXM177E2, SeedOffPlusXM177E2)
		mainmemory.writebyte(RngPlusXM177E2, SeedRngPlusXM177E2)
		mainmemory.writebyte(BltPlusXM177E2, SeedBltPlusXM177E2)
		mainmemory.writebyte(CurSlotsXM177E2, SeedCurSlotsXM177E2)
		mainmemory.writebyte(Mod1XM177E2, SeedMod1XM177E2)
		mainmemory.writebyte(Mod2XM177E2, SeedMod2XM177E2)
		mainmemory.writebyte(Mod3XM177E2, SeedMod3XM177E2)
		mainmemory.writebyte(Mod4XM177E2, SeedMod4XM177E2)
		mainmemory.writebyte(Mod5XM177E2, SeedMod5XM177E2)
		mainmemory.writebyte(Mod6XM177E2, SeedMod6XM177E2)
		mainmemory.writebyte(Mod7XM177E2, SeedMod7XM177E2)
		mainmemory.writebyte(Mod8XM177E2, SeedMod8XM177E2)
		mainmemory.writebyte(Mod9XM177E2, SeedMod9XM177E2)
		mainmemory.writebyte(Mod10XM177E2, SeedMod10XM177E2)
		mainmemory.writebyte(IconPSG1, SeedIconPSG1)
		mainmemory.writebyte(MaxSlotsPSG1, SeedMaxSlotsPSG1)
		mainmemory.writebyte(TypPSG1, SeedTypPSG1)
		mainmemory.writebyte(OffPSG1, SeedOffPSG1)
		mainmemory.writebyte(RngPSG1, SeedRngPSG1)
		mainmemory.writebyte(BltPSG1, SeedBltPSG1)
		mainmemory.writebyte(CurAmmoPSG1, SeedBltPSG1)
		mainmemory.writebyte(OffPlusPSG1, SeedOffPlusPSG1)
		mainmemory.writebyte(RngPlusPSG1, SeedRngPlusPSG1)
		mainmemory.writebyte(BltPlusPSG1, SeedBltPlusPSG1)
		mainmemory.writebyte(CurSlotsPSG1, SeedCurSlotsPSG1)
		mainmemory.writebyte(Mod1PSG1, SeedMod1PSG1)
		mainmemory.writebyte(Mod2PSG1, SeedMod2PSG1)
		mainmemory.writebyte(Mod3PSG1, SeedMod3PSG1)
		mainmemory.writebyte(Mod4PSG1, SeedMod4PSG1)
		mainmemory.writebyte(Mod5PSG1, SeedMod5PSG1)
		mainmemory.writebyte(Mod6PSG1, SeedMod6PSG1)
		mainmemory.writebyte(Mod7PSG1, SeedMod7PSG1)
		mainmemory.writebyte(Mod8PSG1, SeedMod8PSG1)
		mainmemory.writebyte(Mod9PSG1, SeedMod9PSG1)
		mainmemory.writebyte(Mod10PSG1, SeedMod10PSG1)
		mainmemory.writebyte(IconFAMAS, SeedIconFAMAS)
		mainmemory.writebyte(MaxSlotsFAMAS, SeedMaxSlotsFAMAS)
		mainmemory.writebyte(TypFAMAS, SeedTypFAMAS)
		mainmemory.writebyte(OffFAMAS, SeedOffFAMAS)
		mainmemory.writebyte(RngFAMAS, SeedRngFAMAS)
		mainmemory.writebyte(BltFAMAS, SeedBltFAMAS)
		mainmemory.writebyte(CurAmmoFAMAS, SeedBltFAMAS)
		mainmemory.writebyte(OffPlusFAMAS, SeedOffPlusFAMAS)
		mainmemory.writebyte(RngPlusFAMAS, SeedRngPlusFAMAS)
		mainmemory.writebyte(BltPlusFAMAS, SeedBltPlusFAMAS)
		mainmemory.writebyte(CurSlotsFAMAS, SeedCurSlotsFAMAS)
		mainmemory.writebyte(Mod1FAMAS, SeedMod1FAMAS)
		mainmemory.writebyte(Mod2FAMAS, SeedMod2FAMAS)
		mainmemory.writebyte(Mod3FAMAS, SeedMod3FAMAS)
		mainmemory.writebyte(Mod4FAMAS, SeedMod4FAMAS)
		mainmemory.writebyte(Mod5FAMAS, SeedMod5FAMAS)
		mainmemory.writebyte(Mod6FAMAS, SeedMod6FAMAS)
		mainmemory.writebyte(Mod7FAMAS, SeedMod7FAMAS)
		mainmemory.writebyte(Mod8FAMAS, SeedMod8FAMAS)
		mainmemory.writebyte(Mod9FAMAS, SeedMod9FAMAS)
		mainmemory.writebyte(Mod10FAMAS, SeedMod10FAMAS)
		mainmemory.writebyte(IconMAG, SeedIconMAG)
		mainmemory.writebyte(MaxSlotsMAG, SeedMaxSlotsMAG)
		mainmemory.writebyte(TypMAG, SeedTypMAG)
		mainmemory.writebyte(OffMAG, SeedOffMAG)
		mainmemory.writebyte(RngMAG, SeedRngMAG)
		mainmemory.writebyte(BltMAG, SeedBltMAG)
		mainmemory.writebyte(CurAmmoMAG, SeedBltMAG)
		mainmemory.writebyte(OffPlusMAG, SeedOffPlusMAG)
		mainmemory.writebyte(RngPlusMAG, SeedRngPlusMAG)
		mainmemory.writebyte(BltPlusMAG, SeedBltPlusMAG)
		mainmemory.writebyte(CurSlotsMAG, SeedCurSlotsMAG)
		mainmemory.writebyte(Mod1MAG, SeedMod1MAG)
		mainmemory.writebyte(Mod2MAG, SeedMod2MAG)
		mainmemory.writebyte(Mod3MAG, SeedMod3MAG)
		mainmemory.writebyte(Mod4MAG, SeedMod4MAG)
		mainmemory.writebyte(Mod5MAG, SeedMod5MAG)
		mainmemory.writebyte(Mod6MAG, SeedMod6MAG)
		mainmemory.writebyte(Mod7MAG, SeedMod7MAG)
		mainmemory.writebyte(Mod8MAG, SeedMod8MAG)
		mainmemory.writebyte(Mod9MAG, SeedMod9MAG)
		mainmemory.writebyte(Mod10MAG, SeedMod10MAG)
		mainmemory.writebyte(IconM203, SeedIconM203)
		mainmemory.writebyte(MaxSlotsM203, SeedMaxSlotsM203)
		mainmemory.writebyte(TypM203, SeedTypM203)
		mainmemory.writebyte(OffM203, SeedOffM203)
		mainmemory.writebyte(RngM203, SeedRngM203)
		mainmemory.writebyte(BltM203, SeedBltM203)
		mainmemory.writebyte(CurAmmoM203, SeedBltM203)
		mainmemory.writebyte(OffPlusM203, SeedOffPlusM203)
		mainmemory.writebyte(RngPlusM203, SeedRngPlusM203)
		mainmemory.writebyte(BltPlusM203, SeedBltPlusM203)
		mainmemory.writebyte(CurSlotsM203, SeedCurSlotsM203)
		mainmemory.writebyte(Mod1M203, SeedMod1M203)
		mainmemory.writebyte(Mod2M203, SeedMod2M203)
		mainmemory.writebyte(Mod3M203, SeedMod3M203)
		mainmemory.writebyte(Mod4M203, SeedMod4M203)
		mainmemory.writebyte(Mod5M203, SeedMod5M203)
		mainmemory.writebyte(Mod6M203, SeedMod6M203)
		mainmemory.writebyte(Mod7M203, SeedMod7M203)
		mainmemory.writebyte(Mod8M203, SeedMod8M203)
		mainmemory.writebyte(Mod9M203, SeedMod9M203)
		mainmemory.writebyte(Mod10M203, SeedMod10M203)
		mainmemory.writebyte(IconM2032, SeedIconM2032)
		mainmemory.writebyte(MaxSlotsM2032, SeedMaxSlotsM2032)
		mainmemory.writebyte(TypM2032, SeedTypM2032)
		mainmemory.writebyte(OffM2032, SeedOffM2032)
		mainmemory.writebyte(RngM2032, SeedRngM2032)
		mainmemory.writebyte(BltM2032, SeedBltM2032)
		mainmemory.writebyte(CurAmmoM2032, SeedBltM2032)
		mainmemory.writebyte(OffPlusM2032, SeedOffPlusM2032)
		mainmemory.writebyte(RngPlusM2032, SeedRngPlusM2032)
		mainmemory.writebyte(BltPlusM2032, SeedBltPlusM2032)
		mainmemory.writebyte(CurSlotsM2032, SeedCurSlotsM2032)
		mainmemory.writebyte(Mod1M2032, SeedMod1M2032)
		mainmemory.writebyte(Mod2M2032, SeedMod2M2032)
		mainmemory.writebyte(Mod3M2032, SeedMod3M2032)
		mainmemory.writebyte(Mod4M2032, SeedMod4M2032)
		mainmemory.writebyte(Mod5M2032, SeedMod5M2032)
		mainmemory.writebyte(Mod6M2032, SeedMod6M2032)
		mainmemory.writebyte(Mod7M2032, SeedMod7M2032)
		mainmemory.writebyte(Mod8M2032, SeedMod8M2032)
		mainmemory.writebyte(Mod9M2032, SeedMod9M2032)
		mainmemory.writebyte(Mod10M2032, SeedMod10M2032)
		mainmemory.writebyte(IconM2033, SeedIconM2033)
		mainmemory.writebyte(MaxSlotsM2033, SeedMaxSlotsM2033)
		mainmemory.writebyte(TypM2033, SeedTypM2033)
		mainmemory.writebyte(OffM2033, SeedOffM2033)
		mainmemory.writebyte(RngM2033, SeedRngM2033)
		mainmemory.writebyte(BltM2033, SeedBltM2033)
		mainmemory.writebyte(CurAmmoM2033, SeedBltM2033)
		mainmemory.writebyte(OffPlusM2033, SeedOffPlusM2033)
		mainmemory.writebyte(RngPlusM2033, SeedRngPlusM2033)
		mainmemory.writebyte(BltPlusM2033, SeedBltPlusM2033)
		mainmemory.writebyte(CurSlotsM2033, SeedCurSlotsM2033)
		mainmemory.writebyte(Mod1M2033, SeedMod1M2033)
		mainmemory.writebyte(Mod2M2033, SeedMod2M2033)
		mainmemory.writebyte(Mod3M2033, SeedMod3M2033)
		mainmemory.writebyte(Mod4M2033, SeedMod4M2033)
		mainmemory.writebyte(Mod5M2033, SeedMod5M2033)
		mainmemory.writebyte(Mod6M2033, SeedMod6M2033)
		mainmemory.writebyte(Mod7M2033, SeedMod7M2033)
		mainmemory.writebyte(Mod8M2033, SeedMod8M2033)
		mainmemory.writebyte(Mod9M2033, SeedMod9M2033)
		mainmemory.writebyte(Mod10M2033, SeedMod10M2033)
		mainmemory.writebyte(IconM2034, SeedIconM2034)
		mainmemory.writebyte(MaxSlotsM2034, SeedMaxSlotsM2034)
		mainmemory.writebyte(TypM2034, SeedTypM2034)
		mainmemory.writebyte(OffM2034, SeedOffM2034)
		mainmemory.writebyte(RngM2034, SeedRngM2034)
		mainmemory.writebyte(BltM2034, SeedBltM2034)
		mainmemory.writebyte(CurAmmoM2034, SeedBltM2034)
		mainmemory.writebyte(OffPlusM2034, SeedOffPlusM2034)
		mainmemory.writebyte(RngPlusM2034, SeedRngPlusM2034)
		mainmemory.writebyte(BltPlusM2034, SeedBltPlusM2034)
		mainmemory.writebyte(CurSlotsM2034, SeedCurSlotsM2034)
		mainmemory.writebyte(Mod1M2034, SeedMod1M2034)
		mainmemory.writebyte(Mod2M2034, SeedMod2M2034)
		mainmemory.writebyte(Mod3M2034, SeedMod3M2034)
		mainmemory.writebyte(Mod4M2034, SeedMod4M2034)
		mainmemory.writebyte(Mod5M2034, SeedMod5M2034)
		mainmemory.writebyte(Mod6M2034, SeedMod6M2034)
		mainmemory.writebyte(Mod7M2034, SeedMod7M2034)
		mainmemory.writebyte(Mod8M2034, SeedMod8M2034)
		mainmemory.writebyte(Mod9M2034, SeedMod9M2034)
		mainmemory.writebyte(Mod10M2034, SeedMod10M2034)
		mainmemory.writebyte(IconM2035, SeedIconM2035)
		mainmemory.writebyte(MaxSlotsM2035, SeedMaxSlotsM2035)
		mainmemory.writebyte(TypM2035, SeedTypM2035)
		mainmemory.writebyte(OffM2035, SeedOffM2035)
		mainmemory.writebyte(RngM2035, SeedRngM2035)
		mainmemory.writebyte(BltM2035, SeedBltM2035)
		mainmemory.writebyte(CurAmmoM2035, SeedBltM2035)
		mainmemory.writebyte(OffPlusM2035, SeedOffPlusM2035)
		mainmemory.writebyte(RngPlusM2035, SeedRngPlusM2035)
		mainmemory.writebyte(BltPlusM2035, SeedBltPlusM2035)
		mainmemory.writebyte(CurSlotsM2035, SeedCurSlotsM2035)
		mainmemory.writebyte(Mod1M2035, SeedMod1M2035)
		mainmemory.writebyte(Mod2M2035, SeedMod2M2035)
		mainmemory.writebyte(Mod3M2035, SeedMod3M2035)
		mainmemory.writebyte(Mod4M2035, SeedMod4M2035)
		mainmemory.writebyte(Mod5M2035, SeedMod5M2035)
		mainmemory.writebyte(Mod6M2035, SeedMod6M2035)
		mainmemory.writebyte(Mod7M2035, SeedMod7M2035)
		mainmemory.writebyte(Mod8M2035, SeedMod8M2035)
		mainmemory.writebyte(Mod9M2035, SeedMod9M2035)
		mainmemory.writebyte(Mod10M2035, SeedMod10M2035)
		mainmemory.writebyte(IconM2036, SeedIconM2036)
		mainmemory.writebyte(MaxSlotsM2036, SeedMaxSlotsM2036)
		mainmemory.writebyte(TypM2036, SeedTypM2036)
		mainmemory.writebyte(OffM2036, SeedOffM2036)
		mainmemory.writebyte(RngM2036, SeedRngM2036)
		mainmemory.writebyte(BltM2036, SeedBltM2036)
		mainmemory.writebyte(CurAmmoM2036, SeedBltM2036)
		mainmemory.writebyte(OffPlusM2036, SeedOffPlusM2036)
		mainmemory.writebyte(RngPlusM2036, SeedRngPlusM2036)
		mainmemory.writebyte(BltPlusM2036, SeedBltPlusM2036)
		mainmemory.writebyte(CurSlotsM2036, SeedCurSlotsM2036)
		mainmemory.writebyte(Mod1M2036, SeedMod1M2036)
		mainmemory.writebyte(Mod2M2036, SeedMod2M2036)
		mainmemory.writebyte(Mod3M2036, SeedMod3M2036)
		mainmemory.writebyte(Mod4M2036, SeedMod4M2036)
		mainmemory.writebyte(Mod5M2036, SeedMod5M2036)
		mainmemory.writebyte(Mod6M2036, SeedMod6M2036)
		mainmemory.writebyte(Mod7M2036, SeedMod7M2036)
		mainmemory.writebyte(Mod8M2036, SeedMod8M2036)
		mainmemory.writebyte(Mod9M2036, SeedMod9M2036)
		mainmemory.writebyte(Mod10M2036, SeedMod10M2036)
		mainmemory.writebyte(IconM79, SeedIconM79)
		mainmemory.writebyte(MaxSlotsM79, SeedMaxSlotsM79)
		mainmemory.writebyte(TypM79, SeedTypM79)
		mainmemory.writebyte(OffM79, SeedOffM79)
		mainmemory.writebyte(RngM79, SeedRngM79)
		mainmemory.writebyte(BltM79, SeedBltM79)
		mainmemory.writebyte(CurAmmoM79, SeedBltM79)
		mainmemory.writebyte(OffPlusM79, SeedOffPlusM79)
		mainmemory.writebyte(RngPlusM79, SeedRngPlusM79)
		mainmemory.writebyte(BltPlusM79, SeedBltPlusM79)
		mainmemory.writebyte(CurSlotsM79, SeedCurSlotsM79)
		mainmemory.writebyte(Mod1M79, SeedMod1M79)
		mainmemory.writebyte(Mod2M79, SeedMod2M79)
		mainmemory.writebyte(Mod3M79, SeedMod3M79)
		mainmemory.writebyte(Mod4M79, SeedMod4M79)
		mainmemory.writebyte(Mod5M79, SeedMod5M79)
		mainmemory.writebyte(Mod6M79, SeedMod6M79)
		mainmemory.writebyte(Mod7M79, SeedMod7M79)
		mainmemory.writebyte(Mod8M79, SeedMod8M79)
		mainmemory.writebyte(Mod9M79, SeedMod9M79)
		mainmemory.writebyte(Mod10M79, SeedMod10M79)
		mainmemory.writebyte(IconM792, SeedIconM792)
		mainmemory.writebyte(MaxSlotsM792, SeedMaxSlotsM792)
		mainmemory.writebyte(TypM792, SeedTypM792)
		mainmemory.writebyte(OffM792, SeedOffM792)
		mainmemory.writebyte(RngM792, SeedRngM792)
		mainmemory.writebyte(BltM792, SeedBltM792)
		mainmemory.writebyte(CurAmmoM792, SeedBltM792)
		mainmemory.writebyte(OffPlusM792, SeedOffPlusM792)
		mainmemory.writebyte(RngPlusM792, SeedRngPlusM792)
		mainmemory.writebyte(BltPlusM792, SeedBltPlusM792)
		mainmemory.writebyte(CurSlotsM792, SeedCurSlotsM792)
		mainmemory.writebyte(Mod1M792, SeedMod1M792)
		mainmemory.writebyte(Mod2M792, SeedMod2M792)
		mainmemory.writebyte(Mod3M792, SeedMod3M792)
		mainmemory.writebyte(Mod4M792, SeedMod4M792)
		mainmemory.writebyte(Mod5M792, SeedMod5M792)
		mainmemory.writebyte(Mod6M792, SeedMod6M792)
		mainmemory.writebyte(Mod7M792, SeedMod7M792)
		mainmemory.writebyte(Mod8M792, SeedMod8M792)
		mainmemory.writebyte(Mod9M792, SeedMod9M792)
		mainmemory.writebyte(Mod10M792, SeedMod10M792)
		mainmemory.writebyte(IconM793, SeedIconM793)
		mainmemory.writebyte(MaxSlotsM793, SeedMaxSlotsM793)
		mainmemory.writebyte(TypM793, SeedTypM793)
		mainmemory.writebyte(OffM793, SeedOffM793)
		mainmemory.writebyte(RngM793, SeedRngM793)
		mainmemory.writebyte(BltM793, SeedBltM793)
		mainmemory.writebyte(CurAmmoM793, SeedBltM793)
		mainmemory.writebyte(OffPlusM793, SeedOffPlusM793)
		mainmemory.writebyte(RngPlusM793, SeedRngPlusM793)
		mainmemory.writebyte(BltPlusM793, SeedBltPlusM793)
		mainmemory.writebyte(CurSlotsM793, SeedCurSlotsM793)
		mainmemory.writebyte(Mod1M793, SeedMod1M793)
		mainmemory.writebyte(Mod2M793, SeedMod2M793)
		mainmemory.writebyte(Mod3M793, SeedMod3M793)
		mainmemory.writebyte(Mod4M793, SeedMod4M793)
		mainmemory.writebyte(Mod5M793, SeedMod5M793)
		mainmemory.writebyte(Mod6M793, SeedMod6M793)
		mainmemory.writebyte(Mod7M793, SeedMod7M793)
		mainmemory.writebyte(Mod8M793, SeedMod8M793)
		mainmemory.writebyte(Mod9M793, SeedMod9M793)
		mainmemory.writebyte(Mod10M793, SeedMod10M793)
		mainmemory.writebyte(IconM794, SeedIconM794)
		mainmemory.writebyte(MaxSlotsM794, SeedMaxSlotsM794)
		mainmemory.writebyte(TypM794, SeedTypM794)
		mainmemory.writebyte(OffM794, SeedOffM794)
		mainmemory.writebyte(RngM794, SeedRngM794)
		mainmemory.writebyte(BltM794, SeedBltM794)
		mainmemory.writebyte(CurAmmoM794, SeedBltM794)
		mainmemory.writebyte(OffPlusM794, SeedOffPlusM794)
		mainmemory.writebyte(RngPlusM794, SeedRngPlusM794)
		mainmemory.writebyte(BltPlusM794, SeedBltPlusM794)
		mainmemory.writebyte(CurSlotsM794, SeedCurSlotsM794)
		mainmemory.writebyte(Mod1M794, SeedMod1M794)
		mainmemory.writebyte(Mod2M794, SeedMod2M794)
		mainmemory.writebyte(Mod3M794, SeedMod3M794)
		mainmemory.writebyte(Mod4M794, SeedMod4M794)
		mainmemory.writebyte(Mod5M794, SeedMod5M794)
		mainmemory.writebyte(Mod6M794, SeedMod6M794)
		mainmemory.writebyte(Mod7M794, SeedMod7M794)
		mainmemory.writebyte(Mod8M794, SeedMod8M794)
		mainmemory.writebyte(Mod9M794, SeedMod9M794)
		mainmemory.writebyte(Mod10M794, SeedMod10M794)
		mainmemory.writebyte(IconM795, SeedIconM795)
		mainmemory.writebyte(MaxSlotsM795, SeedMaxSlotsM795)
		mainmemory.writebyte(TypM795, SeedTypM795)
		mainmemory.writebyte(OffM795, SeedOffM795)
		mainmemory.writebyte(RngM795, SeedRngM795)
		mainmemory.writebyte(BltM795, SeedBltM795)
		mainmemory.writebyte(CurAmmoM795, SeedBltM795)
		mainmemory.writebyte(OffPlusM795, SeedOffPlusM795)
		mainmemory.writebyte(RngPlusM795, SeedRngPlusM795)
		mainmemory.writebyte(BltPlusM795, SeedBltPlusM795)
		mainmemory.writebyte(CurSlotsM795, SeedCurSlotsM795)
		mainmemory.writebyte(Mod1M795, SeedMod1M795)
		mainmemory.writebyte(Mod2M795, SeedMod2M795)
		mainmemory.writebyte(Mod3M795, SeedMod3M795)
		mainmemory.writebyte(Mod4M795, SeedMod4M795)
		mainmemory.writebyte(Mod5M795, SeedMod5M795)
		mainmemory.writebyte(Mod6M795, SeedMod6M795)
		mainmemory.writebyte(Mod7M795, SeedMod7M795)
		mainmemory.writebyte(Mod8M795, SeedMod8M795)
		mainmemory.writebyte(Mod9M795, SeedMod9M795)
		mainmemory.writebyte(Mod10M795, SeedMod10M795)
		mainmemory.writebyte(IconM796, SeedIconM796)
		mainmemory.writebyte(MaxSlotsM796, SeedMaxSlotsM796)
		mainmemory.writebyte(TypM796, SeedTypM796)
		mainmemory.writebyte(OffM796, SeedOffM796)
		mainmemory.writebyte(RngM796, SeedRngM796)
		mainmemory.writebyte(BltM796, SeedBltM796)
		mainmemory.writebyte(CurAmmoM796, SeedBltM796)
		mainmemory.writebyte(OffPlusM796, SeedOffPlusM796)
		mainmemory.writebyte(RngPlusM796, SeedRngPlusM796)
		mainmemory.writebyte(BltPlusM796, SeedBltPlusM796)
		mainmemory.writebyte(CurSlotsM796, SeedCurSlotsM796)
		mainmemory.writebyte(Mod1M796, SeedMod1M796)
		mainmemory.writebyte(Mod2M796, SeedMod2M796)
		mainmemory.writebyte(Mod3M796, SeedMod3M796)
		mainmemory.writebyte(Mod4M796, SeedMod4M796)
		mainmemory.writebyte(Mod5M796, SeedMod5M796)
		mainmemory.writebyte(Mod6M796, SeedMod6M796)
		mainmemory.writebyte(Mod7M796, SeedMod7M796)
		mainmemory.writebyte(Mod8M796, SeedMod8M796)
		mainmemory.writebyte(Mod9M796, SeedMod9M796)
		mainmemory.writebyte(Mod10M796, SeedMod10M796)
		mainmemory.writebyte(IconHK40, SeedIconHK40)
		mainmemory.writebyte(MaxSlotsHK40, SeedMaxSlotsHK40)
		mainmemory.writebyte(TypHK40, SeedTypHK40)
		mainmemory.writebyte(OffHK40, SeedOffHK40)
		mainmemory.writebyte(RngHK40, SeedRngHK40)
		mainmemory.writebyte(BltHK40, SeedBltHK40)
		mainmemory.writebyte(CurAmmoHK40, SeedBltHK40)
		mainmemory.writebyte(OffPlusHK40, SeedOffPlusHK40)
		mainmemory.writebyte(RngPlusHK40, SeedRngPlusHK40)
		mainmemory.writebyte(BltPlusHK40, SeedBltPlusHK40)
		mainmemory.writebyte(CurSlotsHK40, SeedCurSlotsHK40)
		mainmemory.writebyte(Mod1HK40, SeedMod1HK40)
		mainmemory.writebyte(Mod2HK40, SeedMod2HK40)
		mainmemory.writebyte(Mod3HK40, SeedMod3HK40)
		mainmemory.writebyte(Mod4HK40, SeedMod4HK40)
		mainmemory.writebyte(Mod5HK40, SeedMod5HK40)
		mainmemory.writebyte(Mod6HK40, SeedMod6HK40)
		mainmemory.writebyte(Mod7HK40, SeedMod7HK40)
		mainmemory.writebyte(Mod8HK40, SeedMod8HK40)
		mainmemory.writebyte(Mod9HK40, SeedMod9HK40)
		mainmemory.writebyte(Mod10HK40, SeedMod10HK40)
		mainmemory.writebyte(IconAT4, SeedIconAT4)
		mainmemory.writebyte(MaxSlotsAT4, SeedMaxSlotsAT4)
		mainmemory.writebyte(TypAT4, SeedTypAT4)
		mainmemory.writebyte(OffAT4, SeedOffAT4)
		mainmemory.writebyte(RngAT4, SeedRngAT4)
		mainmemory.writebyte(BltAT4, SeedBltAT4)
		mainmemory.writebyte(CurAmmoAT4, SeedBltAT4)
		mainmemory.writebyte(OffPlusAT4, SeedOffPlusAT4)
		mainmemory.writebyte(RngPlusAT4, SeedRngPlusAT4)
		mainmemory.writebyte(BltPlusAT4, SeedBltPlusAT4)
		mainmemory.writebyte(CurSlotsAT4, SeedCurSlotsAT4)
		mainmemory.writebyte(Mod1AT4, SeedMod1AT4)
		mainmemory.writebyte(Mod2AT4, SeedMod2AT4)
		mainmemory.writebyte(Mod3AT4, SeedMod3AT4)
		mainmemory.writebyte(Mod4AT4, SeedMod4AT4)
		mainmemory.writebyte(Mod5AT4, SeedMod5AT4)
		mainmemory.writebyte(Mod6AT4, SeedMod6AT4)
		mainmemory.writebyte(Mod7AT4, SeedMod7AT4)
		mainmemory.writebyte(Mod8AT4, SeedMod8AT4)
		mainmemory.writebyte(Mod9AT4, SeedMod9AT4)
		mainmemory.writebyte(Mod10AT4, SeedMod10AT4)
		mainmemory.writebyte(IconAT41, SeedIconAT41)
		mainmemory.writebyte(MaxSlotsAT41, SeedMaxSlotsAT41)
		mainmemory.writebyte(TypAT41, SeedTypAT41)
		mainmemory.writebyte(OffAT41, SeedOffAT41)
		mainmemory.writebyte(RngAT41, SeedRngAT41)
		mainmemory.writebyte(BltAT41, SeedBltAT41)
		mainmemory.writebyte(CurAmmoAT41, SeedBltAT41)
		mainmemory.writebyte(OffPlusAT41, SeedOffPlusAT41)
		mainmemory.writebyte(RngPlusAT41, SeedRngPlusAT41)
		mainmemory.writebyte(BltPlusAT41, SeedBltPlusAT41)
		mainmemory.writebyte(CurSlotsAT41, SeedCurSlotsAT41)
		mainmemory.writebyte(Mod1AT41, SeedMod1AT41)
		mainmemory.writebyte(Mod2AT41, SeedMod2AT41)
		mainmemory.writebyte(Mod3AT41, SeedMod3AT41)
		mainmemory.writebyte(Mod4AT41, SeedMod4AT41)
		mainmemory.writebyte(Mod5AT41, SeedMod5AT41)
		mainmemory.writebyte(Mod6AT41, SeedMod6AT41)
		mainmemory.writebyte(Mod7AT41, SeedMod7AT41)
		mainmemory.writebyte(Mod8AT41, SeedMod8AT41)
		mainmemory.writebyte(Mod9AT41, SeedMod9AT41)
		mainmemory.writebyte(Mod10AT41, SeedMod10AT41)
		mainmemory.writebyte(IconLAW80, SeedIconLAW80)
		mainmemory.writebyte(MaxSlotsLAW80, SeedMaxSlotsLAW80)
		mainmemory.writebyte(TypLAW80, SeedTypLAW80)
		mainmemory.writebyte(OffLAW80, SeedOffLAW80)
		mainmemory.writebyte(RngLAW80, SeedRngLAW80)
		mainmemory.writebyte(BltLAW80, SeedBltLAW80)
		mainmemory.writebyte(CurAmmoLAW80, SeedBltLAW80)
		mainmemory.writebyte(OffPlusLAW80, SeedOffPlusLAW80)
		mainmemory.writebyte(RngPlusLAW80, SeedRngPlusLAW80)
		mainmemory.writebyte(BltPlusLAW80, SeedBltPlusLAW80)
		mainmemory.writebyte(CurSlotsLAW80, SeedCurSlotsLAW80)
		mainmemory.writebyte(Mod1LAW80, SeedMod1LAW80)
		mainmemory.writebyte(Mod2LAW80, SeedMod2LAW80)
		mainmemory.writebyte(Mod3LAW80, SeedMod3LAW80)
		mainmemory.writebyte(Mod4LAW80, SeedMod4LAW80)
		mainmemory.writebyte(Mod5LAW80, SeedMod5LAW80)
		mainmemory.writebyte(Mod6LAW80, SeedMod6LAW80)
		mainmemory.writebyte(Mod7LAW80, SeedMod7LAW80)
		mainmemory.writebyte(Mod8LAW80, SeedMod8LAW80)
		mainmemory.writebyte(Mod9LAW80, SeedMod9LAW80)
		mainmemory.writebyte(Mod10LAW80, SeedMod10LAW80)
		mainmemory.writebyte(IconM92F, SeedIconM92F)
		mainmemory.writebyte(MaxSlotsM92F, SeedMaxSlotsM92F)
		mainmemory.writebyte(TypM92F, SeedTypM92F)
		mainmemory.writebyte(OffM92F, SeedOffM92F)
		mainmemory.writebyte(RngM92F, SeedRngM92F)
		mainmemory.writebyte(BltM92F, SeedBltM92F)
		mainmemory.writebyte(CurAmmoM92F, SeedBltM92F)
		mainmemory.writebyte(OffPlusM92F, SeedOffPlusM92F)
		mainmemory.writebyte(RngPlusM92F, SeedRngPlusM92F)
		mainmemory.writebyte(BltPlusM92F, SeedBltPlusM92F)
		mainmemory.writebyte(CurSlotsM92F, SeedCurSlotsM92F)
		mainmemory.writebyte(Mod1M92F, SeedMod1M92F)
		mainmemory.writebyte(Mod2M92F, SeedMod2M92F)
		mainmemory.writebyte(Mod3M92F, SeedMod3M92F)
		mainmemory.writebyte(Mod4M92F, SeedMod4M92F)
		mainmemory.writebyte(Mod5M92F, SeedMod5M92F)
		mainmemory.writebyte(Mod6M92F, SeedMod6M92F)
		mainmemory.writebyte(Mod7M92F, SeedMod7M92F)
		mainmemory.writebyte(Mod8M92F, SeedMod8M92F)
		mainmemory.writebyte(Mod9M92F, SeedMod9M92F)
		mainmemory.writebyte(Mod10M92F, SeedMod10M92F)
		mainmemory.writebyte(MaxSlotsDress, SeedMaxSlotsDress)
		mainmemory.writebyte(DefDress, SeedDefDress)
		mainmemory.writebyte(PEnDress, SeedPEnDress)
		mainmemory.writebyte(CrtDress, SeedCrtDress)
		mainmemory.writebyte(DefPlusDress, SeedDefPlusDress)
		mainmemory.writebyte(PEnPlusDress, SeedPEnPlusDress)
		mainmemory.writebyte(CrtPlusDress, SeedCrtPlusDress)
		mainmemory.writebyte(CurSlotsDress, SeedCurSlotsDress)
		mainmemory.writebyte(Mod1Dress, SeedMod1Dress)
		mainmemory.writebyte(Mod2Dress, SeedMod2Dress)
		mainmemory.writebyte(Mod3Dress, SeedMod3Dress)
		mainmemory.writebyte(Mod4Dress, SeedMod4Dress)
		mainmemory.writebyte(Mod5Dress, SeedMod5Dress)
		mainmemory.writebyte(Mod6Dress, SeedMod6Dress)
		mainmemory.writebyte(Mod7Dress, SeedMod7Dress)
		mainmemory.writebyte(Mod8Dress, SeedMod8Dress)
		mainmemory.writebyte(Mod9Dress, SeedMod9Dress)
		mainmemory.writebyte(Mod10Dress, SeedMod10Dress)
		mainmemory.writebyte(MaxSlotsNVest, SeedMaxSlotsNVest)
		mainmemory.writebyte(DefNVest, SeedDefNVest)
		mainmemory.writebyte(PEnNVest, SeedPEnNVest)
		mainmemory.writebyte(CrtNVest, SeedCrtNVest)
		mainmemory.writebyte(DefPlusNVest, SeedDefPlusNVest)
		mainmemory.writebyte(PEnPlusNVest, SeedPEnPlusNVest)
		mainmemory.writebyte(CrtPlusNVest, SeedCrtPlusNVest)
		mainmemory.writebyte(CurSlotsNVest, SeedCurSlotsNVest)
		mainmemory.writebyte(Mod1NVest, SeedMod1NVest)
		mainmemory.writebyte(Mod2NVest, SeedMod2NVest)
		mainmemory.writebyte(Mod3NVest, SeedMod3NVest)
		mainmemory.writebyte(Mod4NVest, SeedMod4NVest)
		mainmemory.writebyte(Mod5NVest, SeedMod5NVest)
		mainmemory.writebyte(Mod6NVest, SeedMod6NVest)
		mainmemory.writebyte(Mod7NVest, SeedMod7NVest)
		mainmemory.writebyte(Mod8NVest, SeedMod8NVest)
		mainmemory.writebyte(Mod9NVest, SeedMod9NVest)
		mainmemory.writebyte(Mod10NVest, SeedMod10NVest)
		mainmemory.writebyte(MaxSlotsNProtector, SeedMaxSlotsNProtector)
		mainmemory.writebyte(DefNProtector, SeedDefNProtector)
		mainmemory.writebyte(PEnNProtector, SeedPEnNProtector)
		mainmemory.writebyte(CrtNProtector, SeedCrtNProtector)
		mainmemory.writebyte(DefPlusNProtector, SeedDefPlusNProtector)
		mainmemory.writebyte(PEnPlusNProtector, SeedPEnPlusNProtector)
		mainmemory.writebyte(CrtPlusNProtector, SeedCrtPlusNProtector)
		mainmemory.writebyte(CurSlotsNProtector, SeedCurSlotsNProtector)
		mainmemory.writebyte(Mod1NProtector, SeedMod1NProtector)
		mainmemory.writebyte(Mod2NProtector, SeedMod2NProtector)
		mainmemory.writebyte(Mod3NProtector, SeedMod3NProtector)
		mainmemory.writebyte(Mod4NProtector, SeedMod4NProtector)
		mainmemory.writebyte(Mod5NProtector, SeedMod5NProtector)
		mainmemory.writebyte(Mod6NProtector, SeedMod6NProtector)
		mainmemory.writebyte(Mod7NProtector, SeedMod7NProtector)
		mainmemory.writebyte(Mod8NProtector, SeedMod8NProtector)
		mainmemory.writebyte(Mod9NProtector, SeedMod9NProtector)
		mainmemory.writebyte(Mod10NProtector, SeedMod10NProtector)
		mainmemory.writebyte(MaxSlotsNJacket, SeedMaxSlotsNJacket)
		mainmemory.writebyte(DefNJacket, SeedDefNJacket)
		mainmemory.writebyte(PEnNJacket, SeedPEnNJacket)
		mainmemory.writebyte(CrtNJacket, SeedCrtNJacket)
		mainmemory.writebyte(DefPlusNJacket, SeedDefPlusNJacket)
		mainmemory.writebyte(PEnPlusNJacket, SeedPEnPlusNJacket)
		mainmemory.writebyte(CrtPlusNJacket, SeedCrtPlusNJacket)
		mainmemory.writebyte(CurSlotsNJacket, SeedCurSlotsNJacket)
		mainmemory.writebyte(Mod1NJacket, SeedMod1NJacket)
		mainmemory.writebyte(Mod2NJacket, SeedMod2NJacket)
		mainmemory.writebyte(Mod3NJacket, SeedMod3NJacket)
		mainmemory.writebyte(Mod4NJacket, SeedMod4NJacket)
		mainmemory.writebyte(Mod5NJacket, SeedMod5NJacket)
		mainmemory.writebyte(Mod6NJacket, SeedMod6NJacket)
		mainmemory.writebyte(Mod7NJacket, SeedMod7NJacket)
		mainmemory.writebyte(Mod8NJacket, SeedMod8NJacket)
		mainmemory.writebyte(Mod9NJacket, SeedMod9NJacket)
		mainmemory.writebyte(Mod10NJacket, SeedMod10NJacket)
		mainmemory.writebyte(MaxSlotsNSuit, SeedMaxSlotsNSuit)
		mainmemory.writebyte(DefNSuit, SeedDefNSuit)
		mainmemory.writebyte(PEnNSuit, SeedPEnNSuit)
		mainmemory.writebyte(CrtNSuit, SeedCrtNSuit)
		mainmemory.writebyte(DefPlusNSuit, SeedDefPlusNSuit)
		mainmemory.writebyte(PEnPlusNSuit, SeedPEnPlusNSuit)
		mainmemory.writebyte(CrtPlusNSuit, SeedCrtPlusNSuit)
		mainmemory.writebyte(CurSlotsNSuit, SeedCurSlotsNSuit)
		mainmemory.writebyte(Mod1NSuit, SeedMod1NSuit)
		mainmemory.writebyte(Mod2NSuit, SeedMod2NSuit)
		mainmemory.writebyte(Mod3NSuit, SeedMod3NSuit)
		mainmemory.writebyte(Mod4NSuit, SeedMod4NSuit)
		mainmemory.writebyte(Mod5NSuit, SeedMod5NSuit)
		mainmemory.writebyte(Mod6NSuit, SeedMod6NSuit)
		mainmemory.writebyte(Mod7NSuit, SeedMod7NSuit)
		mainmemory.writebyte(Mod8NSuit, SeedMod8NSuit)
		mainmemory.writebyte(Mod9NSuit, SeedMod9NSuit)
		mainmemory.writebyte(Mod10NSuit, SeedMod10NSuit)
		mainmemory.writebyte(MaxSlotsNArmor, SeedMaxSlotsNArmor)
		mainmemory.writebyte(DefNArmor, SeedDefNArmor)
		mainmemory.writebyte(PEnNArmor, SeedPEnNArmor)
		mainmemory.writebyte(CrtNArmor, SeedCrtNArmor)
		mainmemory.writebyte(DefPlusNArmor, SeedDefPlusNArmor)
		mainmemory.writebyte(PEnPlusNArmor, SeedPEnPlusNArmor)
		mainmemory.writebyte(CrtPlusNArmor, SeedCrtPlusNArmor)
		mainmemory.writebyte(CurSlotsNArmor, SeedCurSlotsNArmor)
		mainmemory.writebyte(Mod1NArmor, SeedMod1NArmor)
		mainmemory.writebyte(Mod2NArmor, SeedMod2NArmor)
		mainmemory.writebyte(Mod3NArmor, SeedMod3NArmor)
		mainmemory.writebyte(Mod4NArmor, SeedMod4NArmor)
		mainmemory.writebyte(Mod5NArmor, SeedMod5NArmor)
		mainmemory.writebyte(Mod6NArmor, SeedMod6NArmor)
		mainmemory.writebyte(Mod7NArmor, SeedMod7NArmor)
		mainmemory.writebyte(Mod8NArmor, SeedMod8NArmor)
		mainmemory.writebyte(Mod9NArmor, SeedMod9NArmor)
		mainmemory.writebyte(Mod10NArmor, SeedMod10NArmor)
		mainmemory.writebyte(MaxSlotsKvVest1, SeedMaxSlotsKvVest1)
		mainmemory.writebyte(DefKvVest1, SeedDefKvVest1)
		mainmemory.writebyte(PEnKvVest1, SeedPEnKvVest1)
		mainmemory.writebyte(CrtKvVest1, SeedCrtKvVest1)
		mainmemory.writebyte(DefPlusKvVest1, SeedDefPlusKvVest1)
		mainmemory.writebyte(PEnPlusKvVest1, SeedPEnPlusKvVest1)
		mainmemory.writebyte(CrtPlusKvVest1, SeedCrtPlusKvVest1)
		mainmemory.writebyte(CurSlotsKvVest1, SeedCurSlotsKvVest1)
		mainmemory.writebyte(Mod1KvVest1, SeedMod1KvVest1)
		mainmemory.writebyte(Mod2KvVest1, SeedMod2KvVest1)
		mainmemory.writebyte(Mod3KvVest1, SeedMod3KvVest1)
		mainmemory.writebyte(Mod4KvVest1, SeedMod4KvVest1)
		mainmemory.writebyte(Mod5KvVest1, SeedMod5KvVest1)
		mainmemory.writebyte(Mod6KvVest1, SeedMod6KvVest1)
		mainmemory.writebyte(Mod7KvVest1, SeedMod7KvVest1)
		mainmemory.writebyte(Mod8KvVest1, SeedMod8KvVest1)
		mainmemory.writebyte(Mod9KvVest1, SeedMod9KvVest1)
		mainmemory.writebyte(Mod10KvVest1, SeedMod10KvVest1)
		mainmemory.writebyte(MaxSlotsKvProtector, SeedMaxSlotsKvProtector)
		mainmemory.writebyte(DefKvProtector, SeedDefKvProtector)
		mainmemory.writebyte(PEnKvProtector, SeedPEnKvProtector)
		mainmemory.writebyte(CrtKvProtector, SeedCrtKvProtector)
		mainmemory.writebyte(DefPlusKvProtector, SeedDefPlusKvProtector)
		mainmemory.writebyte(PEnPlusKvProtector, SeedPEnPlusKvProtector)
		mainmemory.writebyte(CrtPlusKvProtector, SeedCrtPlusKvProtector)
		mainmemory.writebyte(CurSlotsKvProtector, SeedCurSlotsKvProtector)
		mainmemory.writebyte(Mod1KvProtector, SeedMod1KvProtector)
		mainmemory.writebyte(Mod2KvProtector, SeedMod2KvProtector)
		mainmemory.writebyte(Mod3KvProtector, SeedMod3KvProtector)
		mainmemory.writebyte(Mod4KvProtector, SeedMod4KvProtector)
		mainmemory.writebyte(Mod5KvProtector, SeedMod5KvProtector)
		mainmemory.writebyte(Mod6KvProtector, SeedMod6KvProtector)
		mainmemory.writebyte(Mod7KvProtector, SeedMod7KvProtector)
		mainmemory.writebyte(Mod8KvProtector, SeedMod8KvProtector)
		mainmemory.writebyte(Mod9KvProtector, SeedMod9KvProtector)
		mainmemory.writebyte(Mod10KvProtector, SeedMod10KvProtector)
		mainmemory.writebyte(MaxSlotsKvJacket, SeedMaxSlotsKvJacket)
		mainmemory.writebyte(DefKvJacket, SeedDefKvJacket)
		mainmemory.writebyte(PEnKvJacket, SeedPEnKvJacket)
		mainmemory.writebyte(CrtKvJacket, SeedCrtKvJacket)
		mainmemory.writebyte(DefPlusKvJacket, SeedDefPlusKvJacket)
		mainmemory.writebyte(PEnPlusKvJacket, SeedPEnPlusKvJacket)
		mainmemory.writebyte(CrtPlusKvJacket, SeedCrtPlusKvJacket)
		mainmemory.writebyte(CurSlotsKvJacket, SeedCurSlotsKvJacket)
		mainmemory.writebyte(Mod1KvJacket, SeedMod1KvJacket)
		mainmemory.writebyte(Mod2KvJacket, SeedMod2KvJacket)
		mainmemory.writebyte(Mod3KvJacket, SeedMod3KvJacket)
		mainmemory.writebyte(Mod4KvJacket, SeedMod4KvJacket)
		mainmemory.writebyte(Mod5KvJacket, SeedMod5KvJacket)
		mainmemory.writebyte(Mod6KvJacket, SeedMod6KvJacket)
		mainmemory.writebyte(Mod7KvJacket, SeedMod7KvJacket)
		mainmemory.writebyte(Mod8KvJacket, SeedMod8KvJacket)
		mainmemory.writebyte(Mod9KvJacket, SeedMod9KvJacket)
		mainmemory.writebyte(Mod10KvJacket, SeedMod10KvJacket)
		mainmemory.writebyte(MaxSlotsKvSuit1, SeedMaxSlotsKvSuit1)
		mainmemory.writebyte(DefKvSuit1, SeedDefKvSuit1)
		mainmemory.writebyte(PEnKvSuit1, SeedPEnKvSuit1)
		mainmemory.writebyte(CrtKvSuit1, SeedCrtKvSuit1)
		mainmemory.writebyte(DefPlusKvSuit1, SeedDefPlusKvSuit1)
		mainmemory.writebyte(PEnPlusKvSuit1, SeedPEnPlusKvSuit1)
		mainmemory.writebyte(CrtPlusKvSuit1, SeedCrtPlusKvSuit1)
		mainmemory.writebyte(CurSlotsKvSuit1, SeedCurSlotsKvSuit1)
		mainmemory.writebyte(Mod1KvSuit1, SeedMod1KvSuit1)
		mainmemory.writebyte(Mod2KvSuit1, SeedMod2KvSuit1)
		mainmemory.writebyte(Mod3KvSuit1, SeedMod3KvSuit1)
		mainmemory.writebyte(Mod4KvSuit1, SeedMod4KvSuit1)
		mainmemory.writebyte(Mod5KvSuit1, SeedMod5KvSuit1)
		mainmemory.writebyte(Mod6KvSuit1, SeedMod6KvSuit1)
		mainmemory.writebyte(Mod7KvSuit1, SeedMod7KvSuit1)
		mainmemory.writebyte(Mod8KvSuit1, SeedMod8KvSuit1)
		mainmemory.writebyte(Mod9KvSuit1, SeedMod9KvSuit1)
		mainmemory.writebyte(Mod10KvSuit1, SeedMod10KvSuit1)
		mainmemory.writebyte(MaxSlotsKvArmor1, SeedMaxSlotsKvArmor1)
		mainmemory.writebyte(DefKvArmor1, SeedDefKvArmor1)
		mainmemory.writebyte(PEnKvArmor1, SeedPEnKvArmor1)
		mainmemory.writebyte(CrtKvArmor1, SeedCrtKvArmor1)
		mainmemory.writebyte(DefPlusKvArmor1, SeedDefPlusKvArmor1)
		mainmemory.writebyte(PEnPlusKvArmor1, SeedPEnPlusKvArmor1)
		mainmemory.writebyte(CrtPlusKvArmor1, SeedCrtPlusKvArmor1)
		mainmemory.writebyte(CurSlotsKvArmor1, SeedCurSlotsKvArmor1)
		mainmemory.writebyte(Mod1KvArmor1, SeedMod1KvArmor1)
		mainmemory.writebyte(Mod2KvArmor1, SeedMod2KvArmor1)
		mainmemory.writebyte(Mod3KvArmor1, SeedMod3KvArmor1)
		mainmemory.writebyte(Mod4KvArmor1, SeedMod4KvArmor1)
		mainmemory.writebyte(Mod5KvArmor1, SeedMod5KvArmor1)
		mainmemory.writebyte(Mod6KvArmor1, SeedMod6KvArmor1)
		mainmemory.writebyte(Mod7KvArmor1, SeedMod7KvArmor1)
		mainmemory.writebyte(Mod8KvArmor1, SeedMod8KvArmor1)
		mainmemory.writebyte(Mod9KvArmor1, SeedMod9KvArmor1)
		mainmemory.writebyte(Mod10KvArmor1, SeedMod10KvArmor1)
		mainmemory.writebyte(MaxSlotsSpVest1, SeedMaxSlotsSpVest1)
		mainmemory.writebyte(DefSpVest1, SeedDefSpVest1)
		mainmemory.writebyte(PEnSpVest1, SeedPEnSpVest1)
		mainmemory.writebyte(CrtSpVest1, SeedCrtSpVest1)
		mainmemory.writebyte(DefPlusSpVest1, SeedDefPlusSpVest1)
		mainmemory.writebyte(PEnPlusSpVest1, SeedPEnPlusSpVest1)
		mainmemory.writebyte(CrtPlusSpVest1, SeedCrtPlusSpVest1)
		mainmemory.writebyte(CurSlotsSpVest1, SeedCurSlotsSpVest1)
		mainmemory.writebyte(Mod1SpVest1, SeedMod1SpVest1)
		mainmemory.writebyte(Mod2SpVest1, SeedMod2SpVest1)
		mainmemory.writebyte(Mod3SpVest1, SeedMod3SpVest1)
		mainmemory.writebyte(Mod4SpVest1, SeedMod4SpVest1)
		mainmemory.writebyte(Mod5SpVest1, SeedMod5SpVest1)
		mainmemory.writebyte(Mod6SpVest1, SeedMod6SpVest1)
		mainmemory.writebyte(Mod7SpVest1, SeedMod7SpVest1)
		mainmemory.writebyte(Mod8SpVest1, SeedMod8SpVest1)
		mainmemory.writebyte(Mod9SpVest1, SeedMod9SpVest1)
		mainmemory.writebyte(Mod10SpVest1, SeedMod10SpVest1)
		mainmemory.writebyte(MaxSlotsSpVest2, SeedMaxSlotsSpVest2)
		mainmemory.writebyte(DefSpVest2, SeedDefSpVest2)
		mainmemory.writebyte(PEnSpVest2, SeedPEnSpVest2)
		mainmemory.writebyte(CrtSpVest2, SeedCrtSpVest2)
		mainmemory.writebyte(DefPlusSpVest2, SeedDefPlusSpVest2)
		mainmemory.writebyte(PEnPlusSpVest2, SeedPEnPlusSpVest2)
		mainmemory.writebyte(CrtPlusSpVest2, SeedCrtPlusSpVest2)
		mainmemory.writebyte(CurSlotsSpVest2, SeedCurSlotsSpVest2)
		mainmemory.writebyte(Mod1SpVest2, SeedMod1SpVest2)
		mainmemory.writebyte(Mod2SpVest2, SeedMod2SpVest2)
		mainmemory.writebyte(Mod3SpVest2, SeedMod3SpVest2)
		mainmemory.writebyte(Mod4SpVest2, SeedMod4SpVest2)
		mainmemory.writebyte(Mod5SpVest2, SeedMod5SpVest2)
		mainmemory.writebyte(Mod6SpVest2, SeedMod6SpVest2)
		mainmemory.writebyte(Mod7SpVest2, SeedMod7SpVest2)
		mainmemory.writebyte(Mod8SpVest2, SeedMod8SpVest2)
		mainmemory.writebyte(Mod9SpVest2, SeedMod9SpVest2)
		mainmemory.writebyte(Mod10SpVest2, SeedMod10SpVest2)
		mainmemory.writebyte(MaxSlotsSpProtector, SeedMaxSlotsSpProtector)
		mainmemory.writebyte(DefSpProtector, SeedDefSpProtector)
		mainmemory.writebyte(PEnSpProtector, SeedPEnSpProtector)
		mainmemory.writebyte(CrtSpProtector, SeedCrtSpProtector)
		mainmemory.writebyte(DefPlusSpProtector, SeedDefPlusSpProtector)
		mainmemory.writebyte(PEnPlusSpProtector, SeedPEnPlusSpProtector)
		mainmemory.writebyte(CrtPlusSpProtector, SeedCrtPlusSpProtector)
		mainmemory.writebyte(CurSlotsSpProtector, SeedCurSlotsSpProtector)
		mainmemory.writebyte(Mod1SpProtector, SeedMod1SpProtector)
		mainmemory.writebyte(Mod2SpProtector, SeedMod2SpProtector)
		mainmemory.writebyte(Mod3SpProtector, SeedMod3SpProtector)
		mainmemory.writebyte(Mod4SpProtector, SeedMod4SpProtector)
		mainmemory.writebyte(Mod5SpProtector, SeedMod5SpProtector)
		mainmemory.writebyte(Mod6SpProtector, SeedMod6SpProtector)
		mainmemory.writebyte(Mod7SpProtector, SeedMod7SpProtector)
		mainmemory.writebyte(Mod8SpProtector, SeedMod8SpProtector)
		mainmemory.writebyte(Mod9SpProtector, SeedMod9SpProtector)
		mainmemory.writebyte(Mod10SpProtector, SeedMod10SpProtector)
		mainmemory.writebyte(MaxSlotsSpJacket, SeedMaxSlotsSpJacket)
		mainmemory.writebyte(DefSpJacket, SeedDefSpJacket)
		mainmemory.writebyte(PEnSpJacket, SeedPEnSpJacket)
		mainmemory.writebyte(CrtSpJacket, SeedCrtSpJacket)
		mainmemory.writebyte(DefPlusSpJacket, SeedDefPlusSpJacket)
		mainmemory.writebyte(PEnPlusSpJacket, SeedPEnPlusSpJacket)
		mainmemory.writebyte(CrtPlusSpJacket, SeedCrtPlusSpJacket)
		mainmemory.writebyte(CurSlotsSpJacket, SeedCurSlotsSpJacket)
		mainmemory.writebyte(Mod1SpJacket, SeedMod1SpJacket)
		mainmemory.writebyte(Mod2SpJacket, SeedMod2SpJacket)
		mainmemory.writebyte(Mod3SpJacket, SeedMod3SpJacket)
		mainmemory.writebyte(Mod4SpJacket, SeedMod4SpJacket)
		mainmemory.writebyte(Mod5SpJacket, SeedMod5SpJacket)
		mainmemory.writebyte(Mod6SpJacket, SeedMod6SpJacket)
		mainmemory.writebyte(Mod7SpJacket, SeedMod7SpJacket)
		mainmemory.writebyte(Mod8SpJacket, SeedMod8SpJacket)
		mainmemory.writebyte(Mod9SpJacket, SeedMod9SpJacket)
		mainmemory.writebyte(Mod10SpJacket, SeedMod10SpJacket)
		mainmemory.writebyte(MaxSlotsSpSuit1, SeedMaxSlotsSpSuit1)
		mainmemory.writebyte(DefSpSuit1, SeedDefSpSuit1)
		mainmemory.writebyte(PEnSpSuit1, SeedPEnSpSuit1)
		mainmemory.writebyte(CrtSpSuit1, SeedCrtSpSuit1)
		mainmemory.writebyte(DefPlusSpSuit1, SeedDefPlusSpSuit1)
		mainmemory.writebyte(PEnPlusSpSuit1, SeedPEnPlusSpSuit1)
		mainmemory.writebyte(CrtPlusSpSuit1, SeedCrtPlusSpSuit1)
		mainmemory.writebyte(CurSlotsSpSuit1, SeedCurSlotsSpSuit1)
		mainmemory.writebyte(Mod1SpSuit1, SeedMod1SpSuit1)
		mainmemory.writebyte(Mod2SpSuit1, SeedMod2SpSuit1)
		mainmemory.writebyte(Mod3SpSuit1, SeedMod3SpSuit1)
		mainmemory.writebyte(Mod4SpSuit1, SeedMod4SpSuit1)
		mainmemory.writebyte(Mod5SpSuit1, SeedMod5SpSuit1)
		mainmemory.writebyte(Mod6SpSuit1, SeedMod6SpSuit1)
		mainmemory.writebyte(Mod7SpSuit1, SeedMod7SpSuit1)
		mainmemory.writebyte(Mod8SpSuit1, SeedMod8SpSuit1)
		mainmemory.writebyte(Mod9SpSuit1, SeedMod9SpSuit1)
		mainmemory.writebyte(Mod10SpSuit1, SeedMod10SpSuit1)
		mainmemory.writebyte(MaxSlotsSpSuit2, SeedMaxSlotsSpSuit2)
		mainmemory.writebyte(DefSpSuit2, SeedDefSpSuit2)
		mainmemory.writebyte(PEnSpSuit2, SeedPEnSpSuit2)
		mainmemory.writebyte(CrtSpSuit2, SeedCrtSpSuit2)
		mainmemory.writebyte(DefPlusSpSuit2, SeedDefPlusSpSuit2)
		mainmemory.writebyte(PEnPlusSpSuit2, SeedPEnPlusSpSuit2)
		mainmemory.writebyte(CrtPlusSpSuit2, SeedCrtPlusSpSuit2)
		mainmemory.writebyte(CurSlotsSpSuit2, SeedCurSlotsSpSuit2)
		mainmemory.writebyte(Mod1SpSuit2, SeedMod1SpSuit2)
		mainmemory.writebyte(Mod2SpSuit2, SeedMod2SpSuit2)
		mainmemory.writebyte(Mod3SpSuit2, SeedMod3SpSuit2)
		mainmemory.writebyte(Mod4SpSuit2, SeedMod4SpSuit2)
		mainmemory.writebyte(Mod5SpSuit2, SeedMod5SpSuit2)
		mainmemory.writebyte(Mod6SpSuit2, SeedMod6SpSuit2)
		mainmemory.writebyte(Mod7SpSuit2, SeedMod7SpSuit2)
		mainmemory.writebyte(Mod8SpSuit2, SeedMod8SpSuit2)
		mainmemory.writebyte(Mod9SpSuit2, SeedMod9SpSuit2)
		mainmemory.writebyte(Mod10SpSuit2, SeedMod10SpSuit2)
		mainmemory.writebyte(MaxSlotsSpArmor1, SeedMaxSlotsSpArmor1)
		mainmemory.writebyte(DefSpArmor1, SeedDefSpArmor1)
		mainmemory.writebyte(PEnSpArmor1, SeedPEnSpArmor1)
		mainmemory.writebyte(CrtSpArmor1, SeedCrtSpArmor1)
		mainmemory.writebyte(DefPlusSpArmor1, SeedDefPlusSpArmor1)
		mainmemory.writebyte(PEnPlusSpArmor1, SeedPEnPlusSpArmor1)
		mainmemory.writebyte(CrtPlusSpArmor1, SeedCrtPlusSpArmor1)
		mainmemory.writebyte(CurSlotsSpArmor1, SeedCurSlotsSpArmor1)
		mainmemory.writebyte(Mod1SpArmor1, SeedMod1SpArmor1)
		mainmemory.writebyte(Mod2SpArmor1, SeedMod2SpArmor1)
		mainmemory.writebyte(Mod3SpArmor1, SeedMod3SpArmor1)
		mainmemory.writebyte(Mod4SpArmor1, SeedMod4SpArmor1)
		mainmemory.writebyte(Mod5SpArmor1, SeedMod5SpArmor1)
		mainmemory.writebyte(Mod6SpArmor1, SeedMod6SpArmor1)
		mainmemory.writebyte(Mod7SpArmor1, SeedMod7SpArmor1)
		mainmemory.writebyte(Mod8SpArmor1, SeedMod8SpArmor1)
		mainmemory.writebyte(Mod9SpArmor1, SeedMod9SpArmor1)
		mainmemory.writebyte(Mod10SpArmor1, SeedMod10SpArmor1)
		mainmemory.writebyte(MaxSlotsSpArmor2, SeedMaxSlotsSpArmor2)
		mainmemory.writebyte(DefSpArmor2, SeedDefSpArmor2)
		mainmemory.writebyte(PEnSpArmor2, SeedPEnSpArmor2)
		mainmemory.writebyte(CrtSpArmor2, SeedCrtSpArmor2)
		mainmemory.writebyte(DefPlusSpArmor2, SeedDefPlusSpArmor2)
		mainmemory.writebyte(PEnPlusSpArmor2, SeedPEnPlusSpArmor2)
		mainmemory.writebyte(CrtPlusSpArmor2, SeedCrtPlusSpArmor2)
		mainmemory.writebyte(CurSlotsSpArmor2, SeedCurSlotsSpArmor2)
		mainmemory.writebyte(Mod1SpArmor2, SeedMod1SpArmor2)
		mainmemory.writebyte(Mod2SpArmor2, SeedMod2SpArmor2)
		mainmemory.writebyte(Mod3SpArmor2, SeedMod3SpArmor2)
		mainmemory.writebyte(Mod4SpArmor2, SeedMod4SpArmor2)
		mainmemory.writebyte(Mod5SpArmor2, SeedMod5SpArmor2)
		mainmemory.writebyte(Mod6SpArmor2, SeedMod6SpArmor2)
		mainmemory.writebyte(Mod7SpArmor2, SeedMod7SpArmor2)
		mainmemory.writebyte(Mod8SpArmor2, SeedMod8SpArmor2)
		mainmemory.writebyte(Mod9SpArmor2, SeedMod9SpArmor2)
		mainmemory.writebyte(Mod10SpArmor2, SeedMod10SpArmor2)
		mainmemory.writebyte(MaxSlotsSvVest1, SeedMaxSlotsSvVest1)
		mainmemory.writebyte(DefSvVest1, SeedDefSvVest1)
		mainmemory.writebyte(PEnSvVest1, SeedPEnSvVest1)
		mainmemory.writebyte(CrtSvVest1, SeedCrtSvVest1)
		mainmemory.writebyte(DefPlusSvVest1, SeedDefPlusSvVest1)
		mainmemory.writebyte(PEnPlusSvVest1, SeedPEnPlusSvVest1)
		mainmemory.writebyte(CrtPlusSvVest1, SeedCrtPlusSvVest1)
		mainmemory.writebyte(CurSlotsSvVest1, SeedCurSlotsSvVest1)
		mainmemory.writebyte(Mod1SvVest1, SeedMod1SvVest1)
		mainmemory.writebyte(Mod2SvVest1, SeedMod2SvVest1)
		mainmemory.writebyte(Mod3SvVest1, SeedMod3SvVest1)
		mainmemory.writebyte(Mod4SvVest1, SeedMod4SvVest1)
		mainmemory.writebyte(Mod5SvVest1, SeedMod5SvVest1)
		mainmemory.writebyte(Mod6SvVest1, SeedMod6SvVest1)
		mainmemory.writebyte(Mod7SvVest1, SeedMod7SvVest1)
		mainmemory.writebyte(Mod8SvVest1, SeedMod8SvVest1)
		mainmemory.writebyte(Mod9SvVest1, SeedMod9SvVest1)
		mainmemory.writebyte(Mod10SvVest1, SeedMod10SvVest1)
		mainmemory.writebyte(MaxSlotsSvVest2, SeedMaxSlotsSvVest2)
		mainmemory.writebyte(DefSvVest2, SeedDefSvVest2)
		mainmemory.writebyte(PEnSvVest2, SeedPEnSvVest2)
		mainmemory.writebyte(CrtSvVest2, SeedCrtSvVest2)
		mainmemory.writebyte(DefPlusSvVest2, SeedDefPlusSvVest2)
		mainmemory.writebyte(PEnPlusSvVest2, SeedPEnPlusSvVest2)
		mainmemory.writebyte(CrtPlusSvVest2, SeedCrtPlusSvVest2)
		mainmemory.writebyte(CurSlotsSvVest2, SeedCurSlotsSvVest2)
		mainmemory.writebyte(Mod1SvVest2, SeedMod1SvVest2)
		mainmemory.writebyte(Mod2SvVest2, SeedMod2SvVest2)
		mainmemory.writebyte(Mod3SvVest2, SeedMod3SvVest2)
		mainmemory.writebyte(Mod4SvVest2, SeedMod4SvVest2)
		mainmemory.writebyte(Mod5SvVest2, SeedMod5SvVest2)
		mainmemory.writebyte(Mod6SvVest2, SeedMod6SvVest2)
		mainmemory.writebyte(Mod7SvVest2, SeedMod7SvVest2)
		mainmemory.writebyte(Mod8SvVest2, SeedMod8SvVest2)
		mainmemory.writebyte(Mod9SvVest2, SeedMod9SvVest2)
		mainmemory.writebyte(Mod10SvVest2, SeedMod10SvVest2)
		mainmemory.writebyte(MaxSlotsSvProtector, SeedMaxSlotsSvProtector)
		mainmemory.writebyte(DefSvProtector, SeedDefSvProtector)
		mainmemory.writebyte(PEnSvProtector, SeedPEnSvProtector)
		mainmemory.writebyte(CrtSvProtector, SeedCrtSvProtector)
		mainmemory.writebyte(DefPlusSvProtector, SeedDefPlusSvProtector)
		mainmemory.writebyte(PEnPlusSvProtector, SeedPEnPlusSvProtector)
		mainmemory.writebyte(CrtPlusSvProtector, SeedCrtPlusSvProtector)
		mainmemory.writebyte(CurSlotsSvProtector, SeedCurSlotsSvProtector)
		mainmemory.writebyte(Mod1SvProtector, SeedMod1SvProtector)
		mainmemory.writebyte(Mod2SvProtector, SeedMod2SvProtector)
		mainmemory.writebyte(Mod3SvProtector, SeedMod3SvProtector)
		mainmemory.writebyte(Mod4SvProtector, SeedMod4SvProtector)
		mainmemory.writebyte(Mod5SvProtector, SeedMod5SvProtector)
		mainmemory.writebyte(Mod6SvProtector, SeedMod6SvProtector)
		mainmemory.writebyte(Mod7SvProtector, SeedMod7SvProtector)
		mainmemory.writebyte(Mod8SvProtector, SeedMod8SvProtector)
		mainmemory.writebyte(Mod9SvProtector, SeedMod9SvProtector)
		mainmemory.writebyte(Mod10SvProtector, SeedMod10SvProtector)
		mainmemory.writebyte(MaxSlotsSvJacket, SeedMaxSlotsSvJacket)
		mainmemory.writebyte(DefSvJacket, SeedDefSvJacket)
		mainmemory.writebyte(PEnSvJacket, SeedPEnSvJacket)
		mainmemory.writebyte(CrtSvJacket, SeedCrtSvJacket)
		mainmemory.writebyte(DefPlusSvJacket, SeedDefPlusSvJacket)
		mainmemory.writebyte(PEnPlusSvJacket, SeedPEnPlusSvJacket)
		mainmemory.writebyte(CrtPlusSvJacket, SeedCrtPlusSvJacket)
		mainmemory.writebyte(CurSlotsSvJacket, SeedCurSlotsSvJacket)
		mainmemory.writebyte(Mod1SvJacket, SeedMod1SvJacket)
		mainmemory.writebyte(Mod2SvJacket, SeedMod2SvJacket)
		mainmemory.writebyte(Mod3SvJacket, SeedMod3SvJacket)
		mainmemory.writebyte(Mod4SvJacket, SeedMod4SvJacket)
		mainmemory.writebyte(Mod5SvJacket, SeedMod5SvJacket)
		mainmemory.writebyte(Mod6SvJacket, SeedMod6SvJacket)
		mainmemory.writebyte(Mod7SvJacket, SeedMod7SvJacket)
		mainmemory.writebyte(Mod8SvJacket, SeedMod8SvJacket)
		mainmemory.writebyte(Mod9SvJacket, SeedMod9SvJacket)
		mainmemory.writebyte(Mod10SvJacket, SeedMod10SvJacket)
		mainmemory.writebyte(MaxSlotsSvSuit1, SeedMaxSlotsSvSuit1)
		mainmemory.writebyte(DefSvSuit1, SeedDefSvSuit1)
		mainmemory.writebyte(PEnSvSuit1, SeedPEnSvSuit1)
		mainmemory.writebyte(CrtSvSuit1, SeedCrtSvSuit1)
		mainmemory.writebyte(DefPlusSvSuit1, SeedDefPlusSvSuit1)
		mainmemory.writebyte(PEnPlusSvSuit1, SeedPEnPlusSvSuit1)
		mainmemory.writebyte(CrtPlusSvSuit1, SeedCrtPlusSvSuit1)
		mainmemory.writebyte(CurSlotsSvSuit1, SeedCurSlotsSvSuit1)
		mainmemory.writebyte(Mod1SvSuit1, SeedMod1SvSuit1)
		mainmemory.writebyte(Mod2SvSuit1, SeedMod2SvSuit1)
		mainmemory.writebyte(Mod3SvSuit1, SeedMod3SvSuit1)
		mainmemory.writebyte(Mod4SvSuit1, SeedMod4SvSuit1)
		mainmemory.writebyte(Mod5SvSuit1, SeedMod5SvSuit1)
		mainmemory.writebyte(Mod6SvSuit1, SeedMod6SvSuit1)
		mainmemory.writebyte(Mod7SvSuit1, SeedMod7SvSuit1)
		mainmemory.writebyte(Mod8SvSuit1, SeedMod8SvSuit1)
		mainmemory.writebyte(Mod9SvSuit1, SeedMod9SvSuit1)
		mainmemory.writebyte(Mod10SvSuit1, SeedMod10SvSuit1)
		mainmemory.writebyte(MaxSlotsSvSuit2, SeedMaxSlotsSvSuit2)
		mainmemory.writebyte(DefSvSuit2, SeedDefSvSuit2)
		mainmemory.writebyte(PEnSvSuit2, SeedPEnSvSuit2)
		mainmemory.writebyte(CrtSvSuit2, SeedCrtSvSuit2)
		mainmemory.writebyte(DefPlusSvSuit2, SeedDefPlusSvSuit2)
		mainmemory.writebyte(PEnPlusSvSuit2, SeedPEnPlusSvSuit2)
		mainmemory.writebyte(CrtPlusSvSuit2, SeedCrtPlusSvSuit2)
		mainmemory.writebyte(CurSlotsSvSuit2, SeedCurSlotsSvSuit2)
		mainmemory.writebyte(Mod1SvSuit2, SeedMod1SvSuit2)
		mainmemory.writebyte(Mod2SvSuit2, SeedMod2SvSuit2)
		mainmemory.writebyte(Mod3SvSuit2, SeedMod3SvSuit2)
		mainmemory.writebyte(Mod4SvSuit2, SeedMod4SvSuit2)
		mainmemory.writebyte(Mod5SvSuit2, SeedMod5SvSuit2)
		mainmemory.writebyte(Mod6SvSuit2, SeedMod6SvSuit2)
		mainmemory.writebyte(Mod7SvSuit2, SeedMod7SvSuit2)
		mainmemory.writebyte(Mod8SvSuit2, SeedMod8SvSuit2)
		mainmemory.writebyte(Mod9SvSuit2, SeedMod9SvSuit2)
		mainmemory.writebyte(Mod10SvSuit2, SeedMod10SvSuit2)
		mainmemory.writebyte(MaxSlotsSvArmor1, SeedMaxSlotsSvArmor1)
		mainmemory.writebyte(DefSvArmor1, SeedDefSvArmor1)
		mainmemory.writebyte(PEnSvArmor1, SeedPEnSvArmor1)
		mainmemory.writebyte(CrtSvArmor1, SeedCrtSvArmor1)
		mainmemory.writebyte(DefPlusSvArmor1, SeedDefPlusSvArmor1)
		mainmemory.writebyte(PEnPlusSvArmor1, SeedPEnPlusSvArmor1)
		mainmemory.writebyte(CrtPlusSvArmor1, SeedCrtPlusSvArmor1)
		mainmemory.writebyte(CurSlotsSvArmor1, SeedCurSlotsSvArmor1)
		mainmemory.writebyte(Mod1SvArmor1, SeedMod1SvArmor1)
		mainmemory.writebyte(Mod2SvArmor1, SeedMod2SvArmor1)
		mainmemory.writebyte(Mod3SvArmor1, SeedMod3SvArmor1)
		mainmemory.writebyte(Mod4SvArmor1, SeedMod4SvArmor1)
		mainmemory.writebyte(Mod5SvArmor1, SeedMod5SvArmor1)
		mainmemory.writebyte(Mod6SvArmor1, SeedMod6SvArmor1)
		mainmemory.writebyte(Mod7SvArmor1, SeedMod7SvArmor1)
		mainmemory.writebyte(Mod8SvArmor1, SeedMod8SvArmor1)
		mainmemory.writebyte(Mod9SvArmor1, SeedMod9SvArmor1)
		mainmemory.writebyte(Mod10SvArmor1, SeedMod10SvArmor1)
		mainmemory.writebyte(MaxSlotsSvArmor2, SeedMaxSlotsSvArmor2)
		mainmemory.writebyte(DefSvArmor2, SeedDefSvArmor2)
		mainmemory.writebyte(PEnSvArmor2, SeedPEnSvArmor2)
		mainmemory.writebyte(CrtSvArmor2, SeedCrtSvArmor2)
		mainmemory.writebyte(DefPlusSvArmor2, SeedDefPlusSvArmor2)
		mainmemory.writebyte(PEnPlusSvArmor2, SeedPEnPlusSvArmor2)
		mainmemory.writebyte(CrtPlusSvArmor2, SeedCrtPlusSvArmor2)
		mainmemory.writebyte(CurSlotsSvArmor2, SeedCurSlotsSvArmor2)
		mainmemory.writebyte(Mod1SvArmor2, SeedMod1SvArmor2)
		mainmemory.writebyte(Mod2SvArmor2, SeedMod2SvArmor2)
		mainmemory.writebyte(Mod3SvArmor2, SeedMod3SvArmor2)
		mainmemory.writebyte(Mod4SvArmor2, SeedMod4SvArmor2)
		mainmemory.writebyte(Mod5SvArmor2, SeedMod5SvArmor2)
		mainmemory.writebyte(Mod6SvArmor2, SeedMod6SvArmor2)
		mainmemory.writebyte(Mod7SvArmor2, SeedMod7SvArmor2)
		mainmemory.writebyte(Mod8SvArmor2, SeedMod8SvArmor2)
		mainmemory.writebyte(Mod9SvArmor2, SeedMod9SvArmor2)
		mainmemory.writebyte(Mod10SvArmor2, SeedMod10SvArmor2)
		mainmemory.writebyte(MaxSlotsCrVest1, SeedMaxSlotsCrVest1)
		mainmemory.writebyte(DefCrVest1, SeedDefCrVest1)
		mainmemory.writebyte(PEnCrVest1, SeedPEnCrVest1)
		mainmemory.writebyte(CrtCrVest1, SeedCrtCrVest1)
		mainmemory.writebyte(DefPlusCrVest1, SeedDefPlusCrVest1)
		mainmemory.writebyte(PEnPlusCrVest1, SeedPEnPlusCrVest1)
		mainmemory.writebyte(CrtPlusCrVest1, SeedCrtPlusCrVest1)
		mainmemory.writebyte(CurSlotsCrVest1, SeedCurSlotsCrVest1)
		mainmemory.writebyte(Mod1CrVest1, SeedMod1CrVest1)
		mainmemory.writebyte(Mod2CrVest1, SeedMod2CrVest1)
		mainmemory.writebyte(Mod3CrVest1, SeedMod3CrVest1)
		mainmemory.writebyte(Mod4CrVest1, SeedMod4CrVest1)
		mainmemory.writebyte(Mod5CrVest1, SeedMod5CrVest1)
		mainmemory.writebyte(Mod6CrVest1, SeedMod6CrVest1)
		mainmemory.writebyte(Mod7CrVest1, SeedMod7CrVest1)
		mainmemory.writebyte(Mod8CrVest1, SeedMod8CrVest1)
		mainmemory.writebyte(Mod9CrVest1, SeedMod9CrVest1)
		mainmemory.writebyte(Mod10CrVest1, SeedMod10CrVest1)
		mainmemory.writebyte(MaxSlotsCrVest2, SeedMaxSlotsCrVest2)
		mainmemory.writebyte(DefCrVest2, SeedDefCrVest2)
		mainmemory.writebyte(PEnCrVest2, SeedPEnCrVest2)
		mainmemory.writebyte(CrtCrVest2, SeedCrtCrVest2)
		mainmemory.writebyte(DefPlusCrVest2, SeedDefPlusCrVest2)
		mainmemory.writebyte(PEnPlusCrVest2, SeedPEnPlusCrVest2)
		mainmemory.writebyte(CrtPlusCrVest2, SeedCrtPlusCrVest2)
		mainmemory.writebyte(CurSlotsCrVest2, SeedCurSlotsCrVest2)
		mainmemory.writebyte(Mod1CrVest2, SeedMod1CrVest2)
		mainmemory.writebyte(Mod2CrVest2, SeedMod2CrVest2)
		mainmemory.writebyte(Mod3CrVest2, SeedMod3CrVest2)
		mainmemory.writebyte(Mod4CrVest2, SeedMod4CrVest2)
		mainmemory.writebyte(Mod5CrVest2, SeedMod5CrVest2)
		mainmemory.writebyte(Mod6CrVest2, SeedMod6CrVest2)
		mainmemory.writebyte(Mod7CrVest2, SeedMod7CrVest2)
		mainmemory.writebyte(Mod8CrVest2, SeedMod8CrVest2)
		mainmemory.writebyte(Mod9CrVest2, SeedMod9CrVest2)
		mainmemory.writebyte(Mod10CrVest2, SeedMod10CrVest2)
		mainmemory.writebyte(MaxSlotsCrProtector, SeedMaxSlotsCrProtector)
		mainmemory.writebyte(DefCrProtector, SeedDefCrProtector)
		mainmemory.writebyte(PEnCrProtector, SeedPEnCrProtector)
		mainmemory.writebyte(CrtCrProtector, SeedCrtCrProtector)
		mainmemory.writebyte(DefPlusCrProtector, SeedDefPlusCrProtector)
		mainmemory.writebyte(PEnPlusCrProtector, SeedPEnPlusCrProtector)
		mainmemory.writebyte(CrtPlusCrProtector, SeedCrtPlusCrProtector)
		mainmemory.writebyte(CurSlotsCrProtector, SeedCurSlotsCrProtector)
		mainmemory.writebyte(Mod1CrProtector, SeedMod1CrProtector)
		mainmemory.writebyte(Mod2CrProtector, SeedMod2CrProtector)
		mainmemory.writebyte(Mod3CrProtector, SeedMod3CrProtector)
		mainmemory.writebyte(Mod4CrProtector, SeedMod4CrProtector)
		mainmemory.writebyte(Mod5CrProtector, SeedMod5CrProtector)
		mainmemory.writebyte(Mod6CrProtector, SeedMod6CrProtector)
		mainmemory.writebyte(Mod7CrProtector, SeedMod7CrProtector)
		mainmemory.writebyte(Mod8CrProtector, SeedMod8CrProtector)
		mainmemory.writebyte(Mod9CrProtector, SeedMod9CrProtector)
		mainmemory.writebyte(Mod10CrProtector, SeedMod10CrProtector)
		mainmemory.writebyte(MaxSlotsCrJacket, SeedMaxSlotsCrJacket)
		mainmemory.writebyte(DefCrJacket, SeedDefCrJacket)
		mainmemory.writebyte(PEnCrJacket, SeedPEnCrJacket)
		mainmemory.writebyte(CrtCrJacket, SeedCrtCrJacket)
		mainmemory.writebyte(DefPlusCrJacket, SeedDefPlusCrJacket)
		mainmemory.writebyte(PEnPlusCrJacket, SeedPEnPlusCrJacket)
		mainmemory.writebyte(CrtPlusCrJacket, SeedCrtPlusCrJacket)
		mainmemory.writebyte(CurSlotsCrJacket, SeedCurSlotsCrJacket)
		mainmemory.writebyte(Mod1CrJacket, SeedMod1CrJacket)
		mainmemory.writebyte(Mod2CrJacket, SeedMod2CrJacket)
		mainmemory.writebyte(Mod3CrJacket, SeedMod3CrJacket)
		mainmemory.writebyte(Mod4CrJacket, SeedMod4CrJacket)
		mainmemory.writebyte(Mod5CrJacket, SeedMod5CrJacket)
		mainmemory.writebyte(Mod6CrJacket, SeedMod6CrJacket)
		mainmemory.writebyte(Mod7CrJacket, SeedMod7CrJacket)
		mainmemory.writebyte(Mod8CrJacket, SeedMod8CrJacket)
		mainmemory.writebyte(Mod9CrJacket, SeedMod9CrJacket)
		mainmemory.writebyte(Mod10CrJacket, SeedMod10CrJacket)
		mainmemory.writebyte(MaxSlotsCrSuit1, SeedMaxSlotsCrSuit1)
		mainmemory.writebyte(DefCrSuit1, SeedDefCrSuit1)
		mainmemory.writebyte(PEnCrSuit1, SeedPEnCrSuit1)
		mainmemory.writebyte(CrtCrSuit1, SeedCrtCrSuit1)
		mainmemory.writebyte(DefPlusCrSuit1, SeedDefPlusCrSuit1)
		mainmemory.writebyte(PEnPlusCrSuit1, SeedPEnPlusCrSuit1)
		mainmemory.writebyte(CrtPlusCrSuit1, SeedCrtPlusCrSuit1)
		mainmemory.writebyte(CurSlotsCrSuit1, SeedCurSlotsCrSuit1)
		mainmemory.writebyte(Mod1CrSuit1, SeedMod1CrSuit1)
		mainmemory.writebyte(Mod2CrSuit1, SeedMod2CrSuit1)
		mainmemory.writebyte(Mod3CrSuit1, SeedMod3CrSuit1)
		mainmemory.writebyte(Mod4CrSuit1, SeedMod4CrSuit1)
		mainmemory.writebyte(Mod5CrSuit1, SeedMod5CrSuit1)
		mainmemory.writebyte(Mod6CrSuit1, SeedMod6CrSuit1)
		mainmemory.writebyte(Mod7CrSuit1, SeedMod7CrSuit1)
		mainmemory.writebyte(Mod8CrSuit1, SeedMod8CrSuit1)
		mainmemory.writebyte(Mod9CrSuit1, SeedMod9CrSuit1)
		mainmemory.writebyte(Mod10CrSuit1, SeedMod10CrSuit1)
		mainmemory.writebyte(MaxSlotsCrSuit2, SeedMaxSlotsCrSuit2)
		mainmemory.writebyte(DefCrSuit2, SeedDefCrSuit2)
		mainmemory.writebyte(PEnCrSuit2, SeedPEnCrSuit2)
		mainmemory.writebyte(CrtCrSuit2, SeedCrtCrSuit2)
		mainmemory.writebyte(DefPlusCrSuit2, SeedDefPlusCrSuit2)
		mainmemory.writebyte(PEnPlusCrSuit2, SeedPEnPlusCrSuit2)
		mainmemory.writebyte(CrtPlusCrSuit2, SeedCrtPlusCrSuit2)
		mainmemory.writebyte(CurSlotsCrSuit2, SeedCurSlotsCrSuit2)
		mainmemory.writebyte(Mod1CrSuit2, SeedMod1CrSuit2)
		mainmemory.writebyte(Mod2CrSuit2, SeedMod2CrSuit2)
		mainmemory.writebyte(Mod3CrSuit2, SeedMod3CrSuit2)
		mainmemory.writebyte(Mod4CrSuit2, SeedMod4CrSuit2)
		mainmemory.writebyte(Mod5CrSuit2, SeedMod5CrSuit2)
		mainmemory.writebyte(Mod6CrSuit2, SeedMod6CrSuit2)
		mainmemory.writebyte(Mod7CrSuit2, SeedMod7CrSuit2)
		mainmemory.writebyte(Mod8CrSuit2, SeedMod8CrSuit2)
		mainmemory.writebyte(Mod9CrSuit2, SeedMod9CrSuit2)
		mainmemory.writebyte(Mod10CrSuit2, SeedMod10CrSuit2)
		mainmemory.writebyte(MaxSlotsCrArmor1, SeedMaxSlotsCrArmor1)
		mainmemory.writebyte(DefCrArmor1, SeedDefCrArmor1)
		mainmemory.writebyte(PEnCrArmor1, SeedPEnCrArmor1)
		mainmemory.writebyte(CrtCrArmor1, SeedCrtCrArmor1)
		mainmemory.writebyte(DefPlusCrArmor1, SeedDefPlusCrArmor1)
		mainmemory.writebyte(PEnPlusCrArmor1, SeedPEnPlusCrArmor1)
		mainmemory.writebyte(CrtPlusCrArmor1, SeedCrtPlusCrArmor1)
		mainmemory.writebyte(CurSlotsCrArmor1, SeedCurSlotsCrArmor1)
		mainmemory.writebyte(Mod1CrArmor1, SeedMod1CrArmor1)
		mainmemory.writebyte(Mod2CrArmor1, SeedMod2CrArmor1)
		mainmemory.writebyte(Mod3CrArmor1, SeedMod3CrArmor1)
		mainmemory.writebyte(Mod4CrArmor1, SeedMod4CrArmor1)
		mainmemory.writebyte(Mod5CrArmor1, SeedMod5CrArmor1)
		mainmemory.writebyte(Mod6CrArmor1, SeedMod6CrArmor1)
		mainmemory.writebyte(Mod7CrArmor1, SeedMod7CrArmor1)
		mainmemory.writebyte(Mod8CrArmor1, SeedMod8CrArmor1)
		mainmemory.writebyte(Mod9CrArmor1, SeedMod9CrArmor1)
		mainmemory.writebyte(Mod10CrArmor1, SeedMod10CrArmor1)
		mainmemory.writebyte(MaxSlotsCrArmor2, SeedMaxSlotsCrArmor2)
		mainmemory.writebyte(DefCrArmor2, SeedDefCrArmor2)
		mainmemory.writebyte(PEnCrArmor2, SeedPEnCrArmor2)
		mainmemory.writebyte(CrtCrArmor2, SeedCrtCrArmor2)
		mainmemory.writebyte(DefPlusCrArmor2, SeedDefPlusCrArmor2)
		mainmemory.writebyte(PEnPlusCrArmor2, SeedPEnPlusCrArmor2)
		mainmemory.writebyte(CrtPlusCrArmor2, SeedCrtPlusCrArmor2)
		mainmemory.writebyte(CurSlotsCrArmor2, SeedCurSlotsCrArmor2)
		mainmemory.writebyte(Mod1CrArmor2, SeedMod1CrArmor2)
		mainmemory.writebyte(Mod2CrArmor2, SeedMod2CrArmor2)
		mainmemory.writebyte(Mod3CrArmor2, SeedMod3CrArmor2)
		mainmemory.writebyte(Mod4CrArmor2, SeedMod4CrArmor2)
		mainmemory.writebyte(Mod5CrArmor2, SeedMod5CrArmor2)
		mainmemory.writebyte(Mod6CrArmor2, SeedMod6CrArmor2)
		mainmemory.writebyte(Mod7CrArmor2, SeedMod7CrArmor2)
		mainmemory.writebyte(Mod8CrArmor2, SeedMod8CrArmor2)
		mainmemory.writebyte(Mod9CrArmor2, SeedMod9CrArmor2)
		mainmemory.writebyte(Mod10CrArmor2, SeedMod10CrArmor2)
		mainmemory.writebyte(MaxSlotsBVest1, SeedMaxSlotsBVest1)
		mainmemory.writebyte(DefBVest1, SeedDefBVest1)
		mainmemory.writebyte(PEnBVest1, SeedPEnBVest1)
		mainmemory.writebyte(CrtBVest1, SeedCrtBVest1)
		mainmemory.writebyte(DefPlusBVest1, SeedDefPlusBVest1)
		mainmemory.writebyte(PEnPlusBVest1, SeedPEnPlusBVest1)
		mainmemory.writebyte(CrtPlusBVest1, SeedCrtPlusBVest1)
		mainmemory.writebyte(CurSlotsBVest1, SeedCurSlotsBVest1)
		mainmemory.writebyte(Mod1BVest1, SeedMod1BVest1)
		mainmemory.writebyte(Mod2BVest1, SeedMod2BVest1)
		mainmemory.writebyte(Mod3BVest1, SeedMod3BVest1)
		mainmemory.writebyte(Mod4BVest1, SeedMod4BVest1)
		mainmemory.writebyte(Mod5BVest1, SeedMod5BVest1)
		mainmemory.writebyte(Mod6BVest1, SeedMod6BVest1)
		mainmemory.writebyte(Mod7BVest1, SeedMod7BVest1)
		mainmemory.writebyte(Mod8BVest1, SeedMod8BVest1)
		mainmemory.writebyte(Mod9BVest1, SeedMod9BVest1)
		mainmemory.writebyte(Mod10BVest1, SeedMod10BVest1)
		mainmemory.writebyte(MaxSlotsBVest2, SeedMaxSlotsBVest2)
		mainmemory.writebyte(DefBVest2, SeedDefBVest2)
		mainmemory.writebyte(PEnBVest2, SeedPEnBVest2)
		mainmemory.writebyte(CrtBVest2, SeedCrtBVest2)
		mainmemory.writebyte(DefPlusBVest2, SeedDefPlusBVest2)
		mainmemory.writebyte(PEnPlusBVest2, SeedPEnPlusBVest2)
		mainmemory.writebyte(CrtPlusBVest2, SeedCrtPlusBVest2)
		mainmemory.writebyte(CurSlotsBVest2, SeedCurSlotsBVest2)
		mainmemory.writebyte(Mod1BVest2, SeedMod1BVest2)
		mainmemory.writebyte(Mod2BVest2, SeedMod2BVest2)
		mainmemory.writebyte(Mod3BVest2, SeedMod3BVest2)
		mainmemory.writebyte(Mod4BVest2, SeedMod4BVest2)
		mainmemory.writebyte(Mod5BVest2, SeedMod5BVest2)
		mainmemory.writebyte(Mod6BVest2, SeedMod6BVest2)
		mainmemory.writebyte(Mod7BVest2, SeedMod7BVest2)
		mainmemory.writebyte(Mod8BVest2, SeedMod8BVest2)
		mainmemory.writebyte(Mod9BVest2, SeedMod9BVest2)
		mainmemory.writebyte(Mod10BVest2, SeedMod10BVest2)
		mainmemory.writebyte(MaxSlotsBProtector, SeedMaxSlotsBProtector)
		mainmemory.writebyte(DefBProtector, SeedDefBProtector)
		mainmemory.writebyte(PEnBProtector, SeedPEnBProtector)
		mainmemory.writebyte(CrtBProtector, SeedCrtBProtector)
		mainmemory.writebyte(DefPlusBProtector, SeedDefPlusBProtector)
		mainmemory.writebyte(PEnPlusBProtector, SeedPEnPlusBProtector)
		mainmemory.writebyte(CrtPlusBProtector, SeedCrtPlusBProtector)
		mainmemory.writebyte(CurSlotsBProtector, SeedCurSlotsBProtector)
		mainmemory.writebyte(Mod1BProtector, SeedMod1BProtector)
		mainmemory.writebyte(Mod2BProtector, SeedMod2BProtector)
		mainmemory.writebyte(Mod3BProtector, SeedMod3BProtector)
		mainmemory.writebyte(Mod4BProtector, SeedMod4BProtector)
		mainmemory.writebyte(Mod5BProtector, SeedMod5BProtector)
		mainmemory.writebyte(Mod6BProtector, SeedMod6BProtector)
		mainmemory.writebyte(Mod7BProtector, SeedMod7BProtector)
		mainmemory.writebyte(Mod8BProtector, SeedMod8BProtector)
		mainmemory.writebyte(Mod9BProtector, SeedMod9BProtector)
		mainmemory.writebyte(Mod10BProtector, SeedMod10BProtector)
		mainmemory.writebyte(MaxSlotsBJacket1, SeedMaxSlotsBJacket1)
		mainmemory.writebyte(DefBJacket1, SeedDefBJacket1)
		mainmemory.writebyte(PEnBJacket1, SeedPEnBJacket1)
		mainmemory.writebyte(CrtBJacket1, SeedCrtBJacket1)
		mainmemory.writebyte(DefPlusBJacket1, SeedDefPlusBJacket1)
		mainmemory.writebyte(PEnPlusBJacket1, SeedPEnPlusBJacket1)
		mainmemory.writebyte(CrtPlusBJacket1, SeedCrtPlusBJacket1)
		mainmemory.writebyte(CurSlotsBJacket1, SeedCurSlotsBJacket1)
		mainmemory.writebyte(Mod1BJacket1, SeedMod1BJacket1)
		mainmemory.writebyte(Mod2BJacket1, SeedMod2BJacket1)
		mainmemory.writebyte(Mod3BJacket1, SeedMod3BJacket1)
		mainmemory.writebyte(Mod4BJacket1, SeedMod4BJacket1)
		mainmemory.writebyte(Mod5BJacket1, SeedMod5BJacket1)
		mainmemory.writebyte(Mod6BJacket1, SeedMod6BJacket1)
		mainmemory.writebyte(Mod7BJacket1, SeedMod7BJacket1)
		mainmemory.writebyte(Mod8BJacket1, SeedMod8BJacket1)
		mainmemory.writebyte(Mod9BJacket1, SeedMod9BJacket1)
		mainmemory.writebyte(Mod10BJacket1, SeedMod10BJacket1)
		mainmemory.writebyte(MaxSlotsBJacket2, SeedMaxSlotsBJacket2)
		mainmemory.writebyte(DefBJacket2, SeedDefBJacket2)
		mainmemory.writebyte(PEnBJacket2, SeedPEnBJacket2)
		mainmemory.writebyte(CrtBJacket2, SeedCrtBJacket2)
		mainmemory.writebyte(DefPlusBJacket2, SeedDefPlusBJacket2)
		mainmemory.writebyte(PEnPlusBJacket2, SeedPEnPlusBJacket2)
		mainmemory.writebyte(CrtPlusBJacket2, SeedCrtPlusBJacket2)
		mainmemory.writebyte(CurSlotsBJacket2, SeedCurSlotsBJacket2)
		mainmemory.writebyte(Mod1BJacket2, SeedMod1BJacket2)
		mainmemory.writebyte(Mod2BJacket2, SeedMod2BJacket2)
		mainmemory.writebyte(Mod3BJacket2, SeedMod3BJacket2)
		mainmemory.writebyte(Mod4BJacket2, SeedMod4BJacket2)
		mainmemory.writebyte(Mod5BJacket2, SeedMod5BJacket2)
		mainmemory.writebyte(Mod6BJacket2, SeedMod6BJacket2)
		mainmemory.writebyte(Mod7BJacket2, SeedMod7BJacket2)
		mainmemory.writebyte(Mod8BJacket2, SeedMod8BJacket2)
		mainmemory.writebyte(Mod9BJacket2, SeedMod9BJacket2)
		mainmemory.writebyte(Mod10BJacket2, SeedMod10BJacket2)
		mainmemory.writebyte(MaxSlotsBSuit1, SeedMaxSlotsBSuit1)
		mainmemory.writebyte(DefBSuit1, SeedDefBSuit1)
		mainmemory.writebyte(PEnBSuit1, SeedPEnBSuit1)
		mainmemory.writebyte(CrtBSuit1, SeedCrtBSuit1)
		mainmemory.writebyte(DefPlusBSuit1, SeedDefPlusBSuit1)
		mainmemory.writebyte(PEnPlusBSuit1, SeedPEnPlusBSuit1)
		mainmemory.writebyte(CrtPlusBSuit1, SeedCrtPlusBSuit1)
		mainmemory.writebyte(CurSlotsBSuit1, SeedCurSlotsBSuit1)
		mainmemory.writebyte(Mod1BSuit1, SeedMod1BSuit1)
		mainmemory.writebyte(Mod2BSuit1, SeedMod2BSuit1)
		mainmemory.writebyte(Mod3BSuit1, SeedMod3BSuit1)
		mainmemory.writebyte(Mod4BSuit1, SeedMod4BSuit1)
		mainmemory.writebyte(Mod5BSuit1, SeedMod5BSuit1)
		mainmemory.writebyte(Mod6BSuit1, SeedMod6BSuit1)
		mainmemory.writebyte(Mod7BSuit1, SeedMod7BSuit1)
		mainmemory.writebyte(Mod8BSuit1, SeedMod8BSuit1)
		mainmemory.writebyte(Mod9BSuit1, SeedMod9BSuit1)
		mainmemory.writebyte(Mod10BSuit1, SeedMod10BSuit1)
		mainmemory.writebyte(MaxSlotsBSuit2, SeedMaxSlotsBSuit2)
		mainmemory.writebyte(DefBSuit2, SeedDefBSuit2)
		mainmemory.writebyte(PEnBSuit2, SeedPEnBSuit2)
		mainmemory.writebyte(CrtBSuit2, SeedCrtBSuit2)
		mainmemory.writebyte(DefPlusBSuit2, SeedDefPlusBSuit2)
		mainmemory.writebyte(PEnPlusBSuit2, SeedPEnPlusBSuit2)
		mainmemory.writebyte(CrtPlusBSuit2, SeedCrtPlusBSuit2)
		mainmemory.writebyte(CurSlotsBSuit2, SeedCurSlotsBSuit2)
		mainmemory.writebyte(Mod1BSuit2, SeedMod1BSuit2)
		mainmemory.writebyte(Mod2BSuit2, SeedMod2BSuit2)
		mainmemory.writebyte(Mod3BSuit2, SeedMod3BSuit2)
		mainmemory.writebyte(Mod4BSuit2, SeedMod4BSuit2)
		mainmemory.writebyte(Mod5BSuit2, SeedMod5BSuit2)
		mainmemory.writebyte(Mod6BSuit2, SeedMod6BSuit2)
		mainmemory.writebyte(Mod7BSuit2, SeedMod7BSuit2)
		mainmemory.writebyte(Mod8BSuit2, SeedMod8BSuit2)
		mainmemory.writebyte(Mod9BSuit2, SeedMod9BSuit2)
		mainmemory.writebyte(Mod10BSuit2, SeedMod10BSuit2)
		mainmemory.writebyte(MaxSlotsBArmor, SeedMaxSlotsBArmor)
		mainmemory.writebyte(DefBArmor, SeedDefBArmor)
		mainmemory.writebyte(PEnBArmor, SeedPEnBArmor)
		mainmemory.writebyte(CrtBArmor, SeedCrtBArmor)
		mainmemory.writebyte(DefPlusBArmor, SeedDefPlusBArmor)
		mainmemory.writebyte(PEnPlusBArmor, SeedPEnPlusBArmor)
		mainmemory.writebyte(CrtPlusBArmor, SeedCrtPlusBArmor)
		mainmemory.writebyte(CurSlotsBArmor, SeedCurSlotsBArmor)
		mainmemory.writebyte(Mod1BArmor, SeedMod1BArmor)
		mainmemory.writebyte(Mod2BArmor, SeedMod2BArmor)
		mainmemory.writebyte(Mod3BArmor, SeedMod3BArmor)
		mainmemory.writebyte(Mod4BArmor, SeedMod4BArmor)
		mainmemory.writebyte(Mod5BArmor, SeedMod5BArmor)
		mainmemory.writebyte(Mod6BArmor, SeedMod6BArmor)
		mainmemory.writebyte(Mod7BArmor, SeedMod7BArmor)
		mainmemory.writebyte(Mod8BArmor, SeedMod8BArmor)
		mainmemory.writebyte(Mod9BArmor, SeedMod9BArmor)
		mainmemory.writebyte(Mod10BArmor, SeedMod10BArmor)
		mainmemory.writebyte(MaxSlotsCmVest1, SeedMaxSlotsCmVest1)
		mainmemory.writebyte(DefCmVest1, SeedDefCmVest1)
		mainmemory.writebyte(PEnCmVest1, SeedPEnCmVest1)
		mainmemory.writebyte(CrtCmVest1, SeedCrtCmVest1)
		mainmemory.writebyte(DefPlusCmVest1, SeedDefPlusCmVest1)
		mainmemory.writebyte(PEnPlusCmVest1, SeedPEnPlusCmVest1)
		mainmemory.writebyte(CrtPlusCmVest1, SeedCrtPlusCmVest1)
		mainmemory.writebyte(CurSlotsCmVest1, SeedCurSlotsCmVest1)
		mainmemory.writebyte(Mod1CmVest1, SeedMod1CmVest1)
		mainmemory.writebyte(Mod2CmVest1, SeedMod2CmVest1)
		mainmemory.writebyte(Mod3CmVest1, SeedMod3CmVest1)
		mainmemory.writebyte(Mod4CmVest1, SeedMod4CmVest1)
		mainmemory.writebyte(Mod5CmVest1, SeedMod5CmVest1)
		mainmemory.writebyte(Mod6CmVest1, SeedMod6CmVest1)
		mainmemory.writebyte(Mod7CmVest1, SeedMod7CmVest1)
		mainmemory.writebyte(Mod8CmVest1, SeedMod8CmVest1)
		mainmemory.writebyte(Mod9CmVest1, SeedMod9CmVest1)
		mainmemory.writebyte(Mod10CmVest1, SeedMod10CmVest1)
		mainmemory.writebyte(MaxSlotsCmVest2, SeedMaxSlotsCmVest2)
		mainmemory.writebyte(DefCmVest2, SeedDefCmVest2)
		mainmemory.writebyte(PEnCmVest2, SeedPEnCmVest2)
		mainmemory.writebyte(CrtCmVest2, SeedCrtCmVest2)
		mainmemory.writebyte(DefPlusCmVest2, SeedDefPlusCmVest2)
		mainmemory.writebyte(PEnPlusCmVest2, SeedPEnPlusCmVest2)
		mainmemory.writebyte(CrtPlusCmVest2, SeedCrtPlusCmVest2)
		mainmemory.writebyte(CurSlotsCmVest2, SeedCurSlotsCmVest2)
		mainmemory.writebyte(Mod1CmVest2, SeedMod1CmVest2)
		mainmemory.writebyte(Mod2CmVest2, SeedMod2CmVest2)
		mainmemory.writebyte(Mod3CmVest2, SeedMod3CmVest2)
		mainmemory.writebyte(Mod4CmVest2, SeedMod4CmVest2)
		mainmemory.writebyte(Mod5CmVest2, SeedMod5CmVest2)
		mainmemory.writebyte(Mod6CmVest2, SeedMod6CmVest2)
		mainmemory.writebyte(Mod7CmVest2, SeedMod7CmVest2)
		mainmemory.writebyte(Mod8CmVest2, SeedMod8CmVest2)
		mainmemory.writebyte(Mod9CmVest2, SeedMod9CmVest2)
		mainmemory.writebyte(Mod10CmVest2, SeedMod10CmVest2)
		mainmemory.writebyte(MaxSlotsCmProtector, SeedMaxSlotsCmProtector)
		mainmemory.writebyte(DefCmProtector, SeedDefCmProtector)
		mainmemory.writebyte(PEnCmProtector, SeedPEnCmProtector)
		mainmemory.writebyte(CrtCmProtector, SeedCrtCmProtector)
		mainmemory.writebyte(DefPlusCmProtector, SeedDefPlusCmProtector)
		mainmemory.writebyte(PEnPlusCmProtector, SeedPEnPlusCmProtector)
		mainmemory.writebyte(CrtPlusCmProtector, SeedCrtPlusCmProtector)
		mainmemory.writebyte(CurSlotsCmProtector, SeedCurSlotsCmProtector)
		mainmemory.writebyte(Mod1CmProtector, SeedMod1CmProtector)
		mainmemory.writebyte(Mod2CmProtector, SeedMod2CmProtector)
		mainmemory.writebyte(Mod3CmProtector, SeedMod3CmProtector)
		mainmemory.writebyte(Mod4CmProtector, SeedMod4CmProtector)
		mainmemory.writebyte(Mod5CmProtector, SeedMod5CmProtector)
		mainmemory.writebyte(Mod6CmProtector, SeedMod6CmProtector)
		mainmemory.writebyte(Mod7CmProtector, SeedMod7CmProtector)
		mainmemory.writebyte(Mod8CmProtector, SeedMod8CmProtector)
		mainmemory.writebyte(Mod9CmProtector, SeedMod9CmProtector)
		mainmemory.writebyte(Mod10CmProtector, SeedMod10CmProtector)
		mainmemory.writebyte(MaxSlotsCmJacket, SeedMaxSlotsCmJacket)
		mainmemory.writebyte(DefCmJacket, SeedDefCmJacket)
		mainmemory.writebyte(PEnCmJacket, SeedPEnCmJacket)
		mainmemory.writebyte(CrtCmJacket, SeedCrtCmJacket)
		mainmemory.writebyte(DefPlusCmJacket, SeedDefPlusCmJacket)
		mainmemory.writebyte(PEnPlusCmJacket, SeedPEnPlusCmJacket)
		mainmemory.writebyte(CrtPlusCmJacket, SeedCrtPlusCmJacket)
		mainmemory.writebyte(CurSlotsCmJacket, SeedCurSlotsCmJacket)
		mainmemory.writebyte(Mod1CmJacket, SeedMod1CmJacket)
		mainmemory.writebyte(Mod2CmJacket, SeedMod2CmJacket)
		mainmemory.writebyte(Mod3CmJacket, SeedMod3CmJacket)
		mainmemory.writebyte(Mod4CmJacket, SeedMod4CmJacket)
		mainmemory.writebyte(Mod5CmJacket, SeedMod5CmJacket)
		mainmemory.writebyte(Mod6CmJacket, SeedMod6CmJacket)
		mainmemory.writebyte(Mod7CmJacket, SeedMod7CmJacket)
		mainmemory.writebyte(Mod8CmJacket, SeedMod8CmJacket)
		mainmemory.writebyte(Mod9CmJacket, SeedMod9CmJacket)
		mainmemory.writebyte(Mod10CmJacket, SeedMod10CmJacket)
		mainmemory.writebyte(MaxSlotsCmSuit1, SeedMaxSlotsCmSuit1)
		mainmemory.writebyte(DefCmSuit1, SeedDefCmSuit1)
		mainmemory.writebyte(PEnCmSuit1, SeedPEnCmSuit1)
		mainmemory.writebyte(CrtCmSuit1, SeedCrtCmSuit1)
		mainmemory.writebyte(DefPlusCmSuit1, SeedDefPlusCmSuit1)
		mainmemory.writebyte(PEnPlusCmSuit1, SeedPEnPlusCmSuit1)
		mainmemory.writebyte(CrtPlusCmSuit1, SeedCrtPlusCmSuit1)
		mainmemory.writebyte(CurSlotsCmSuit1, SeedCurSlotsCmSuit1)
		mainmemory.writebyte(Mod1CmSuit1, SeedMod1CmSuit1)
		mainmemory.writebyte(Mod2CmSuit1, SeedMod2CmSuit1)
		mainmemory.writebyte(Mod3CmSuit1, SeedMod3CmSuit1)
		mainmemory.writebyte(Mod4CmSuit1, SeedMod4CmSuit1)
		mainmemory.writebyte(Mod5CmSuit1, SeedMod5CmSuit1)
		mainmemory.writebyte(Mod6CmSuit1, SeedMod6CmSuit1)
		mainmemory.writebyte(Mod7CmSuit1, SeedMod7CmSuit1)
		mainmemory.writebyte(Mod8CmSuit1, SeedMod8CmSuit1)
		mainmemory.writebyte(Mod9CmSuit1, SeedMod9CmSuit1)
		mainmemory.writebyte(Mod10CmSuit1, SeedMod10CmSuit1)
		mainmemory.writebyte(MaxSlotsCmArmor1, SeedMaxSlotsCmArmor1)
		mainmemory.writebyte(DefCmArmor1, SeedDefCmArmor1)
		mainmemory.writebyte(PEnCmArmor1, SeedPEnCmArmor1)
		mainmemory.writebyte(CrtCmArmor1, SeedCrtCmArmor1)
		mainmemory.writebyte(DefPlusCmArmor1, SeedDefPlusCmArmor1)
		mainmemory.writebyte(PEnPlusCmArmor1, SeedPEnPlusCmArmor1)
		mainmemory.writebyte(CrtPlusCmArmor1, SeedCrtPlusCmArmor1)
		mainmemory.writebyte(CurSlotsCmArmor1, SeedCurSlotsCmArmor1)
		mainmemory.writebyte(Mod1CmArmor1, SeedMod1CmArmor1)
		mainmemory.writebyte(Mod2CmArmor1, SeedMod2CmArmor1)
		mainmemory.writebyte(Mod3CmArmor1, SeedMod3CmArmor1)
		mainmemory.writebyte(Mod4CmArmor1, SeedMod4CmArmor1)
		mainmemory.writebyte(Mod5CmArmor1, SeedMod5CmArmor1)
		mainmemory.writebyte(Mod6CmArmor1, SeedMod6CmArmor1)
		mainmemory.writebyte(Mod7CmArmor1, SeedMod7CmArmor1)
		mainmemory.writebyte(Mod8CmArmor1, SeedMod8CmArmor1)
		mainmemory.writebyte(Mod9CmArmor1, SeedMod9CmArmor1)
		mainmemory.writebyte(Mod10CmArmor1, SeedMod10CmArmor1)
		mainmemory.writebyte(MaxSlotsCmArmor2, SeedMaxSlotsCmArmor2)
		mainmemory.writebyte(DefCmArmor2, SeedDefCmArmor2)
		mainmemory.writebyte(PEnCmArmor2, SeedPEnCmArmor2)
		mainmemory.writebyte(CrtCmArmor2, SeedCrtCmArmor2)
		mainmemory.writebyte(DefPlusCmArmor2, SeedDefPlusCmArmor2)
		mainmemory.writebyte(PEnPlusCmArmor2, SeedPEnPlusCmArmor2)
		mainmemory.writebyte(CrtPlusCmArmor2, SeedCrtPlusCmArmor2)
		mainmemory.writebyte(CurSlotsCmArmor2, SeedCurSlotsCmArmor2)
		mainmemory.writebyte(Mod1CmArmor2, SeedMod1CmArmor2)
		mainmemory.writebyte(Mod2CmArmor2, SeedMod2CmArmor2)
		mainmemory.writebyte(Mod3CmArmor2, SeedMod3CmArmor2)
		mainmemory.writebyte(Mod4CmArmor2, SeedMod4CmArmor2)
		mainmemory.writebyte(Mod5CmArmor2, SeedMod5CmArmor2)
		mainmemory.writebyte(Mod6CmArmor2, SeedMod6CmArmor2)
		mainmemory.writebyte(Mod7CmArmor2, SeedMod7CmArmor2)
		mainmemory.writebyte(Mod8CmArmor2, SeedMod8CmArmor2)
		mainmemory.writebyte(Mod9CmArmor2, SeedMod9CmArmor2)
		mainmemory.writebyte(Mod10CmArmor2, SeedMod10CmArmor2)

	end

	




-- [ Quality of Life ] --

	if mainmemory.read_u16_le(StoryFlag) >= 0x0009 and (mainmemory.readbyte(GameState) == 0x00 or 																	-- Improving Aya's Movement Outside of Battles and Menus, and the Steam Room
	mainmemory.readbyte(GameState) == 0x80) and mainmemory.read_u32_le(Location) ~= 0xA80452C8 and
	mainmemory.read_u32_le(Location) ~= 0xA8046448 and mainmemory.read_u32_le(Location) ~= 0xA80464C8 and
	mainmemory.read_u32_le(Location) ~= 0xA80471C8 then
	
		mainmemory.write_u16_le(GameThrottle, 0x000C)																													-- Sets the Throttle to Roughly 2x, (0x00 Is the Fastest)

	elseif mainmemory.read_u32_le(Location) == 0xA8046448 or (mainmemory.read_u32_le(Location) == 0xA80471C8 and mainmemory.readbyte(AyaState) == 0x01) then

		mainmemory.write_u16_le(GameThrottle, 0x0000)

	else mainmemory.write_u16_le(GameThrottle, 0x0005)																												-- Restores Default Throttle Otherwise
	
	end


	if mainmemory.readbyte(ActiveSaveMenu) == 0x02 and mainmemory.readbyte(Slot1QuickerSave) == 0x00 and mainmemory.readbyte(Slot2QuickerSave) == 0x00 then			-- Saving Becomes Faster By Removing Slot Animations at Initial Save Menu Load

		mainmemory.writebyte(Slot1QuickerSave, 0x01)
		mainmemory.writebyte(Slot2QuickerSave, 0x01)

	end




	if mainmemory.readbyte(GameClock) <= 0x03 and mainmemory.read_u16_le(StoryFlag) == 0x0220 and mainmemory.readbyte(ChryslerFloor) >= 0x01 then					-- CB Floor Current Floor Display

		local CBFL = mainmemory.readbyte(ChryslerFloor)
		gui.pixelText(7, 4, "[" .. CBFL .. "F]", "red", "0")

	end




	if mainmemory.read_u16_le(AyaSToolCount) >= 0x03E7 and mainmemory.readbyte(GameClock) >= 0xFC then																-- Allows Tool Kit function with the Super Tool Kit

		mainmemory.write_u16_le(AyaToolCount, 0x03E7)

	end




	if mainmemory.read_u32_le(Location) == 0xA8026348 or mainmemory.read_u32_le(Location) == 0xA80263C8 or															-- CT Sewers Coordinates Display: Real Display for All Sewer Duplicates
	mainmemory.read_u32_le(Location) == 0xA8026448 or mainmemory.read_u32_le(Location) == 0xA80264C8 or mainmemory.read_u32_le(Location) == 0xA8027048 or
	mainmemory.read_u32_le(Location) == 0xA80270C8 or mainmemory.read_u32_le(Location) == 0xA8027148 or mainmemory.read_u32_le(Location) == 0xA80271C8 then

		if mainmemory.read_u16_le(GameState) == 0x8000 then

			gui.drawPixel(296, 13, "gold")
			gui.drawPixel(296, 14, "gold")
			gui.drawPixel(296, 17, "slategray")
			gui.drawPixel(296, 18, "slategray")		
			gui.drawPixel(297, 13, "gold")
			gui.drawPixel(297, 14, "gold")
			gui.drawPixel(297, 17, "slategray")
			gui.drawPixel(297, 18, "slategray")
			gui.drawPixel(298, 11, "slategray")
			gui.drawPixel(298, 12, "slategray")
			gui.drawPixel(298, 13, "silver")
			gui.drawPixel(298, 14, "silver")
			gui.drawPixel(298, 15, "gold")
			gui.drawPixel(298, 16, "gold")
			gui.drawPixel(298, 17, "silver")
			gui.drawPixel(298, 18, "silver")
			gui.drawPixel(298, 19, "slategray")
			gui.drawPixel(298, 20, "slategray")
			gui.drawPixel(298, 21, "skyblue")
			gui.drawPixel(298, 22, "skyblue")
			gui.drawPixel(299, 11, "slategray")
			gui.drawPixel(299, 12, "slategray")
			gui.drawPixel(299, 13, "silver")
			gui.drawPixel(299, 14, "silver")
			gui.drawPixel(299, 15, "gold")
			gui.drawPixel(299, 16, "gold")
			gui.drawPixel(299, 17, "silver")
			gui.drawPixel(299, 18, "silver")
			gui.drawPixel(299, 19, "slategray")
			gui.drawPixel(299, 20, "slategray")
			gui.drawPixel(299, 21, "skyblue")
			gui.drawPixel(299, 22, "skyblue")
			gui.drawPixel(300, 13, "gold")
			gui.drawPixel(300, 14, "gold")
			gui.drawPixel(300, 17, "gold")
			gui.drawPixel(300, 18, "gold")
			gui.drawPixel(300, 21, "mediumblue")
			gui.drawPixel(300, 22, "mediumblue")			
			gui.drawPixel(301, 13, "gold")
			gui.drawPixel(301, 14, "gold")
			gui.drawPixel(301, 17, "gold")
			gui.drawPixel(301, 18, "gold")
			gui.drawPixel(301, 21, "mediumblue")
			gui.drawPixel(301, 22, "mediumblue")
			gui.drawPixel(302, 11, "gold")
			gui.drawPixel(302, 12, "gold")
			gui.drawPixel(302, 13, "silver")
			gui.drawPixel(302, 14, "silver")
			gui.drawPixel(302, 15, "slategray")
			gui.drawPixel(302, 16, "slategray")
			gui.drawPixel(302, 17, "silver")
			gui.drawPixel(302, 18, "silver")
			gui.drawPixel(302, 19, "gold")
			gui.drawPixel(302, 20, "gold")
			gui.drawPixel(302, 21, "skyblue")
			gui.drawPixel(302, 22, "skyblue")
			gui.drawPixel(303, 11, "gold")
			gui.drawPixel(303, 12, "gold")
			gui.drawPixel(303, 13, "silver")
			gui.drawPixel(303, 14, "silver")
			gui.drawPixel(303, 15, "slategray")
			gui.drawPixel(303, 16, "slategray")
			gui.drawPixel(303, 17, "silver")
			gui.drawPixel(303, 18, "silver")
			gui.drawPixel(303, 19, "gold")
			gui.drawPixel(303, 20, "gold")
			gui.drawPixel(303, 21, "skyblue")
			gui.drawPixel(303, 22, "skyblue")
			gui.drawPixel(304, 13, "slategray")
			gui.drawPixel(304, 14, "slategray")
			gui.drawPixel(304, 17, "slategray")
			gui.drawPixel(304, 18, "slategray")
			gui.drawPixel(304, 21, "gold")
			gui.drawPixel(304, 22, "gold")			
			gui.drawPixel(305, 13, "slategray")
			gui.drawPixel(305, 14, "slategray")
			gui.drawPixel(305, 17, "slategray")
			gui.drawPixel(305, 18, "slategray")
			gui.drawPixel(305, 21, "gold")
			gui.drawPixel(305, 22, "gold")
			gui.drawPixel(306, 11, "slategray")
			gui.drawPixel(306, 12, "slategray")
			gui.drawPixel(306, 13, "gold")
			gui.drawPixel(306, 14, "gold")
			gui.drawPixel(306, 15, "gold")
			gui.drawPixel(306, 16, "gold")
			gui.drawPixel(306, 17, "silver")
			gui.drawPixel(306, 18, "silver")
			gui.drawPixel(306, 19, "slategray")
			gui.drawPixel(306, 20, "slategray")
			gui.drawPixel(306, 21, "skyblue")
			gui.drawPixel(306, 22, "skyblue")
			gui.drawPixel(307, 11, "slategray")
			gui.drawPixel(307, 12, "slategray")
			gui.drawPixel(307, 13, "gold")
			gui.drawPixel(307, 14, "gold")
			gui.drawPixel(307, 15, "gold")
			gui.drawPixel(307, 16, "gold")
			gui.drawPixel(307, 17, "silver")
			gui.drawPixel(307, 18, "silver")
			gui.drawPixel(307, 19, "slategray")
			gui.drawPixel(307, 20, "slategray")
			gui.drawPixel(307, 21, "skyblue")
			gui.drawPixel(307, 22, "skyblue")
			gui.drawPixel(308, 13, "mediumblue")
			gui.drawPixel(308, 14, "mediumblue")
			gui.drawPixel(308, 17, "slategray")
			gui.drawPixel(308, 18, "slategray")
			gui.drawPixel(308, 21, "red")
			gui.drawPixel(308, 22, "red")			
			gui.drawPixel(309, 13, "mediumblue")
			gui.drawPixel(309, 14, "mediumblue")
			gui.drawPixel(309, 17, "slategray")
			gui.drawPixel(309, 18, "slategray")
			gui.drawPixel(309, 21, "red")
			gui.drawPixel(309, 22, "red")
			gui.drawPixel(310, 11, "slategray")
			gui.drawPixel(310, 12, "slategray")
			gui.drawPixel(310, 13, "silver")
			gui.drawPixel(310, 14, "silver")
			gui.drawPixel(310, 15, "slategray")
			gui.drawPixel(310, 16, "slategray")
			gui.drawPixel(310, 17, "gold")
			gui.drawPixel(310, 18, "gold")
			gui.drawPixel(310, 19, "slategray")
			gui.drawPixel(310, 20, "slategray")
			gui.drawPixel(310, 21, "skyblue")
			gui.drawPixel(310, 22, "skyblue")
			gui.drawPixel(311, 11, "slategray")
			gui.drawPixel(311, 12, "slategray")
			gui.drawPixel(311, 13, "silver")
			gui.drawPixel(311, 14, "silver")
			gui.drawPixel(311, 15, "slategray")
			gui.drawPixel(311, 16, "slategray")
			gui.drawPixel(311, 17, "gold")
			gui.drawPixel(311, 18, "gold")
			gui.drawPixel(311, 19, "slategray")
			gui.drawPixel(311, 20, "slategray")
			gui.drawPixel(311, 21, "skyblue")
			gui.drawPixel(311, 22, "skyblue")
			gui.drawPixel(312, 13, "slategray")
			gui.drawPixel(312, 14, "slategray")
			gui.drawPixel(312, 17, "slategray")
			gui.drawPixel(312, 18, "slategray")
			gui.drawPixel(312, 21, "gold")
			gui.drawPixel(312, 22, "gold")
			gui.drawPixel(313, 13, "slategray")
			gui.drawPixel(313, 14, "slategray")
			gui.drawPixel(313, 17, "slategray")
			gui.drawPixel(313, 18, "slategray")
			gui.drawPixel(313, 21, "gold")
			gui.drawPixel(313, 22, "gold")
			gui.drawPixel(314, 11, "slategray")
			gui.drawPixel(314, 12, "slategray")
			gui.drawPixel(314, 13, "silver")
			gui.drawPixel(314, 14, "silver")
			gui.drawPixel(314, 15, "slategray")
			gui.drawPixel(314, 16, "slategray")
			gui.drawPixel(314, 17, "silver")
			gui.drawPixel(314, 18, "silver")
			gui.drawPixel(314, 19, "gold")
			gui.drawPixel(314, 20, "gold")
			gui.drawPixel(314, 21, "skyblue")
			gui.drawPixel(314, 22, "skyblue")
			gui.drawPixel(315, 11, "slategray")
			gui.drawPixel(315, 12, "slategray")
			gui.drawPixel(315, 13, "silver")
			gui.drawPixel(315, 14, "silver")
			gui.drawPixel(315, 15, "slategray")
			gui.drawPixel(315, 16, "slategray")
			gui.drawPixel(315, 17, "silver")
			gui.drawPixel(315, 18, "silver")
			gui.drawPixel(315, 19, "gold")
			gui.drawPixel(315, 20, "gold")
			gui.drawPixel(315, 21, "skyblue")
			gui.drawPixel(315, 22, "skyblue")
			gui.drawPixel(316, 13, "slategray")
			gui.drawPixel(316, 14, "slategray")
			gui.drawPixel(316, 17, "gold")
			gui.drawPixel(316, 18, "gold")
			gui.drawPixel(317, 13, "slategray")
			gui.drawPixel(317, 14, "slategray")
			gui.drawPixel(317, 17, "gold")
			gui.drawPixel(317, 18, "gold")

		else gui.clearGraphics()

		end


	end




	if (joypad.get()["P1 L2"] == true and joypad.get()["P1 R1"] == true) and joypad.get()["P1 Start"] == false then

		gui.text(20, 40, "DEBUG: STORY VARIABLES [CH" .. CH .. "|PD" .. PD .. "|CP" .. CP .. "|SH" .. SH .. "|HS" .. HS .. "|WH" .. WH .. "|CT" .. CT .. "|SW" .. SW .. "|MU" .. MU .. "||CC" .. CC .. "|CD" .. CD .. "|TK" .. TK .. "|AK" .. AK .. "||PE" .. PE .. "]")
		
	end




	emu.frameadvance()
	
	
end